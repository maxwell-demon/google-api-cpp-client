// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
//------------------------------------------------------------------------------
// This code was generated by google-apis-code-generator 1.5.0
//   Build date: 2014-11-17 18:43:33 UTC
//   on: 2014-12-11, 22:05:47 UTC
//   C++ generator version:
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//------------------------------------------------------------------------------
#ifndef  GOOGLE_YOUTUBE_API_YOU_TUBE_SERVICE_H_
#define  GOOGLE_YOUTUBE_API_YOU_TUBE_SERVICE_H_

#include <memory>
#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/service/client_service.h"
#include "googleapis/client/service/media_uploader.h"
#include "googleapis/client/service/service_request_pager.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/client/util/status.h"
#include "googleapis/client/util/uri_template.h"

#include "google/youtube_api/activity.h"
#include "google/youtube_api/activity_list_response.h"
#include "google/youtube_api/channel.h"
#include "google/youtube_api/channel_banner_resource.h"
#include "google/youtube_api/channel_list_response.h"
#include "google/youtube_api/channel_section.h"
#include "google/youtube_api/channel_section_list_response.h"
#include "google/youtube_api/guide_category_list_response.h"
#include "google/youtube_api/i18n_language_list_response.h"
#include "google/youtube_api/i18n_region_list_response.h"
#include "google/youtube_api/invideo_branding.h"
#include "google/youtube_api/live_broadcast.h"
#include "google/youtube_api/live_broadcast_list_response.h"
#include "google/youtube_api/live_stream.h"
#include "google/youtube_api/live_stream_list_response.h"
#include "google/youtube_api/playlist.h"
#include "google/youtube_api/playlist_item.h"
#include "google/youtube_api/playlist_item_list_response.h"
#include "google/youtube_api/playlist_list_response.h"
#include "google/youtube_api/search_list_response.h"
#include "google/youtube_api/subscription.h"
#include "google/youtube_api/subscription_list_response.h"
#include "google/youtube_api/thumbnail_set_response.h"
#include "google/youtube_api/video.h"
#include "google/youtube_api/video_category_list_response.h"
#include "google/youtube_api/video_get_rating_response.h"
#include "google/youtube_api/video_list_response.h"


namespace google_youtube_api {
using namespace googleapis;
/**
 * \mainpage
 *   YouTube Data API Version v3
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href='https://developers.google.com/youtube/v3'>YouTube Data API</a>
 *      <tr><th>API Version<td>v3
 *      <tr><th>API Rev<td>125
 *      <tr><th>API Docs
 *          <td><a href='https://developers.google.com/youtube/v3'>
 *              https://developers.google.com/youtube/v3</a>
 *      <tr><th>Discovery Name<td>youtube
 *      <tr><th>Generated At<td>2014-12-11 22:05:47 UTC
 *      <tr><th>C++ Generator<td>google-apis-code-generator
 *      <tr><th>Generator Version
 *          <td>1.5.0 / c++=0.1.2
 *      <tr><th>Generator Build<td>2014-11-17 18:43:33 UTC
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using YouTube Data API can be found at
 * <a href='https://developers.google.com/youtube/v3'>https://developers.google.com/youtube/v3</a>.
 *
 * For more information about the Google APIs Client Library for C++, see
 * <a href='https://developers.google.com/api-client-library/cpp/start/get_started'>
 * https://developers.google.com/api-client-library/cpp/start/get_started</a>
 */
class YouTubeService;

/**
 * Implements a common base method for all methods within the YouTubeService.
 *
 * This class defines all the attributes common across all methods.
 * It does not pertain to any specific service API so is not normally
 * explicitly instantiated.
 */
class YouTubeServiceBaseRequest
      : public client::ClientServiceRequest {
 public:
  /**
   * Standard constructor.
   *
   * @param[in] service  The service instance to send to when executed.
   *        In practice this will be supplied internally by the service
   *        when it acts as a method factory.
   *
   * @param[in] credential  If not NULL then the credential to authorize with.
   *        In practice this is supplied by the user code that is creating
   *        the method instance.
   *
   * @param[in] method  The HTTP method to use for the underlying HTTP request.
   *        In practice this is specified by the particular API endpoint and
   *        supplied internally by the derived class for that endpoint.
   *
   * @param[in] uri_template  The <a href='http://tools.ietf.org/html/rfc6570'>
   *        RFC 6570 URI Template</a> specifying the url to invoke
   *        The parameters in the template should be resolvable attributes.
   *        In practice this parameter is supplied internally by the derived
   *        class for the endpoint.
   */
  YouTubeServiceBaseRequest(
      const client::ClientService* service,
      client::AuthorizationCredential* credential,
      client::HttpRequest::HttpMethod method,
      const StringPiece& uri_template);

  /**
   * Standard destructor.
   */
  virtual ~YouTubeServiceBaseRequest();


  /**
   * Clears the '<code>alt</code>' attribute so it is no longer set.
   */
  void clear_alt() {
    _have_alt_ = false;
    client::ClearCppValueHelper(&alt_);
  }


  /**
   * Gets the optional '<code>alt</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_alt() const { return alt_; }

  /**
   * Gets a modifiable pointer to the optional <code>alt</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_alt() {
    _have_alt_ = true;
    return &alt_;
  }


  /**
   * Sets the '<code>alt</code>' attribute.
   *
   * @param[in] value Data format for the response.
   */
  void set_alt(const string& value) {
    _have_alt_ = true;
    alt_ = value;
  }



  /**
   * Clears the '<code>fields</code>' attribute so it is no longer set.
   */
  void clear_fields() {
    _have_fields_ = false;
    client::ClearCppValueHelper(&fields_);
  }


  /**
   * Gets the optional '<code>fields</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_fields() const { return fields_; }

  /**
   * Gets a modifiable pointer to the optional <code>fields</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_fields() {
    _have_fields_ = true;
    return &fields_;
  }


  /**
   * Sets the '<code>fields</code>' attribute.
   *
   * @param[in] value Selector specifying which fields to include in a partial
   * response.
   */
  void set_fields(const string& value) {
    _have_fields_ = true;
    fields_ = value;
  }



  /**
   * Clears the '<code>key</code>' attribute so it is no longer set.
   */
  void clear_key() {
    _have_key_ = false;
    client::ClearCppValueHelper(&key_);
  }


  /**
   * Gets the optional '<code>key</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_key() const { return key_; }

  /**
   * Gets a modifiable pointer to the optional <code>key</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_key() {
    _have_key_ = true;
    return &key_;
  }


  /**
   * Sets the '<code>key</code>' attribute.
   *
   * @param[in] value API key. Your API key identifies your project and provides
   * you with API access, quota, and reports. Required unless you provide an
   * OAuth 2.0 token.
   */
  void set_key(const string& value) {
    _have_key_ = true;
    key_ = value;
  }



  /**
   * Clears the '<code>oauth_token</code>' attribute so it is no longer set.
   */
  void clear_oauth_token() {
    _have_oauth_token_ = false;
    client::ClearCppValueHelper(&oauth_token_);
  }
  /**
   * @deprecated
   * @see clear_oauth_token
   */
  void clear_oauthToken() {
    clear_oauth_token();
  }

  /**
   * Gets the optional '<code>oauth_token</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_oauth_token() const { return oauth_token_; }

  /**
   * Gets a modifiable pointer to the optional <code>oauth_token</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_oauthToken() {
    _have_oauth_token_ = true;
    return &oauth_token_;
  }


  /**
   * Sets the '<code>oauth_token</code>' attribute.
   *
   * @param[in] value OAuth 2.0 token for the current user.
   */
  void set_oauth_token(const string& value) {
    _have_oauth_token_ = true;
    oauth_token_ = value;
  }



  /**
   * Clears the '<code>prettyPrint</code>' attribute so it is no longer set.
   */
  void clear_pretty_print() {
    _have_pretty_print_ = false;
    client::ClearCppValueHelper(&pretty_print_);
  }
  /**
   * @deprecated
   * @see clear_pretty_print
   */
  void clear_prettyPrint() {
    clear_pretty_print();
  }

  /**
   * Gets the optional '<code>prettyPrint</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  bool get_pretty_print() const { return pretty_print_; }

  /**
   * Sets the '<code>prettyPrint</code>' attribute.
   *
   * @param[in] value Returns response with indentations and line breaks.
   */
  void set_pretty_print(bool value) {
    _have_pretty_print_ = true;
    pretty_print_ = value;
  }

  /**
   * Clears the '<code>quotaUser</code>' attribute so it is no longer set.
   */
  void clear_quota_user() {
    _have_quota_user_ = false;
    client::ClearCppValueHelper(&quota_user_);
  }
  /**
   * @deprecated
   * @see clear_quota_user
   */
  void clear_quotaUser() {
    clear_quota_user();
  }

  /**
   * Gets the optional '<code>quotaUser</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_quota_user() const { return quota_user_; }

  /**
   * Gets a modifiable pointer to the optional <code>quotaUser</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_quotaUser() {
    _have_quota_user_ = true;
    return &quota_user_;
  }


  /**
   * Sets the '<code>quotaUser</code>' attribute.
   *
   * @param[in] value Available to use for quota purposes for server-side
   * applications. Can be any arbitrary string assigned to a user, but should
   * not exceed 40 characters. Overrides userIp if both are provided.
   */
  void set_quota_user(const string& value) {
    _have_quota_user_ = true;
    quota_user_ = value;
  }



  /**
   * Clears the '<code>userIp</code>' attribute so it is no longer set.
   */
  void clear_user_ip() {
    _have_user_ip_ = false;
    client::ClearCppValueHelper(&user_ip_);
  }
  /**
   * @deprecated
   * @see clear_user_ip
   */
  void clear_userIp() {
    clear_user_ip();
  }

  /**
   * Gets the optional '<code>userIp</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_user_ip() const { return user_ip_; }

  /**
   * Gets a modifiable pointer to the optional <code>userIp</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_userIp() {
    _have_user_ip_ = true;
    return &user_ip_;
  }


  /**
   * Sets the '<code>userIp</code>' attribute.
   *
   * @param[in] value IP address of the site where the request originates. Use
   * this if you want to enforce per-user limits.
   */
  void set_user_ip(const string& value) {
    _have_user_ip_ = true;
    user_ip_ = value;
  }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the
   * URI supplied to the constructor.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
      const StringPiece& variable_name,
      const client::UriTemplateConfig& config,
      string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);

 private:
  string alt_;
  string fields_;
  string key_;
  string oauth_token_;
  bool pretty_print_;
  string quota_user_;
  string user_ip_;
  bool _have_alt_ : 1;
  bool _have_fields_ : 1;
  bool _have_key_ : 1;
  bool _have_oauth_token_ : 1;
  bool _have_pretty_print_ : 1;
  bool _have_quota_user_ : 1;
  bool _have_user_ip_ : 1;

  DISALLOW_COPY_AND_ASSIGN(YouTubeServiceBaseRequest);
};



/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 */
class ActivitiesResource_InsertMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter serves two purposes in this operation.
   * It identifies the properties that the write operation will set as well as
   * the properties that the API response will include.
   *
   * The part names that you can include in the parameter value are snippet and
   * contentDetails.
   *
   * @param[in] _content_ The data object to insert.
   *
   */
  ActivitiesResource_InsertMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part,
        const Activity& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~ActivitiesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Activity* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ActivitiesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtube.readonly
 */
class ActivitiesResource_ListMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter specifies a comma-separated list of one
   * or more activity resource properties that the API response will include.
   * The part names that you can include in the parameter value are id, snippet,
   * and contentDetails.
   *
   * If the parameter identifies a property that contains child properties, the
   * child properties will be included in the response. For example, in a
   * activity resource, the snippet property contains other properties that
   * identify the type of activity, a display title for the activity, and so
   * forth. If you set part=snippet, the API response will also contain all of
   * those nested properties.
   *
   */
  ActivitiesResource_ListMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part);

  /**
   * Standard destructor.
   */
  virtual ~ActivitiesResource_ListMethod();


    /**
     * Clears the '<code>regionCode</code>' attribute so it is no longer set.
     */
    void clear_region_code() {
      _have_region_code_ = false;
      client::ClearCppValueHelper(&region_code_);
    }
    /**
     * @deprecated
     * @see clear_region_code
     */
    void clear_regionCode() {
      clear_region_code();
    }

    /**
     * Gets the optional '<code>regionCode</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_region_code() const { return region_code_; }

    /**
     * Gets a modifiable pointer to the optional <code>regionCode</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_regionCode() {
      _have_region_code_ = true;
      return &region_code_;
    }


    /**
     * Sets the '<code>regionCode</code>' attribute.
     *
     * @param[in] value The regionCode parameter instructs the API to return
     * results for the specified country. The parameter value is an ISO 3166-1
     * alpha-2 country code. YouTube uses this value when the authorized user's
     * previous activity on YouTube does not provide enough information to
     * generate the activity feed.
     */
    void set_region_code(const string& value) {
      _have_region_code_ = true;
      region_code_ = value;
    }



    /**
     * Clears the '<code>publishedBefore</code>' attribute so it is no longer
     * set.
     */
    void clear_published_before() {
      _have_published_before_ = false;
      client::ClearCppValueHelper(&published_before_);
    }
    /**
     * @deprecated
     * @see clear_published_before
     */
    void clear_publishedBefore() {
      clear_published_before();
    }

    /**
     * Gets the optional '<code>publishedBefore</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    client::DateTime get_published_before() const { return published_before_; }

    /**
     * Sets the '<code>publishedBefore</code>' attribute.
     *
     * @param[in] value The publishedBefore parameter specifies the date and
     * time before which an activity must have occurred for that activity to be
     * included in the API response. If the parameter value specifies a day, but
     * not a time, then any activities that occurred that day will be excluded
     * from the result set. The value is specified in ISO 8601 (YYYY-MM-
     * DDThh:mm:ss.sZ) format.
     */
    void set_published_before(client::DateTime value) {
      _have_published_before_ = true;
      published_before_ = value;
    }

    /**
     * Clears the '<code>channelId</code>' attribute so it is no longer set.
     */
    void clear_channel_id() {
      _have_channel_id_ = false;
      client::ClearCppValueHelper(&channel_id_);
    }
    /**
     * @deprecated
     * @see clear_channel_id
     */
    void clear_channelId() {
      clear_channel_id();
    }

    /**
     * Gets the optional '<code>channelId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_channel_id() const { return channel_id_; }

    /**
     * Gets a modifiable pointer to the optional <code>channelId</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_channelId() {
      _have_channel_id_ = true;
      return &channel_id_;
    }


    /**
     * Sets the '<code>channelId</code>' attribute.
     *
     * @param[in] value The channelId parameter specifies a unique YouTube
     * channel ID. The API will then return a list of that channel's activities.
     */
    void set_channel_id(const string& value) {
      _have_channel_id_ = true;
      channel_id_ = value;
    }



    /**
     * Clears the '<code>mine</code>' attribute so it is no longer set.
     */
    void clear_mine() {
      _have_mine_ = false;
      client::ClearCppValueHelper(&mine_);
    }


    /**
     * Gets the optional '<code>mine</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_mine() const { return mine_; }

    /**
     * Sets the '<code>mine</code>' attribute.
     *
     * @param[in] value Set this parameter's value to true to retrieve a feed of
     * the authenticated user's activities.
     */
    void set_mine(bool value) {
      _have_mine_ = true;
      mine_ = value;
    }

    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }
    /**
     * @deprecated
     * @see clear_max_results
     */
    void clear_maxResults() {
      clear_max_results();
    }

    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maxResults parameter specifies the maximum number of
     * items that should be returned in the result set.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }
    /**
     * @deprecated
     * @see clear_page_token
     */
    void clear_pageToken() {
      clear_page_token();
    }

    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value The pageToken parameter identifies a specific page in
     * the result set that should be returned. In an API response, the
     * nextPageToken and prevPageToken properties identify other pages that
     * could be retrieved.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>home</code>' attribute so it is no longer set.
     */
    void clear_home() {
      _have_home_ = false;
      client::ClearCppValueHelper(&home_);
    }


    /**
     * Gets the optional '<code>home</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_home() const { return home_; }

    /**
     * Sets the '<code>home</code>' attribute.
     *
     * @param[in] value Set this parameter's value to true to retrieve the
     * activity feed that displays on the YouTube home page for the currently
     * authenticated user.
     */
    void set_home(bool value) {
      _have_home_ = true;
      home_ = value;
    }

    /**
     * Clears the '<code>publishedAfter</code>' attribute so it is no longer
     * set.
     */
    void clear_published_after() {
      _have_published_after_ = false;
      client::ClearCppValueHelper(&published_after_);
    }
    /**
     * @deprecated
     * @see clear_published_after
     */
    void clear_publishedAfter() {
      clear_published_after();
    }

    /**
     * Gets the optional '<code>publishedAfter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    client::DateTime get_published_after() const { return published_after_; }

    /**
     * Sets the '<code>publishedAfter</code>' attribute.
     *
     * @param[in] value The publishedAfter parameter specifies the earliest date
     * and time that an activity could have occurred for that activity to be
     * included in the API response. If the parameter value specifies a day, but
     * not a time, then any activities that occurred that day will be included
     * in the result set. The value is specified in ISO 8601 (YYYY-MM-
     * DDThh:mm:ss.sZ) format.
     */
    void set_published_after(client::DateTime value) {
      _have_published_after_ = true;
      published_after_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ActivityListResponse* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string region_code_;
  client::DateTime published_before_;
  string channel_id_;
  bool mine_;
  uint32 max_results_;
  string page_token_;
  bool home_;
  client::DateTime published_after_;
  bool _have_region_code_ : 1;
  bool _have_published_before_ : 1;
  bool _have_channel_id_ : 1;
  bool _have_mine_ : 1;
  bool _have_max_results_ : 1;
  bool _have_page_token_ : 1;
  bool _have_home_ : 1;
  bool _have_published_after_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ActivitiesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            ActivitiesResource_ListMethod,
            ActivityListResponse>
        ActivitiesResource_ListMethodPager;



/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtube.upload
 */
class ChannelBannersResource_InsertMethod : public YouTubeServiceBaseRequest {
 public:

  /**
   * The standard constructor takes all the required method parameters.
   *
   * @deprecated in favor constructor that includes the media upload parameters.
   *
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] _content_ The data object to insert.
   */
  ChannelBannersResource_InsertMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_);

  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] _metadata_ The metadata object to insert. If this is NULL then
   * do not upload any metadata.
   * @param[in] _media_content_type_ The content type of the data in the
   * _media_content_reader_.
   * @param[in] _media_content_reader_ The media content to insert. If
   * this is NULL then do not upload any media and ignore _media_content_type_.
   */
  ChannelBannersResource_InsertMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const ChannelBannerResource* _metadata_,
        const StringPiece& _media_content_type_,
        client::DataReader* _media_content_reader_);

  /**
   * Standard destructor.
   */
  virtual ~ChannelBannersResource_InsertMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ChannelBannerResource* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

  /**
   * Invokes the server with the method.
   *
   * Response detail is available from the underlying http_request.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  virtual util::Status Execute();

  /**
   * Returns MediaUploader for uploading the content.
   */
  client::MediaUploader* media_uploader() {
    return _uploader_.get();
  }

  /**
   * Returns the specification for media upload using the simple protocol.
   */
  static const client::MediaUploadSpec
    SIMPLE_MEDIA_UPLOAD;
  /**
   * Returns the specification for media upload using the resumable protocol.
   */
  static const client::MediaUploadSpec
    RESUMABLE_MEDIA_UPLOAD;

 private:
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_ : 1;
  std::unique_ptr<client::MediaUploader> _uploader_;

  DISALLOW_COPY_AND_ASSIGN(ChannelBannersResource_InsertMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtubepartner
 */
class ChannelSectionsResource_DeleteMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] id The id parameter specifies the YouTube channelSection ID for
   * the resource that is being deleted. In a channelSection resource, the id
   * property specifies the YouTube channelSection ID.
   *
   */
  ChannelSectionsResource_DeleteMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~ChannelSectionsResource_DeleteMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


 private:
  string id_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ChannelSectionsResource_DeleteMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtubepartner
 */
class ChannelSectionsResource_InsertMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter serves two purposes in this operation.
   * It identifies the properties that the write operation will set as well as
   * the properties that the API response will include.
   *
   * The part names that you can include in the parameter value are snippet and
   * contentDetails.
   *
   * @param[in] _content_ The data object to insert.
   *
   */
  ChannelSectionsResource_InsertMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part,
        const ChannelSection& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~ChannelSectionsResource_InsertMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwnerChannel</code>' attribute so it
     * is no longer set.
     */
    void clear_on_behalf_of_content_owner_channel() {
      _have_on_behalf_of_content_owner_channel_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_channel_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner_channel
     */
    void clear_onBehalfOfContentOwnerChannel() {
      clear_on_behalf_of_content_owner_channel();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner_channel() const { return on_behalf_of_content_owner_channel_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwnerChannel() {
      _have_on_behalf_of_content_owner_channel_ = true;
      return &on_behalf_of_content_owner_channel_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @param[in] value This parameter can only be used in a properly authorized
     * request. Note: This parameter is intended exclusively for YouTube content
     * partners.
     *
     * The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel
     * ID of the channel to which a video is being added. This parameter is
     * required when a request specifies a value for the onBehalfOfContentOwner
     * parameter, and it can only be used in conjunction with that parameter. In
     * addition, the request must be authorized using a CMS account that is
     * linked to the content owner that the onBehalfOfContentOwner parameter
     * specifies. Finally, the channel that the onBehalfOfContentOwnerChannel
     * parameter value specifies must be linked to the content owner that the
     * onBehalfOfContentOwner parameter specifies.
     *
     * This parameter is intended for YouTube content partners that own and
     * manage many different YouTube channels. It allows content owners to
     * authenticate once and perform actions on behalf of the channel specified
     * in the parameter value, without having to provide authentication
     * credentials for each separate channel.
     */
    void set_on_behalf_of_content_owner_channel(const string& value) {
      _have_on_behalf_of_content_owner_channel_ = true;
      on_behalf_of_content_owner_channel_ = value;
    }



    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ChannelSection* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string on_behalf_of_content_owner_channel_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_channel_ : 1;
  bool _have_on_behalf_of_content_owner_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ChannelSectionsResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtube.readonly
 * https://www.googleapis.com/auth/youtubepartner
 */
class ChannelSectionsResource_ListMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter specifies a comma-separated list of one
   * or more channelSection resource properties that the API response will
   * include. The part names that you can include in the parameter value are id,
   * snippet, and contentDetails.
   *
   * If the parameter identifies a property that contains child properties, the
   * child properties will be included in the response. For example, in a
   * channelSection resource, the snippet property contains other properties,
   * such as a display title for the channelSection. If you set part=snippet,
   * the API response will also contain all of those nested properties.
   *
   */
  ChannelSectionsResource_ListMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part);

  /**
   * Standard destructor.
   */
  virtual ~ChannelSectionsResource_ListMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }



    /**
     * Clears the '<code>channelId</code>' attribute so it is no longer set.
     */
    void clear_channel_id() {
      _have_channel_id_ = false;
      client::ClearCppValueHelper(&channel_id_);
    }
    /**
     * @deprecated
     * @see clear_channel_id
     */
    void clear_channelId() {
      clear_channel_id();
    }

    /**
     * Gets the optional '<code>channelId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_channel_id() const { return channel_id_; }

    /**
     * Gets a modifiable pointer to the optional <code>channelId</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_channelId() {
      _have_channel_id_ = true;
      return &channel_id_;
    }


    /**
     * Sets the '<code>channelId</code>' attribute.
     *
     * @param[in] value The channelId parameter specifies a YouTube channel ID.
     * The API will only return that channel's channelSections.
     */
    void set_channel_id(const string& value) {
      _have_channel_id_ = true;
      channel_id_ = value;
    }



    /**
     * Clears the '<code>id</code>' attribute so it is no longer set.
     */
    void clear_id() {
      _have_id_ = false;
      client::ClearCppValueHelper(&id_);
    }


    /**
     * Gets the optional '<code>id</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_id() const { return id_; }

    /**
     * Gets a modifiable pointer to the optional <code>id</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_id() {
      _have_id_ = true;
      return &id_;
    }


    /**
     * Sets the '<code>id</code>' attribute.
     *
     * @param[in] value The id parameter specifies a comma-separated list of the
     * YouTube channelSection ID(s) for the resource(s) that are being
     * retrieved. In a channelSection resource, the id property specifies the
     * YouTube channelSection ID.
     */
    void set_id(const string& value) {
      _have_id_ = true;
      id_ = value;
    }



    /**
     * Clears the '<code>mine</code>' attribute so it is no longer set.
     */
    void clear_mine() {
      _have_mine_ = false;
      client::ClearCppValueHelper(&mine_);
    }


    /**
     * Gets the optional '<code>mine</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_mine() const { return mine_; }

    /**
     * Sets the '<code>mine</code>' attribute.
     *
     * @param[in] value Set this parameter's value to true to retrieve a feed of
     * the authenticated user's channelSections.
     */
    void set_mine(bool value) {
      _have_mine_ = true;
      mine_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ChannelSectionListResponse* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string on_behalf_of_content_owner_;
  string channel_id_;
  string id_;
  bool mine_;
  bool _have_on_behalf_of_content_owner_ : 1;
  bool _have_channel_id_ : 1;
  bool _have_id_ : 1;
  bool _have_mine_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ChannelSectionsResource_ListMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtubepartner
 */
class ChannelSectionsResource_UpdateMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter serves two purposes in this operation.
   * It identifies the properties that the write operation will set as well as
   * the properties that the API response will include.
   *
   * The part names that you can include in the parameter value are snippet and
   * contentDetails.
   *
   * @param[in] _content_ The data object to update.
   *
   */
  ChannelSectionsResource_UpdateMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part,
        const ChannelSection& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~ChannelSectionsResource_UpdateMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ChannelSection* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ChannelSectionsResource_UpdateMethod);
};



/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtube.readonly
 * https://www.googleapis.com/auth/youtubepartner
 * https://www.googleapis.com/auth/youtubepartner-channel-audit
 */
class ChannelsResource_ListMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter specifies a comma-separated list of one
   * or more channel resource properties that the API response will include. The
   * part names that you can include in the parameter value are id, snippet,
   * contentDetails, statistics, topicDetails, and invideoPromotion.
   *
   * If the parameter identifies a property that contains child properties, the
   * child properties will be included in the response. For example, in a
   * channel resource, the contentDetails property contains other properties,
   * such as the uploads properties. As such, if you set part=contentDetails,
   * the API response will also contain all of those nested properties.
   *
   */
  ChannelsResource_ListMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part);

  /**
   * Standard destructor.
   */
  virtual ~ChannelsResource_ListMethod();


    /**
     * Clears the '<code>managedByMe</code>' attribute so it is no longer set.
     */
    void clear_managed_by_me() {
      _have_managed_by_me_ = false;
      client::ClearCppValueHelper(&managed_by_me_);
    }
    /**
     * @deprecated
     * @see clear_managed_by_me
     */
    void clear_managedByMe() {
      clear_managed_by_me();
    }

    /**
     * Gets the optional '<code>managedByMe</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_managed_by_me() const { return managed_by_me_; }

    /**
     * Sets the '<code>managedByMe</code>' attribute.
     *
     * @param[in] value Set this parameter's value to true to instruct the API
     * to only return channels managed by the content owner that the
     * onBehalfOfContentOwner parameter specifies. The user must be
     * authenticated as a CMS account linked to the specified content owner and
     * onBehalfOfContentOwner must be provided.
     */
    void set_managed_by_me(bool value) {
      _have_managed_by_me_ = true;
      managed_by_me_ = value;
    }

    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value The onBehalfOfContentOwner parameter indicates that the
     * authenticated user is acting on behalf of the content owner specified in
     * the parameter value. This parameter is intended for YouTube content
     * partners that own and manage many different YouTube channels. It allows
     * content owners to authenticate once and get access to all their video and
     * channel data, without having to provide authentication credentials for
     * each individual channel. The actual CMS account that the user
     * authenticates with needs to be linked to the specified YouTube content
     * owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }



    /**
     * Clears the '<code>forUsername</code>' attribute so it is no longer set.
     */
    void clear_for_username() {
      _have_for_username_ = false;
      client::ClearCppValueHelper(&for_username_);
    }
    /**
     * @deprecated
     * @see clear_for_username
     */
    void clear_forUsername() {
      clear_for_username();
    }

    /**
     * Gets the optional '<code>forUsername</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_for_username() const { return for_username_; }

    /**
     * Gets a modifiable pointer to the optional <code>forUsername</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_forUsername() {
      _have_for_username_ = true;
      return &for_username_;
    }


    /**
     * Sets the '<code>forUsername</code>' attribute.
     *
     * @param[in] value The forUsername parameter specifies a YouTube username,
     * thereby requesting the channel associated with that username.
     */
    void set_for_username(const string& value) {
      _have_for_username_ = true;
      for_username_ = value;
    }



    /**
     * Clears the '<code>mine</code>' attribute so it is no longer set.
     */
    void clear_mine() {
      _have_mine_ = false;
      client::ClearCppValueHelper(&mine_);
    }


    /**
     * Gets the optional '<code>mine</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_mine() const { return mine_; }

    /**
     * Sets the '<code>mine</code>' attribute.
     *
     * @param[in] value Set this parameter's value to true to instruct the API
     * to only return channels owned by the authenticated user.
     */
    void set_mine(bool value) {
      _have_mine_ = true;
      mine_ = value;
    }

    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }
    /**
     * @deprecated
     * @see clear_max_results
     */
    void clear_maxResults() {
      clear_max_results();
    }

    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maxResults parameter specifies the maximum number of
     * items that should be returned in the result set.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>id</code>' attribute so it is no longer set.
     */
    void clear_id() {
      _have_id_ = false;
      client::ClearCppValueHelper(&id_);
    }


    /**
     * Gets the optional '<code>id</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_id() const { return id_; }

    /**
     * Gets a modifiable pointer to the optional <code>id</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_id() {
      _have_id_ = true;
      return &id_;
    }


    /**
     * Sets the '<code>id</code>' attribute.
     *
     * @param[in] value The id parameter specifies a comma-separated list of the
     * YouTube channel ID(s) for the resource(s) that are being retrieved. In a
     * channel resource, the id property specifies the channel's YouTube channel
     * ID.
     */
    void set_id(const string& value) {
      _have_id_ = true;
      id_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }
    /**
     * @deprecated
     * @see clear_page_token
     */
    void clear_pageToken() {
      clear_page_token();
    }

    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value The pageToken parameter identifies a specific page in
     * the result set that should be returned. In an API response, the
     * nextPageToken and prevPageToken properties identify other pages that
     * could be retrieved.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>mySubscribers</code>' attribute so it is no longer set.
     */
    void clear_my_subscribers() {
      _have_my_subscribers_ = false;
      client::ClearCppValueHelper(&my_subscribers_);
    }
    /**
     * @deprecated
     * @see clear_my_subscribers
     */
    void clear_mySubscribers() {
      clear_my_subscribers();
    }

    /**
     * Gets the optional '<code>mySubscribers</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_my_subscribers() const { return my_subscribers_; }

    /**
     * Sets the '<code>mySubscribers</code>' attribute.
     *
     * @param[in] value Set this parameter's value to true to retrieve a list of
     * channels that subscribed to the authenticated user's channel.
     */
    void set_my_subscribers(bool value) {
      _have_my_subscribers_ = true;
      my_subscribers_ = value;
    }

    /**
     * Clears the '<code>categoryId</code>' attribute so it is no longer set.
     */
    void clear_category_id() {
      _have_category_id_ = false;
      client::ClearCppValueHelper(&category_id_);
    }
    /**
     * @deprecated
     * @see clear_category_id
     */
    void clear_categoryId() {
      clear_category_id();
    }

    /**
     * Gets the optional '<code>categoryId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_category_id() const { return category_id_; }

    /**
     * Gets a modifiable pointer to the optional <code>categoryId</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_categoryId() {
      _have_category_id_ = true;
      return &category_id_;
    }


    /**
     * Sets the '<code>categoryId</code>' attribute.
     *
     * @param[in] value The categoryId parameter specifies a YouTube guide
     * category, thereby requesting YouTube channels associated with that
     * category.
     */
    void set_category_id(const string& value) {
      _have_category_id_ = true;
      category_id_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ChannelListResponse* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  bool managed_by_me_;
  string on_behalf_of_content_owner_;
  string for_username_;
  bool mine_;
  uint32 max_results_;
  string id_;
  string page_token_;
  bool my_subscribers_;
  string category_id_;
  bool _have_managed_by_me_ : 1;
  bool _have_on_behalf_of_content_owner_ : 1;
  bool _have_for_username_ : 1;
  bool _have_mine_ : 1;
  bool _have_max_results_ : 1;
  bool _have_id_ : 1;
  bool _have_page_token_ : 1;
  bool _have_my_subscribers_ : 1;
  bool _have_category_id_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ChannelsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            ChannelsResource_ListMethod,
            ChannelListResponse>
        ChannelsResource_ListMethodPager;

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtubepartner
 */
class ChannelsResource_UpdateMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter serves two purposes in this operation.
   * It identifies the properties that the write operation will set as well as
   * the properties that the API response will include.
   *
   * The part names that you can include in the parameter value are id and
   * invideoPromotion.
   *
   * Note that this method will override the existing values for all of the
   * mutable properties that are contained in any parts that the parameter value
   * specifies.
   *
   * @param[in] _content_ The data object to update.
   *
   */
  ChannelsResource_UpdateMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part,
        const Channel& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~ChannelsResource_UpdateMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value The onBehalfOfContentOwner parameter indicates that the
     * authenticated user is acting on behalf of the content owner specified in
     * the parameter value. This parameter is intended for YouTube content
     * partners that own and manage many different YouTube channels. It allows
     * content owners to authenticate once and get access to all their video and
     * channel data, without having to provide authentication credentials for
     * each individual channel. The actual CMS account that the user
     * authenticates with needs to be linked to the specified YouTube content
     * owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Channel* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ChannelsResource_UpdateMethod);
};



/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtube.readonly
 * https://www.googleapis.com/auth/youtubepartner
 */
class GuideCategoriesResource_ListMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter specifies a comma-separated list of one
   * or more guideCategory resource properties that the API response will
   * include. The part names that you can include in the parameter value are id
   * and snippet.
   *
   * If the parameter identifies a property that contains child properties, the
   * child properties will be included in the response. For example, in a
   * guideCategory resource, the snippet property contains other properties,
   * such as the category's title. If you set part=snippet, the API response
   * will also contain all of those nested properties.
   *
   */
  GuideCategoriesResource_ListMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part);

  /**
   * Standard destructor.
   */
  virtual ~GuideCategoriesResource_ListMethod();


    /**
     * Clears the '<code>regionCode</code>' attribute so it is no longer set.
     */
    void clear_region_code() {
      _have_region_code_ = false;
      client::ClearCppValueHelper(&region_code_);
    }
    /**
     * @deprecated
     * @see clear_region_code
     */
    void clear_regionCode() {
      clear_region_code();
    }

    /**
     * Gets the optional '<code>regionCode</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_region_code() const { return region_code_; }

    /**
     * Gets a modifiable pointer to the optional <code>regionCode</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_regionCode() {
      _have_region_code_ = true;
      return &region_code_;
    }


    /**
     * Sets the '<code>regionCode</code>' attribute.
     *
     * @param[in] value The regionCode parameter instructs the API to return the
     * list of guide categories available in the specified country. The
     * parameter value is an ISO 3166-1 alpha-2 country code.
     */
    void set_region_code(const string& value) {
      _have_region_code_ = true;
      region_code_ = value;
    }



    /**
     * Clears the '<code>id</code>' attribute so it is no longer set.
     */
    void clear_id() {
      _have_id_ = false;
      client::ClearCppValueHelper(&id_);
    }


    /**
     * Gets the optional '<code>id</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_id() const { return id_; }

    /**
     * Gets a modifiable pointer to the optional <code>id</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_id() {
      _have_id_ = true;
      return &id_;
    }


    /**
     * Sets the '<code>id</code>' attribute.
     *
     * @param[in] value The id parameter specifies a comma-separated list of the
     * YouTube channel category ID(s) for the resource(s) that are being
     * retrieved. In a guideCategory resource, the id property specifies the
     * YouTube channel category ID.
     */
    void set_id(const string& value) {
      _have_id_ = true;
      id_ = value;
    }



    /**
     * Clears the '<code>hl</code>' attribute so it is no longer set.
     */
    void clear_hl() {
      _have_hl_ = false;
      client::ClearCppValueHelper(&hl_);
    }


    /**
     * Gets the optional '<code>hl</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_hl() const { return hl_; }

    /**
     * Gets a modifiable pointer to the optional <code>hl</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_hl() {
      _have_hl_ = true;
      return &hl_;
    }


    /**
     * Sets the '<code>hl</code>' attribute.
     *
     * @param[in] value The hl parameter specifies the language that will be
     * used for text values in the API response.
     */
    void set_hl(const string& value) {
      _have_hl_ = true;
      hl_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      GuideCategoryListResponse* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string region_code_;
  string id_;
  string hl_;
  bool _have_region_code_ : 1;
  bool _have_id_ : 1;
  bool _have_hl_ : 1;
  DISALLOW_COPY_AND_ASSIGN(GuideCategoriesResource_ListMethod);
};



/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtube.readonly
 * https://www.googleapis.com/auth/youtubepartner
 */
class I18nLanguagesResource_ListMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter specifies a comma-separated list of one
   * or more i18nLanguage resource properties that the API response will
   * include. The part names that you can include in the parameter value are id
   * and snippet.
   *
   */
  I18nLanguagesResource_ListMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part);

  /**
   * Standard destructor.
   */
  virtual ~I18nLanguagesResource_ListMethod();


    /**
     * Clears the '<code>hl</code>' attribute so it is no longer set.
     */
    void clear_hl() {
      _have_hl_ = false;
      client::ClearCppValueHelper(&hl_);
    }


    /**
     * Gets the optional '<code>hl</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_hl() const { return hl_; }

    /**
     * Gets a modifiable pointer to the optional <code>hl</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_hl() {
      _have_hl_ = true;
      return &hl_;
    }


    /**
     * Sets the '<code>hl</code>' attribute.
     *
     * @param[in] value The hl parameter specifies the language that should be
     * used for text values in the API response.
     */
    void set_hl(const string& value) {
      _have_hl_ = true;
      hl_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      I18nLanguageListResponse* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string hl_;
  bool _have_hl_ : 1;
  DISALLOW_COPY_AND_ASSIGN(I18nLanguagesResource_ListMethod);
};



/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtube.readonly
 * https://www.googleapis.com/auth/youtubepartner
 */
class I18nRegionsResource_ListMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter specifies a comma-separated list of one
   * or more i18nRegion resource properties that the API response will include.
   * The part names that you can include in the parameter value are id and
   * snippet.
   *
   */
  I18nRegionsResource_ListMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part);

  /**
   * Standard destructor.
   */
  virtual ~I18nRegionsResource_ListMethod();


    /**
     * Clears the '<code>hl</code>' attribute so it is no longer set.
     */
    void clear_hl() {
      _have_hl_ = false;
      client::ClearCppValueHelper(&hl_);
    }


    /**
     * Gets the optional '<code>hl</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_hl() const { return hl_; }

    /**
     * Gets a modifiable pointer to the optional <code>hl</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_hl() {
      _have_hl_ = true;
      return &hl_;
    }


    /**
     * Sets the '<code>hl</code>' attribute.
     *
     * @param[in] value The hl parameter specifies the language that should be
     * used for text values in the API response.
     */
    void set_hl(const string& value) {
      _have_hl_ = true;
      hl_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      I18nRegionListResponse* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string hl_;
  bool _have_hl_ : 1;
  DISALLOW_COPY_AND_ASSIGN(I18nRegionsResource_ListMethod);
};



/**
 * Implements the bind method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 */
class LiveBroadcastsResource_BindMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] id The id parameter specifies the unique ID of the broadcast
   * that is being bound to a video stream.
   *
   * @param[in] part The part parameter specifies a comma-separated list of one
   * or more liveBroadcast resource properties that the API response will
   * include. The part names that you can include in the parameter value are id,
   * snippet, contentDetails, and status.
   *
   */
  LiveBroadcastsResource_BindMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& id,
        const StringPiece& part);

  /**
   * Standard destructor.
   */
  virtual ~LiveBroadcastsResource_BindMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwnerChannel</code>' attribute so it
     * is no longer set.
     */
    void clear_on_behalf_of_content_owner_channel() {
      _have_on_behalf_of_content_owner_channel_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_channel_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner_channel
     */
    void clear_onBehalfOfContentOwnerChannel() {
      clear_on_behalf_of_content_owner_channel();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner_channel() const { return on_behalf_of_content_owner_channel_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwnerChannel() {
      _have_on_behalf_of_content_owner_channel_ = true;
      return &on_behalf_of_content_owner_channel_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @param[in] value This parameter can only be used in a properly authorized
     * request. Note: This parameter is intended exclusively for YouTube content
     * partners.
     *
     * The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel
     * ID of the channel to which a video is being added. This parameter is
     * required when a request specifies a value for the onBehalfOfContentOwner
     * parameter, and it can only be used in conjunction with that parameter. In
     * addition, the request must be authorized using a CMS account that is
     * linked to the content owner that the onBehalfOfContentOwner parameter
     * specifies. Finally, the channel that the onBehalfOfContentOwnerChannel
     * parameter value specifies must be linked to the content owner that the
     * onBehalfOfContentOwner parameter specifies.
     *
     * This parameter is intended for YouTube content partners that own and
     * manage many different YouTube channels. It allows content owners to
     * authenticate once and perform actions on behalf of the channel specified
     * in the parameter value, without having to provide authentication
     * credentials for each separate channel.
     */
    void set_on_behalf_of_content_owner_channel(const string& value) {
      _have_on_behalf_of_content_owner_channel_ = true;
      on_behalf_of_content_owner_channel_ = value;
    }



    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }



    /**
     * Clears the '<code>streamId</code>' attribute so it is no longer set.
     */
    void clear_stream_id() {
      _have_stream_id_ = false;
      client::ClearCppValueHelper(&stream_id_);
    }
    /**
     * @deprecated
     * @see clear_stream_id
     */
    void clear_streamId() {
      clear_stream_id();
    }

    /**
     * Gets the optional '<code>streamId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_stream_id() const { return stream_id_; }

    /**
     * Gets a modifiable pointer to the optional <code>streamId</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_streamId() {
      _have_stream_id_ = true;
      return &stream_id_;
    }


    /**
     * Sets the '<code>streamId</code>' attribute.
     *
     * @param[in] value The streamId parameter specifies the unique ID of the
     * video stream that is being bound to a broadcast. If this parameter is
     * omitted, the API will remove any existing binding between the broadcast
     * and a video stream.
     */
    void set_stream_id(const string& value) {
      _have_stream_id_ = true;
      stream_id_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      LiveBroadcast* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string id_;
  string part_;
  string on_behalf_of_content_owner_channel_;
  string on_behalf_of_content_owner_;
  string stream_id_;
  bool _have_on_behalf_of_content_owner_channel_ : 1;
  bool _have_on_behalf_of_content_owner_ : 1;
  bool _have_stream_id_ : 1;
  DISALLOW_COPY_AND_ASSIGN(LiveBroadcastsResource_BindMethod);
};

/**
 * Implements the control method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 */
class LiveBroadcastsResource_ControlMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] id The id parameter specifies the YouTube live broadcast ID that
   * uniquely identifies the broadcast in which the slate is being updated.
   *
   * @param[in] part The part parameter specifies a comma-separated list of one
   * or more liveBroadcast resource properties that the API response will
   * include. The part names that you can include in the parameter value are id,
   * snippet, contentDetails, and status.
   *
   */
  LiveBroadcastsResource_ControlMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& id,
        const StringPiece& part);

  /**
   * Standard destructor.
   */
  virtual ~LiveBroadcastsResource_ControlMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }



    /**
     * Clears the '<code>displaySlate</code>' attribute so it is no longer set.
     */
    void clear_display_slate() {
      _have_display_slate_ = false;
      client::ClearCppValueHelper(&display_slate_);
    }
    /**
     * @deprecated
     * @see clear_display_slate
     */
    void clear_displaySlate() {
      clear_display_slate();
    }

    /**
     * Gets the optional '<code>displaySlate</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_display_slate() const { return display_slate_; }

    /**
     * Sets the '<code>displaySlate</code>' attribute.
     *
     * @param[in] value The displaySlate parameter specifies whether the slate
     * is being enabled or disabled.
     */
    void set_display_slate(bool value) {
      _have_display_slate_ = true;
      display_slate_ = value;
    }

    /**
     * Clears the '<code>onBehalfOfContentOwnerChannel</code>' attribute so it
     * is no longer set.
     */
    void clear_on_behalf_of_content_owner_channel() {
      _have_on_behalf_of_content_owner_channel_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_channel_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner_channel
     */
    void clear_onBehalfOfContentOwnerChannel() {
      clear_on_behalf_of_content_owner_channel();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner_channel() const { return on_behalf_of_content_owner_channel_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwnerChannel() {
      _have_on_behalf_of_content_owner_channel_ = true;
      return &on_behalf_of_content_owner_channel_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @param[in] value This parameter can only be used in a properly authorized
     * request. Note: This parameter is intended exclusively for YouTube content
     * partners.
     *
     * The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel
     * ID of the channel to which a video is being added. This parameter is
     * required when a request specifies a value for the onBehalfOfContentOwner
     * parameter, and it can only be used in conjunction with that parameter. In
     * addition, the request must be authorized using a CMS account that is
     * linked to the content owner that the onBehalfOfContentOwner parameter
     * specifies. Finally, the channel that the onBehalfOfContentOwnerChannel
     * parameter value specifies must be linked to the content owner that the
     * onBehalfOfContentOwner parameter specifies.
     *
     * This parameter is intended for YouTube content partners that own and
     * manage many different YouTube channels. It allows content owners to
     * authenticate once and perform actions on behalf of the channel specified
     * in the parameter value, without having to provide authentication
     * credentials for each separate channel.
     */
    void set_on_behalf_of_content_owner_channel(const string& value) {
      _have_on_behalf_of_content_owner_channel_ = true;
      on_behalf_of_content_owner_channel_ = value;
    }



    /**
     * Clears the '<code>offsetTimeMs</code>' attribute so it is no longer set.
     */
    void clear_offset_time_ms() {
      _have_offset_time_ms_ = false;
      client::ClearCppValueHelper(&offset_time_ms_);
    }
    /**
     * @deprecated
     * @see clear_offset_time_ms
     */
    void clear_offsetTimeMs() {
      clear_offset_time_ms();
    }

    /**
     * Gets the optional '<code>offsetTimeMs</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint64 get_offset_time_ms() const { return offset_time_ms_; }

    /**
     * Sets the '<code>offsetTimeMs</code>' attribute.
     *
     * @param[in] value The offsetTimeMs parameter specifies a positive time
     * offset when the specified slate change will occur. The value is measured
     * in milliseconds from the beginning of the broadcast's monitor stream,
     * which is the time that the testing phase for the broadcast began. Even
     * though it is specified in milliseconds, the value is actually an
     * approximation, and YouTube completes the requested action as closely as
     * possible to that time.
     *
     * If you do not specify a value for this parameter, then YouTube performs
     * the action as soon as possible. See the Getting started guide for more
     * details.
     *
     * Important: You should only specify a value for this parameter if your
     * broadcast stream is delayed.
     */
    void set_offset_time_ms(uint64 value) {
      _have_offset_time_ms_ = true;
      offset_time_ms_ = value;
    }

    /**
     * Clears the '<code>walltime</code>' attribute so it is no longer set.
     */
    void clear_walltime() {
      _have_walltime_ = false;
      client::ClearCppValueHelper(&walltime_);
    }


    /**
     * Gets the optional '<code>walltime</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    client::DateTime get_walltime() const { return walltime_; }

    /**
     * Sets the '<code>walltime</code>' attribute.
     *
     * @param[in] value The walltime parameter specifies the wall clock time at
     * which the specified slate change will occur. The value is specified in
     * ISO 8601 (YYYY-MM-DDThh:mm:ss.sssZ) format.
     */
    void set_walltime(client::DateTime value) {
      _have_walltime_ = true;
      walltime_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      LiveBroadcast* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string id_;
  string part_;
  string on_behalf_of_content_owner_;
  bool display_slate_;
  string on_behalf_of_content_owner_channel_;
  uint64 offset_time_ms_;
  client::DateTime walltime_;
  bool _have_on_behalf_of_content_owner_ : 1;
  bool _have_display_slate_ : 1;
  bool _have_on_behalf_of_content_owner_channel_ : 1;
  bool _have_offset_time_ms_ : 1;
  bool _have_walltime_ : 1;
  DISALLOW_COPY_AND_ASSIGN(LiveBroadcastsResource_ControlMethod);
};

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 */
class LiveBroadcastsResource_DeleteMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] id The id parameter specifies the YouTube live broadcast ID for
   * the resource that is being deleted.
   *
   */
  LiveBroadcastsResource_DeleteMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~LiveBroadcastsResource_DeleteMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwnerChannel</code>' attribute so it
     * is no longer set.
     */
    void clear_on_behalf_of_content_owner_channel() {
      _have_on_behalf_of_content_owner_channel_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_channel_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner_channel
     */
    void clear_onBehalfOfContentOwnerChannel() {
      clear_on_behalf_of_content_owner_channel();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner_channel() const { return on_behalf_of_content_owner_channel_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwnerChannel() {
      _have_on_behalf_of_content_owner_channel_ = true;
      return &on_behalf_of_content_owner_channel_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @param[in] value This parameter can only be used in a properly authorized
     * request. Note: This parameter is intended exclusively for YouTube content
     * partners.
     *
     * The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel
     * ID of the channel to which a video is being added. This parameter is
     * required when a request specifies a value for the onBehalfOfContentOwner
     * parameter, and it can only be used in conjunction with that parameter. In
     * addition, the request must be authorized using a CMS account that is
     * linked to the content owner that the onBehalfOfContentOwner parameter
     * specifies. Finally, the channel that the onBehalfOfContentOwnerChannel
     * parameter value specifies must be linked to the content owner that the
     * onBehalfOfContentOwner parameter specifies.
     *
     * This parameter is intended for YouTube content partners that own and
     * manage many different YouTube channels. It allows content owners to
     * authenticate once and perform actions on behalf of the channel specified
     * in the parameter value, without having to provide authentication
     * credentials for each separate channel.
     */
    void set_on_behalf_of_content_owner_channel(const string& value) {
      _have_on_behalf_of_content_owner_channel_ = true;
      on_behalf_of_content_owner_channel_ = value;
    }



    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


 private:
  string id_;
  string on_behalf_of_content_owner_channel_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_channel_ : 1;
  bool _have_on_behalf_of_content_owner_ : 1;
  DISALLOW_COPY_AND_ASSIGN(LiveBroadcastsResource_DeleteMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 */
class LiveBroadcastsResource_InsertMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter serves two purposes in this operation.
   * It identifies the properties that the write operation will set as well as
   * the properties that the API response will include.
   *
   * The part properties that you can include in the parameter value are id,
   * snippet, contentDetails, and status.
   *
   * @param[in] _content_ The data object to insert.
   *
   */
  LiveBroadcastsResource_InsertMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part,
        const LiveBroadcast& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~LiveBroadcastsResource_InsertMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwnerChannel</code>' attribute so it
     * is no longer set.
     */
    void clear_on_behalf_of_content_owner_channel() {
      _have_on_behalf_of_content_owner_channel_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_channel_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner_channel
     */
    void clear_onBehalfOfContentOwnerChannel() {
      clear_on_behalf_of_content_owner_channel();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner_channel() const { return on_behalf_of_content_owner_channel_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwnerChannel() {
      _have_on_behalf_of_content_owner_channel_ = true;
      return &on_behalf_of_content_owner_channel_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @param[in] value This parameter can only be used in a properly authorized
     * request. Note: This parameter is intended exclusively for YouTube content
     * partners.
     *
     * The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel
     * ID of the channel to which a video is being added. This parameter is
     * required when a request specifies a value for the onBehalfOfContentOwner
     * parameter, and it can only be used in conjunction with that parameter. In
     * addition, the request must be authorized using a CMS account that is
     * linked to the content owner that the onBehalfOfContentOwner parameter
     * specifies. Finally, the channel that the onBehalfOfContentOwnerChannel
     * parameter value specifies must be linked to the content owner that the
     * onBehalfOfContentOwner parameter specifies.
     *
     * This parameter is intended for YouTube content partners that own and
     * manage many different YouTube channels. It allows content owners to
     * authenticate once and perform actions on behalf of the channel specified
     * in the parameter value, without having to provide authentication
     * credentials for each separate channel.
     */
    void set_on_behalf_of_content_owner_channel(const string& value) {
      _have_on_behalf_of_content_owner_channel_ = true;
      on_behalf_of_content_owner_channel_ = value;
    }



    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      LiveBroadcast* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string on_behalf_of_content_owner_channel_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_channel_ : 1;
  bool _have_on_behalf_of_content_owner_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(LiveBroadcastsResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtube.readonly
 */
class LiveBroadcastsResource_ListMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter specifies a comma-separated list of one
   * or more liveBroadcast resource properties that the API response will
   * include. The part names that you can include in the parameter value are id,
   * snippet, contentDetails, and status.
   *
   */
  LiveBroadcastsResource_ListMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part);

  /**
   * Standard destructor.
   */
  virtual ~LiveBroadcastsResource_ListMethod();


    /**
     * Clears the '<code>broadcastStatus</code>' attribute so it is no longer
     * set.
     */
    void clear_broadcast_status() {
      _have_broadcast_status_ = false;
      client::ClearCppValueHelper(&broadcast_status_);
    }
    /**
     * @deprecated
     * @see clear_broadcast_status
     */
    void clear_broadcastStatus() {
      clear_broadcast_status();
    }

    /**
     * Gets the optional '<code>broadcastStatus</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_broadcast_status() const { return broadcast_status_; }

    /**
     * Gets a modifiable pointer to the optional <code>broadcastStatus</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_broadcastStatus() {
      _have_broadcast_status_ = true;
      return &broadcast_status_;
    }


    /**
     * Sets the '<code>broadcastStatus</code>' attribute.
     *
     * @param[in] value The broadcastStatus parameter filters the API response
     * to only include broadcasts with the specified status.
     */
    void set_broadcast_status(const string& value) {
      _have_broadcast_status_ = true;
      broadcast_status_ = value;
    }



    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }



    /**
     * Clears the '<code>onBehalfOfContentOwnerChannel</code>' attribute so it
     * is no longer set.
     */
    void clear_on_behalf_of_content_owner_channel() {
      _have_on_behalf_of_content_owner_channel_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_channel_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner_channel
     */
    void clear_onBehalfOfContentOwnerChannel() {
      clear_on_behalf_of_content_owner_channel();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner_channel() const { return on_behalf_of_content_owner_channel_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwnerChannel() {
      _have_on_behalf_of_content_owner_channel_ = true;
      return &on_behalf_of_content_owner_channel_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @param[in] value This parameter can only be used in a properly authorized
     * request. Note: This parameter is intended exclusively for YouTube content
     * partners.
     *
     * The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel
     * ID of the channel to which a video is being added. This parameter is
     * required when a request specifies a value for the onBehalfOfContentOwner
     * parameter, and it can only be used in conjunction with that parameter. In
     * addition, the request must be authorized using a CMS account that is
     * linked to the content owner that the onBehalfOfContentOwner parameter
     * specifies. Finally, the channel that the onBehalfOfContentOwnerChannel
     * parameter value specifies must be linked to the content owner that the
     * onBehalfOfContentOwner parameter specifies.
     *
     * This parameter is intended for YouTube content partners that own and
     * manage many different YouTube channels. It allows content owners to
     * authenticate once and perform actions on behalf of the channel specified
     * in the parameter value, without having to provide authentication
     * credentials for each separate channel.
     */
    void set_on_behalf_of_content_owner_channel(const string& value) {
      _have_on_behalf_of_content_owner_channel_ = true;
      on_behalf_of_content_owner_channel_ = value;
    }



    /**
     * Clears the '<code>mine</code>' attribute so it is no longer set.
     */
    void clear_mine() {
      _have_mine_ = false;
      client::ClearCppValueHelper(&mine_);
    }


    /**
     * Gets the optional '<code>mine</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_mine() const { return mine_; }

    /**
     * Sets the '<code>mine</code>' attribute.
     *
     * @param[in] value The mine parameter can be used to instruct the API to
     * only return broadcasts owned by the authenticated user. Set the parameter
     * value to true to only retrieve your own broadcasts.
     */
    void set_mine(bool value) {
      _have_mine_ = true;
      mine_ = value;
    }

    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }
    /**
     * @deprecated
     * @see clear_max_results
     */
    void clear_maxResults() {
      clear_max_results();
    }

    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maxResults parameter specifies the maximum number of
     * items that should be returned in the result set.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }
    /**
     * @deprecated
     * @see clear_page_token
     */
    void clear_pageToken() {
      clear_page_token();
    }

    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value The pageToken parameter identifies a specific page in
     * the result set that should be returned. In an API response, the
     * nextPageToken and prevPageToken properties identify other pages that
     * could be retrieved.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>id</code>' attribute so it is no longer set.
     */
    void clear_id() {
      _have_id_ = false;
      client::ClearCppValueHelper(&id_);
    }


    /**
     * Gets the optional '<code>id</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_id() const { return id_; }

    /**
     * Gets a modifiable pointer to the optional <code>id</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_id() {
      _have_id_ = true;
      return &id_;
    }


    /**
     * Sets the '<code>id</code>' attribute.
     *
     * @param[in] value The id parameter specifies a comma-separated list of
     * YouTube broadcast IDs that identify the broadcasts being retrieved. In a
     * liveBroadcast resource, the id property specifies the broadcast's ID.
     */
    void set_id(const string& value) {
      _have_id_ = true;
      id_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      LiveBroadcastListResponse* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string broadcast_status_;
  string on_behalf_of_content_owner_;
  string on_behalf_of_content_owner_channel_;
  bool mine_;
  uint32 max_results_;
  string page_token_;
  string id_;
  bool _have_broadcast_status_ : 1;
  bool _have_on_behalf_of_content_owner_ : 1;
  bool _have_on_behalf_of_content_owner_channel_ : 1;
  bool _have_mine_ : 1;
  bool _have_max_results_ : 1;
  bool _have_page_token_ : 1;
  bool _have_id_ : 1;
  DISALLOW_COPY_AND_ASSIGN(LiveBroadcastsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            LiveBroadcastsResource_ListMethod,
            LiveBroadcastListResponse>
        LiveBroadcastsResource_ListMethodPager;

/**
 * Implements the transition method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 */
class LiveBroadcastsResource_TransitionMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] broadcast_status The broadcastStatus parameter identifies the
   * state to which the broadcast is changing. Note that to transition a
   * broadcast to either the testing or live state, the status.streamStatus must
   * be active for the stream that the broadcast is bound to.
   *
   * @param[in] id The id parameter specifies the unique ID of the broadcast
   * that is transitioning to another status.
   *
   * @param[in] part The part parameter specifies a comma-separated list of one
   * or more liveBroadcast resource properties that the API response will
   * include. The part names that you can include in the parameter value are id,
   * snippet, contentDetails, and status.
   *
   */
  LiveBroadcastsResource_TransitionMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& broadcast_status,
        const StringPiece& id,
        const StringPiece& part);

  /**
   * Standard destructor.
   */
  virtual ~LiveBroadcastsResource_TransitionMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwnerChannel</code>' attribute so it
     * is no longer set.
     */
    void clear_on_behalf_of_content_owner_channel() {
      _have_on_behalf_of_content_owner_channel_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_channel_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner_channel
     */
    void clear_onBehalfOfContentOwnerChannel() {
      clear_on_behalf_of_content_owner_channel();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner_channel() const { return on_behalf_of_content_owner_channel_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwnerChannel() {
      _have_on_behalf_of_content_owner_channel_ = true;
      return &on_behalf_of_content_owner_channel_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @param[in] value This parameter can only be used in a properly authorized
     * request. Note: This parameter is intended exclusively for YouTube content
     * partners.
     *
     * The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel
     * ID of the channel to which a video is being added. This parameter is
     * required when a request specifies a value for the onBehalfOfContentOwner
     * parameter, and it can only be used in conjunction with that parameter. In
     * addition, the request must be authorized using a CMS account that is
     * linked to the content owner that the onBehalfOfContentOwner parameter
     * specifies. Finally, the channel that the onBehalfOfContentOwnerChannel
     * parameter value specifies must be linked to the content owner that the
     * onBehalfOfContentOwner parameter specifies.
     *
     * This parameter is intended for YouTube content partners that own and
     * manage many different YouTube channels. It allows content owners to
     * authenticate once and perform actions on behalf of the channel specified
     * in the parameter value, without having to provide authentication
     * credentials for each separate channel.
     */
    void set_on_behalf_of_content_owner_channel(const string& value) {
      _have_on_behalf_of_content_owner_channel_ = true;
      on_behalf_of_content_owner_channel_ = value;
    }



    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      LiveBroadcast* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string broadcast_status_;
  string id_;
  string part_;
  string on_behalf_of_content_owner_channel_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_channel_ : 1;
  bool _have_on_behalf_of_content_owner_ : 1;
  DISALLOW_COPY_AND_ASSIGN(LiveBroadcastsResource_TransitionMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 */
class LiveBroadcastsResource_UpdateMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter serves two purposes in this operation.
   * It identifies the properties that the write operation will set as well as
   * the properties that the API response will include.
   *
   * The part properties that you can include in the parameter value are id,
   * snippet, contentDetails, and status.
   *
   * Note that this method will override the existing values for all of the
   * mutable properties that are contained in any parts that the parameter value
   * specifies. For example, a broadcast's privacy status is defined in the
   * status part. As such, if your request is updating a private or unlisted
   * broadcast, and the request's part parameter value includes the status part,
   * the broadcast's privacy setting will be updated to whatever value the
   * request body specifies. If the request body does not specify a value, the
   * existing privacy setting will be removed and the broadcast will revert to
   * the default privacy setting.
   *
   * @param[in] _content_ The data object to update.
   *
   */
  LiveBroadcastsResource_UpdateMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part,
        const LiveBroadcast& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~LiveBroadcastsResource_UpdateMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwnerChannel</code>' attribute so it
     * is no longer set.
     */
    void clear_on_behalf_of_content_owner_channel() {
      _have_on_behalf_of_content_owner_channel_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_channel_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner_channel
     */
    void clear_onBehalfOfContentOwnerChannel() {
      clear_on_behalf_of_content_owner_channel();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner_channel() const { return on_behalf_of_content_owner_channel_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwnerChannel() {
      _have_on_behalf_of_content_owner_channel_ = true;
      return &on_behalf_of_content_owner_channel_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @param[in] value This parameter can only be used in a properly authorized
     * request. Note: This parameter is intended exclusively for YouTube content
     * partners.
     *
     * The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel
     * ID of the channel to which a video is being added. This parameter is
     * required when a request specifies a value for the onBehalfOfContentOwner
     * parameter, and it can only be used in conjunction with that parameter. In
     * addition, the request must be authorized using a CMS account that is
     * linked to the content owner that the onBehalfOfContentOwner parameter
     * specifies. Finally, the channel that the onBehalfOfContentOwnerChannel
     * parameter value specifies must be linked to the content owner that the
     * onBehalfOfContentOwner parameter specifies.
     *
     * This parameter is intended for YouTube content partners that own and
     * manage many different YouTube channels. It allows content owners to
     * authenticate once and perform actions on behalf of the channel specified
     * in the parameter value, without having to provide authentication
     * credentials for each separate channel.
     */
    void set_on_behalf_of_content_owner_channel(const string& value) {
      _have_on_behalf_of_content_owner_channel_ = true;
      on_behalf_of_content_owner_channel_ = value;
    }



    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      LiveBroadcast* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string on_behalf_of_content_owner_channel_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_channel_ : 1;
  bool _have_on_behalf_of_content_owner_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(LiveBroadcastsResource_UpdateMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 */
class LiveStreamsResource_DeleteMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] id The id parameter specifies the YouTube live stream ID for the
   * resource that is being deleted.
   *
   */
  LiveStreamsResource_DeleteMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~LiveStreamsResource_DeleteMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwnerChannel</code>' attribute so it
     * is no longer set.
     */
    void clear_on_behalf_of_content_owner_channel() {
      _have_on_behalf_of_content_owner_channel_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_channel_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner_channel
     */
    void clear_onBehalfOfContentOwnerChannel() {
      clear_on_behalf_of_content_owner_channel();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner_channel() const { return on_behalf_of_content_owner_channel_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwnerChannel() {
      _have_on_behalf_of_content_owner_channel_ = true;
      return &on_behalf_of_content_owner_channel_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @param[in] value This parameter can only be used in a properly authorized
     * request. Note: This parameter is intended exclusively for YouTube content
     * partners.
     *
     * The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel
     * ID of the channel to which a video is being added. This parameter is
     * required when a request specifies a value for the onBehalfOfContentOwner
     * parameter, and it can only be used in conjunction with that parameter. In
     * addition, the request must be authorized using a CMS account that is
     * linked to the content owner that the onBehalfOfContentOwner parameter
     * specifies. Finally, the channel that the onBehalfOfContentOwnerChannel
     * parameter value specifies must be linked to the content owner that the
     * onBehalfOfContentOwner parameter specifies.
     *
     * This parameter is intended for YouTube content partners that own and
     * manage many different YouTube channels. It allows content owners to
     * authenticate once and perform actions on behalf of the channel specified
     * in the parameter value, without having to provide authentication
     * credentials for each separate channel.
     */
    void set_on_behalf_of_content_owner_channel(const string& value) {
      _have_on_behalf_of_content_owner_channel_ = true;
      on_behalf_of_content_owner_channel_ = value;
    }



    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


 private:
  string id_;
  string on_behalf_of_content_owner_channel_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_channel_ : 1;
  bool _have_on_behalf_of_content_owner_ : 1;
  DISALLOW_COPY_AND_ASSIGN(LiveStreamsResource_DeleteMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 */
class LiveStreamsResource_InsertMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter serves two purposes in this operation.
   * It identifies the properties that the write operation will set as well as
   * the properties that the API response will include.
   *
   * The part properties that you can include in the parameter value are id,
   * snippet, cdn, and status.
   *
   * @param[in] _content_ The data object to insert.
   *
   */
  LiveStreamsResource_InsertMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part,
        const LiveStream& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~LiveStreamsResource_InsertMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwnerChannel</code>' attribute so it
     * is no longer set.
     */
    void clear_on_behalf_of_content_owner_channel() {
      _have_on_behalf_of_content_owner_channel_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_channel_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner_channel
     */
    void clear_onBehalfOfContentOwnerChannel() {
      clear_on_behalf_of_content_owner_channel();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner_channel() const { return on_behalf_of_content_owner_channel_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwnerChannel() {
      _have_on_behalf_of_content_owner_channel_ = true;
      return &on_behalf_of_content_owner_channel_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @param[in] value This parameter can only be used in a properly authorized
     * request. Note: This parameter is intended exclusively for YouTube content
     * partners.
     *
     * The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel
     * ID of the channel to which a video is being added. This parameter is
     * required when a request specifies a value for the onBehalfOfContentOwner
     * parameter, and it can only be used in conjunction with that parameter. In
     * addition, the request must be authorized using a CMS account that is
     * linked to the content owner that the onBehalfOfContentOwner parameter
     * specifies. Finally, the channel that the onBehalfOfContentOwnerChannel
     * parameter value specifies must be linked to the content owner that the
     * onBehalfOfContentOwner parameter specifies.
     *
     * This parameter is intended for YouTube content partners that own and
     * manage many different YouTube channels. It allows content owners to
     * authenticate once and perform actions on behalf of the channel specified
     * in the parameter value, without having to provide authentication
     * credentials for each separate channel.
     */
    void set_on_behalf_of_content_owner_channel(const string& value) {
      _have_on_behalf_of_content_owner_channel_ = true;
      on_behalf_of_content_owner_channel_ = value;
    }



    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      LiveStream* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string on_behalf_of_content_owner_channel_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_channel_ : 1;
  bool _have_on_behalf_of_content_owner_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(LiveStreamsResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtube.readonly
 */
class LiveStreamsResource_ListMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter specifies a comma-separated list of one
   * or more liveStream resource properties that the API response will include.
   * The part names that you can include in the parameter value are id, snippet,
   * cdn, and status.
   *
   */
  LiveStreamsResource_ListMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part);

  /**
   * Standard destructor.
   */
  virtual ~LiveStreamsResource_ListMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }



    /**
     * Clears the '<code>onBehalfOfContentOwnerChannel</code>' attribute so it
     * is no longer set.
     */
    void clear_on_behalf_of_content_owner_channel() {
      _have_on_behalf_of_content_owner_channel_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_channel_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner_channel
     */
    void clear_onBehalfOfContentOwnerChannel() {
      clear_on_behalf_of_content_owner_channel();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner_channel() const { return on_behalf_of_content_owner_channel_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwnerChannel() {
      _have_on_behalf_of_content_owner_channel_ = true;
      return &on_behalf_of_content_owner_channel_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @param[in] value This parameter can only be used in a properly authorized
     * request. Note: This parameter is intended exclusively for YouTube content
     * partners.
     *
     * The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel
     * ID of the channel to which a video is being added. This parameter is
     * required when a request specifies a value for the onBehalfOfContentOwner
     * parameter, and it can only be used in conjunction with that parameter. In
     * addition, the request must be authorized using a CMS account that is
     * linked to the content owner that the onBehalfOfContentOwner parameter
     * specifies. Finally, the channel that the onBehalfOfContentOwnerChannel
     * parameter value specifies must be linked to the content owner that the
     * onBehalfOfContentOwner parameter specifies.
     *
     * This parameter is intended for YouTube content partners that own and
     * manage many different YouTube channels. It allows content owners to
     * authenticate once and perform actions on behalf of the channel specified
     * in the parameter value, without having to provide authentication
     * credentials for each separate channel.
     */
    void set_on_behalf_of_content_owner_channel(const string& value) {
      _have_on_behalf_of_content_owner_channel_ = true;
      on_behalf_of_content_owner_channel_ = value;
    }



    /**
     * Clears the '<code>mine</code>' attribute so it is no longer set.
     */
    void clear_mine() {
      _have_mine_ = false;
      client::ClearCppValueHelper(&mine_);
    }


    /**
     * Gets the optional '<code>mine</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_mine() const { return mine_; }

    /**
     * Sets the '<code>mine</code>' attribute.
     *
     * @param[in] value The mine parameter can be used to instruct the API to
     * only return streams owned by the authenticated user. Set the parameter
     * value to true to only retrieve your own streams.
     */
    void set_mine(bool value) {
      _have_mine_ = true;
      mine_ = value;
    }

    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }
    /**
     * @deprecated
     * @see clear_max_results
     */
    void clear_maxResults() {
      clear_max_results();
    }

    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maxResults parameter specifies the maximum number of
     * items that should be returned in the result set. Acceptable values are 0
     * to 50, inclusive. The default value is 5.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }
    /**
     * @deprecated
     * @see clear_page_token
     */
    void clear_pageToken() {
      clear_page_token();
    }

    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value The pageToken parameter identifies a specific page in
     * the result set that should be returned. In an API response, the
     * nextPageToken and prevPageToken properties identify other pages that
     * could be retrieved.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>id</code>' attribute so it is no longer set.
     */
    void clear_id() {
      _have_id_ = false;
      client::ClearCppValueHelper(&id_);
    }


    /**
     * Gets the optional '<code>id</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_id() const { return id_; }

    /**
     * Gets a modifiable pointer to the optional <code>id</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_id() {
      _have_id_ = true;
      return &id_;
    }


    /**
     * Sets the '<code>id</code>' attribute.
     *
     * @param[in] value The id parameter specifies a comma-separated list of
     * YouTube stream IDs that identify the streams being retrieved. In a
     * liveStream resource, the id property specifies the stream's ID.
     */
    void set_id(const string& value) {
      _have_id_ = true;
      id_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      LiveStreamListResponse* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string on_behalf_of_content_owner_;
  string on_behalf_of_content_owner_channel_;
  bool mine_;
  uint32 max_results_;
  string page_token_;
  string id_;
  bool _have_on_behalf_of_content_owner_ : 1;
  bool _have_on_behalf_of_content_owner_channel_ : 1;
  bool _have_mine_ : 1;
  bool _have_max_results_ : 1;
  bool _have_page_token_ : 1;
  bool _have_id_ : 1;
  DISALLOW_COPY_AND_ASSIGN(LiveStreamsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            LiveStreamsResource_ListMethod,
            LiveStreamListResponse>
        LiveStreamsResource_ListMethodPager;

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 */
class LiveStreamsResource_UpdateMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter serves two purposes in this operation.
   * It identifies the properties that the write operation will set as well as
   * the properties that the API response will include.
   *
   * The part properties that you can include in the parameter value are id,
   * snippet, cdn, and status.
   *
   * Note that this method will override the existing values for all of the
   * mutable properties that are contained in any parts that the parameter value
   * specifies. If the request body does not specify a value for a mutable
   * property, the existing value for that property will be removed.
   *
   * @param[in] _content_ The data object to update.
   *
   */
  LiveStreamsResource_UpdateMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part,
        const LiveStream& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~LiveStreamsResource_UpdateMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwnerChannel</code>' attribute so it
     * is no longer set.
     */
    void clear_on_behalf_of_content_owner_channel() {
      _have_on_behalf_of_content_owner_channel_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_channel_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner_channel
     */
    void clear_onBehalfOfContentOwnerChannel() {
      clear_on_behalf_of_content_owner_channel();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner_channel() const { return on_behalf_of_content_owner_channel_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwnerChannel() {
      _have_on_behalf_of_content_owner_channel_ = true;
      return &on_behalf_of_content_owner_channel_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @param[in] value This parameter can only be used in a properly authorized
     * request. Note: This parameter is intended exclusively for YouTube content
     * partners.
     *
     * The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel
     * ID of the channel to which a video is being added. This parameter is
     * required when a request specifies a value for the onBehalfOfContentOwner
     * parameter, and it can only be used in conjunction with that parameter. In
     * addition, the request must be authorized using a CMS account that is
     * linked to the content owner that the onBehalfOfContentOwner parameter
     * specifies. Finally, the channel that the onBehalfOfContentOwnerChannel
     * parameter value specifies must be linked to the content owner that the
     * onBehalfOfContentOwner parameter specifies.
     *
     * This parameter is intended for YouTube content partners that own and
     * manage many different YouTube channels. It allows content owners to
     * authenticate once and perform actions on behalf of the channel specified
     * in the parameter value, without having to provide authentication
     * credentials for each separate channel.
     */
    void set_on_behalf_of_content_owner_channel(const string& value) {
      _have_on_behalf_of_content_owner_channel_ = true;
      on_behalf_of_content_owner_channel_ = value;
    }



    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      LiveStream* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string on_behalf_of_content_owner_channel_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_channel_ : 1;
  bool _have_on_behalf_of_content_owner_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(LiveStreamsResource_UpdateMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtubepartner
 */
class PlaylistItemsResource_DeleteMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] id The id parameter specifies the YouTube playlist item ID for
   * the playlist item that is being deleted. In a playlistItem resource, the id
   * property specifies the playlist item's ID.
   *
   */
  PlaylistItemsResource_DeleteMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~PlaylistItemsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


 private:
  string id_;
  DISALLOW_COPY_AND_ASSIGN(PlaylistItemsResource_DeleteMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtubepartner
 */
class PlaylistItemsResource_InsertMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter serves two purposes in this operation.
   * It identifies the properties that the write operation will set as well as
   * the properties that the API response will include.
   *
   * The part names that you can include in the parameter value are snippet,
   * contentDetails, and status.
   *
   * @param[in] _content_ The data object to insert.
   *
   */
  PlaylistItemsResource_InsertMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part,
        const PlaylistItem& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~PlaylistItemsResource_InsertMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      PlaylistItem* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(PlaylistItemsResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtube.readonly
 * https://www.googleapis.com/auth/youtubepartner
 */
class PlaylistItemsResource_ListMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter specifies a comma-separated list of one
   * or more playlistItem resource properties that the API response will
   * include. The part names that you can include in the parameter value are id,
   * snippet, contentDetails, and status.
   *
   * If the parameter identifies a property that contains child properties, the
   * child properties will be included in the response. For example, in a
   * playlistItem resource, the snippet property contains numerous fields,
   * including the title, description, position, and resourceId properties. As
   * such, if you set part=snippet, the API response will contain all of those
   * properties.
   *
   */
  PlaylistItemsResource_ListMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part);

  /**
   * Standard destructor.
   */
  virtual ~PlaylistItemsResource_ListMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }



    /**
     * Clears the '<code>playlistId</code>' attribute so it is no longer set.
     */
    void clear_playlist_id() {
      _have_playlist_id_ = false;
      client::ClearCppValueHelper(&playlist_id_);
    }
    /**
     * @deprecated
     * @see clear_playlist_id
     */
    void clear_playlistId() {
      clear_playlist_id();
    }

    /**
     * Gets the optional '<code>playlistId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_playlist_id() const { return playlist_id_; }

    /**
     * Gets a modifiable pointer to the optional <code>playlistId</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_playlistId() {
      _have_playlist_id_ = true;
      return &playlist_id_;
    }


    /**
     * Sets the '<code>playlistId</code>' attribute.
     *
     * @param[in] value The playlistId parameter specifies the unique ID of the
     * playlist for which you want to retrieve playlist items. Note that even
     * though this is an optional parameter, every request to retrieve playlist
     * items must specify a value for either the id parameter or the playlistId
     * parameter.
     */
    void set_playlist_id(const string& value) {
      _have_playlist_id_ = true;
      playlist_id_ = value;
    }



    /**
     * Clears the '<code>videoId</code>' attribute so it is no longer set.
     */
    void clear_video_id() {
      _have_video_id_ = false;
      client::ClearCppValueHelper(&video_id_);
    }
    /**
     * @deprecated
     * @see clear_video_id
     */
    void clear_videoId() {
      clear_video_id();
    }

    /**
     * Gets the optional '<code>videoId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_video_id() const { return video_id_; }

    /**
     * Gets a modifiable pointer to the optional <code>videoId</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_videoId() {
      _have_video_id_ = true;
      return &video_id_;
    }


    /**
     * Sets the '<code>videoId</code>' attribute.
     *
     * @param[in] value The videoId parameter specifies that the request should
     * return only the playlist items that contain the specified video.
     */
    void set_video_id(const string& value) {
      _have_video_id_ = true;
      video_id_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }
    /**
     * @deprecated
     * @see clear_max_results
     */
    void clear_maxResults() {
      clear_max_results();
    }

    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maxResults parameter specifies the maximum number of
     * items that should be returned in the result set.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }
    /**
     * @deprecated
     * @see clear_page_token
     */
    void clear_pageToken() {
      clear_page_token();
    }

    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value The pageToken parameter identifies a specific page in
     * the result set that should be returned. In an API response, the
     * nextPageToken and prevPageToken properties identify other pages that
     * could be retrieved.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>id</code>' attribute so it is no longer set.
     */
    void clear_id() {
      _have_id_ = false;
      client::ClearCppValueHelper(&id_);
    }


    /**
     * Gets the optional '<code>id</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_id() const { return id_; }

    /**
     * Gets a modifiable pointer to the optional <code>id</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_id() {
      _have_id_ = true;
      return &id_;
    }


    /**
     * Sets the '<code>id</code>' attribute.
     *
     * @param[in] value The id parameter specifies a comma-separated list of one
     * or more unique playlist item IDs.
     */
    void set_id(const string& value) {
      _have_id_ = true;
      id_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      PlaylistItemListResponse* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string on_behalf_of_content_owner_;
  string playlist_id_;
  string video_id_;
  uint32 max_results_;
  string page_token_;
  string id_;
  bool _have_on_behalf_of_content_owner_ : 1;
  bool _have_playlist_id_ : 1;
  bool _have_video_id_ : 1;
  bool _have_max_results_ : 1;
  bool _have_page_token_ : 1;
  bool _have_id_ : 1;
  DISALLOW_COPY_AND_ASSIGN(PlaylistItemsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            PlaylistItemsResource_ListMethod,
            PlaylistItemListResponse>
        PlaylistItemsResource_ListMethodPager;

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtubepartner
 */
class PlaylistItemsResource_UpdateMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter serves two purposes in this operation.
   * It identifies the properties that the write operation will set as well as
   * the properties that the API response will include.
   *
   * The part names that you can include in the parameter value are snippet,
   * contentDetails, and status.
   *
   * Note that this method will override the existing values for all of the
   * mutable properties that are contained in any parts that the parameter value
   * specifies. For example, a playlist item can specify a start time and end
   * time, which identify the times portion of the video that should play when
   * users watch the video in the playlist. If your request is updating a
   * playlist item that sets these values, and the request's part parameter
   * value includes the contentDetails part, the playlist item's start and end
   * times will be updated to whatever value the request body specifies. If the
   * request body does not specify values, the existing start and end times will
   * be removed and replaced with the default settings.
   *
   * @param[in] _content_ The data object to update.
   *
   */
  PlaylistItemsResource_UpdateMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part,
        const PlaylistItem& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~PlaylistItemsResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      PlaylistItem* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(PlaylistItemsResource_UpdateMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtubepartner
 */
class PlaylistsResource_DeleteMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] id The id parameter specifies the YouTube playlist ID for the
   * playlist that is being deleted. In a playlist resource, the id property
   * specifies the playlist's ID.
   *
   */
  PlaylistsResource_DeleteMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~PlaylistsResource_DeleteMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


 private:
  string id_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_ : 1;
  DISALLOW_COPY_AND_ASSIGN(PlaylistsResource_DeleteMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtubepartner
 */
class PlaylistsResource_InsertMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter serves two purposes in this operation.
   * It identifies the properties that the write operation will set as well as
   * the properties that the API response will include.
   *
   * The part names that you can include in the parameter value are snippet and
   * status.
   *
   * @param[in] _content_ The data object to insert.
   *
   */
  PlaylistsResource_InsertMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part,
        const Playlist& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~PlaylistsResource_InsertMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwnerChannel</code>' attribute so it
     * is no longer set.
     */
    void clear_on_behalf_of_content_owner_channel() {
      _have_on_behalf_of_content_owner_channel_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_channel_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner_channel
     */
    void clear_onBehalfOfContentOwnerChannel() {
      clear_on_behalf_of_content_owner_channel();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner_channel() const { return on_behalf_of_content_owner_channel_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwnerChannel() {
      _have_on_behalf_of_content_owner_channel_ = true;
      return &on_behalf_of_content_owner_channel_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @param[in] value This parameter can only be used in a properly authorized
     * request. Note: This parameter is intended exclusively for YouTube content
     * partners.
     *
     * The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel
     * ID of the channel to which a video is being added. This parameter is
     * required when a request specifies a value for the onBehalfOfContentOwner
     * parameter, and it can only be used in conjunction with that parameter. In
     * addition, the request must be authorized using a CMS account that is
     * linked to the content owner that the onBehalfOfContentOwner parameter
     * specifies. Finally, the channel that the onBehalfOfContentOwnerChannel
     * parameter value specifies must be linked to the content owner that the
     * onBehalfOfContentOwner parameter specifies.
     *
     * This parameter is intended for YouTube content partners that own and
     * manage many different YouTube channels. It allows content owners to
     * authenticate once and perform actions on behalf of the channel specified
     * in the parameter value, without having to provide authentication
     * credentials for each separate channel.
     */
    void set_on_behalf_of_content_owner_channel(const string& value) {
      _have_on_behalf_of_content_owner_channel_ = true;
      on_behalf_of_content_owner_channel_ = value;
    }



    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Playlist* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string on_behalf_of_content_owner_channel_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_channel_ : 1;
  bool _have_on_behalf_of_content_owner_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(PlaylistsResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtube.readonly
 * https://www.googleapis.com/auth/youtubepartner
 */
class PlaylistsResource_ListMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter specifies a comma-separated list of one
   * or more playlist resource properties that the API response will include.
   * The part names that you can include in the parameter value are id, snippet,
   * status, and contentDetails.
   *
   * If the parameter identifies a property that contains child properties, the
   * child properties will be included in the response. For example, in a
   * playlist resource, the snippet property contains properties like author,
   * title, description, tags, and timeCreated. As such, if you set
   * part=snippet, the API response will contain all of those properties.
   *
   */
  PlaylistsResource_ListMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part);

  /**
   * Standard destructor.
   */
  virtual ~PlaylistsResource_ListMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }



    /**
     * Clears the '<code>onBehalfOfContentOwnerChannel</code>' attribute so it
     * is no longer set.
     */
    void clear_on_behalf_of_content_owner_channel() {
      _have_on_behalf_of_content_owner_channel_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_channel_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner_channel
     */
    void clear_onBehalfOfContentOwnerChannel() {
      clear_on_behalf_of_content_owner_channel();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner_channel() const { return on_behalf_of_content_owner_channel_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwnerChannel() {
      _have_on_behalf_of_content_owner_channel_ = true;
      return &on_behalf_of_content_owner_channel_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @param[in] value This parameter can only be used in a properly authorized
     * request. Note: This parameter is intended exclusively for YouTube content
     * partners.
     *
     * The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel
     * ID of the channel to which a video is being added. This parameter is
     * required when a request specifies a value for the onBehalfOfContentOwner
     * parameter, and it can only be used in conjunction with that parameter. In
     * addition, the request must be authorized using a CMS account that is
     * linked to the content owner that the onBehalfOfContentOwner parameter
     * specifies. Finally, the channel that the onBehalfOfContentOwnerChannel
     * parameter value specifies must be linked to the content owner that the
     * onBehalfOfContentOwner parameter specifies.
     *
     * This parameter is intended for YouTube content partners that own and
     * manage many different YouTube channels. It allows content owners to
     * authenticate once and perform actions on behalf of the channel specified
     * in the parameter value, without having to provide authentication
     * credentials for each separate channel.
     */
    void set_on_behalf_of_content_owner_channel(const string& value) {
      _have_on_behalf_of_content_owner_channel_ = true;
      on_behalf_of_content_owner_channel_ = value;
    }



    /**
     * Clears the '<code>channelId</code>' attribute so it is no longer set.
     */
    void clear_channel_id() {
      _have_channel_id_ = false;
      client::ClearCppValueHelper(&channel_id_);
    }
    /**
     * @deprecated
     * @see clear_channel_id
     */
    void clear_channelId() {
      clear_channel_id();
    }

    /**
     * Gets the optional '<code>channelId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_channel_id() const { return channel_id_; }

    /**
     * Gets a modifiable pointer to the optional <code>channelId</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_channelId() {
      _have_channel_id_ = true;
      return &channel_id_;
    }


    /**
     * Sets the '<code>channelId</code>' attribute.
     *
     * @param[in] value This value indicates that the API should only return the
     * specified channel's playlists.
     */
    void set_channel_id(const string& value) {
      _have_channel_id_ = true;
      channel_id_ = value;
    }



    /**
     * Clears the '<code>mine</code>' attribute so it is no longer set.
     */
    void clear_mine() {
      _have_mine_ = false;
      client::ClearCppValueHelper(&mine_);
    }


    /**
     * Gets the optional '<code>mine</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_mine() const { return mine_; }

    /**
     * Sets the '<code>mine</code>' attribute.
     *
     * @param[in] value Set this parameter's value to true to instruct the API
     * to only return playlists owned by the authenticated user.
     */
    void set_mine(bool value) {
      _have_mine_ = true;
      mine_ = value;
    }

    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }
    /**
     * @deprecated
     * @see clear_max_results
     */
    void clear_maxResults() {
      clear_max_results();
    }

    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maxResults parameter specifies the maximum number of
     * items that should be returned in the result set.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }
    /**
     * @deprecated
     * @see clear_page_token
     */
    void clear_pageToken() {
      clear_page_token();
    }

    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value The pageToken parameter identifies a specific page in
     * the result set that should be returned. In an API response, the
     * nextPageToken and prevPageToken properties identify other pages that
     * could be retrieved.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>id</code>' attribute so it is no longer set.
     */
    void clear_id() {
      _have_id_ = false;
      client::ClearCppValueHelper(&id_);
    }


    /**
     * Gets the optional '<code>id</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_id() const { return id_; }

    /**
     * Gets a modifiable pointer to the optional <code>id</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_id() {
      _have_id_ = true;
      return &id_;
    }


    /**
     * Sets the '<code>id</code>' attribute.
     *
     * @param[in] value The id parameter specifies a comma-separated list of the
     * YouTube playlist ID(s) for the resource(s) that are being retrieved. In a
     * playlist resource, the id property specifies the playlist's YouTube
     * playlist ID.
     */
    void set_id(const string& value) {
      _have_id_ = true;
      id_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      PlaylistListResponse* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string on_behalf_of_content_owner_;
  string on_behalf_of_content_owner_channel_;
  string channel_id_;
  bool mine_;
  uint32 max_results_;
  string page_token_;
  string id_;
  bool _have_on_behalf_of_content_owner_ : 1;
  bool _have_on_behalf_of_content_owner_channel_ : 1;
  bool _have_channel_id_ : 1;
  bool _have_mine_ : 1;
  bool _have_max_results_ : 1;
  bool _have_page_token_ : 1;
  bool _have_id_ : 1;
  DISALLOW_COPY_AND_ASSIGN(PlaylistsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            PlaylistsResource_ListMethod,
            PlaylistListResponse>
        PlaylistsResource_ListMethodPager;

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtubepartner
 */
class PlaylistsResource_UpdateMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter serves two purposes in this operation.
   * It identifies the properties that the write operation will set as well as
   * the properties that the API response will include.
   *
   * The part names that you can include in the parameter value are snippet and
   * status.
   *
   * Note that this method will override the existing values for all of the
   * mutable properties that are contained in any parts that the parameter value
   * specifies. For example, a playlist's privacy setting is contained in the
   * status part. As such, if your request is updating a private playlist, and
   * the request's part parameter value includes the status part, the playlist's
   * privacy setting will be updated to whatever value the request body
   * specifies. If the request body does not specify a value, the existing
   * privacy setting will be removed and the playlist will revert to the default
   * privacy setting.
   *
   * @param[in] _content_ The data object to update.
   *
   */
  PlaylistsResource_UpdateMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part,
        const Playlist& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~PlaylistsResource_UpdateMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Playlist* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(PlaylistsResource_UpdateMethod);
};



/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtube.readonly
 * https://www.googleapis.com/auth/youtubepartner
 */
class SearchResource_ListMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter specifies a comma-separated list of one
   * or more search resource properties that the API response will include. The
   * part names that you can include in the parameter value are id and snippet.
   *
   * If the parameter identifies a property that contains child properties, the
   * child properties will be included in the response. For example, in a search
   * result, the snippet property contains other properties that identify the
   * result's title, description, and so forth. If you set part=snippet, the API
   * response will also contain all of those nested properties.
   *
   */
  SearchResource_ListMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part);

  /**
   * Standard destructor.
   */
  virtual ~SearchResource_ListMethod();


    /**
     * Clears the '<code>eventType</code>' attribute so it is no longer set.
     */
    void clear_event_type() {
      _have_event_type_ = false;
      client::ClearCppValueHelper(&event_type_);
    }
    /**
     * @deprecated
     * @see clear_event_type
     */
    void clear_eventType() {
      clear_event_type();
    }

    /**
     * Gets the optional '<code>eventType</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_event_type() const { return event_type_; }

    /**
     * Gets a modifiable pointer to the optional <code>eventType</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_eventType() {
      _have_event_type_ = true;
      return &event_type_;
    }


    /**
     * Sets the '<code>eventType</code>' attribute.
     *
     * @param[in] value The eventType parameter restricts a search to broadcast
     * events.
     */
    void set_event_type(const string& value) {
      _have_event_type_ = true;
      event_type_ = value;
    }



    /**
     * Clears the '<code>channelId</code>' attribute so it is no longer set.
     */
    void clear_channel_id() {
      _have_channel_id_ = false;
      client::ClearCppValueHelper(&channel_id_);
    }
    /**
     * @deprecated
     * @see clear_channel_id
     */
    void clear_channelId() {
      clear_channel_id();
    }

    /**
     * Gets the optional '<code>channelId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_channel_id() const { return channel_id_; }

    /**
     * Gets a modifiable pointer to the optional <code>channelId</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_channelId() {
      _have_channel_id_ = true;
      return &channel_id_;
    }


    /**
     * Sets the '<code>channelId</code>' attribute.
     *
     * @param[in] value The channelId parameter indicates that the API response
     * should only contain resources created by the channel.
     */
    void set_channel_id(const string& value) {
      _have_channel_id_ = true;
      channel_id_ = value;
    }



    /**
     * Clears the '<code>videoSyndicated</code>' attribute so it is no longer
     * set.
     */
    void clear_video_syndicated() {
      _have_video_syndicated_ = false;
      client::ClearCppValueHelper(&video_syndicated_);
    }
    /**
     * @deprecated
     * @see clear_video_syndicated
     */
    void clear_videoSyndicated() {
      clear_video_syndicated();
    }

    /**
     * Gets the optional '<code>videoSyndicated</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_video_syndicated() const { return video_syndicated_; }

    /**
     * Gets a modifiable pointer to the optional <code>videoSyndicated</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_videoSyndicated() {
      _have_video_syndicated_ = true;
      return &video_syndicated_;
    }


    /**
     * Sets the '<code>videoSyndicated</code>' attribute.
     *
     * @param[in] value The videoSyndicated parameter lets you to restrict a
     * search to only videos that can be played outside youtube.com.
     */
    void set_video_syndicated(const string& value) {
      _have_video_syndicated_ = true;
      video_syndicated_ = value;
    }



    /**
     * Clears the '<code>channelType</code>' attribute so it is no longer set.
     */
    void clear_channel_type() {
      _have_channel_type_ = false;
      client::ClearCppValueHelper(&channel_type_);
    }
    /**
     * @deprecated
     * @see clear_channel_type
     */
    void clear_channelType() {
      clear_channel_type();
    }

    /**
     * Gets the optional '<code>channelType</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_channel_type() const { return channel_type_; }

    /**
     * Gets a modifiable pointer to the optional <code>channelType</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_channelType() {
      _have_channel_type_ = true;
      return &channel_type_;
    }


    /**
     * Sets the '<code>channelType</code>' attribute.
     *
     * @param[in] value The channelType parameter lets you restrict a search to
     * a particular type of channel.
     */
    void set_channel_type(const string& value) {
      _have_channel_type_ = true;
      channel_type_ = value;
    }



    /**
     * Clears the '<code>videoCaption</code>' attribute so it is no longer set.
     */
    void clear_video_caption() {
      _have_video_caption_ = false;
      client::ClearCppValueHelper(&video_caption_);
    }
    /**
     * @deprecated
     * @see clear_video_caption
     */
    void clear_videoCaption() {
      clear_video_caption();
    }

    /**
     * Gets the optional '<code>videoCaption</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_video_caption() const { return video_caption_; }

    /**
     * Gets a modifiable pointer to the optional <code>videoCaption</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_videoCaption() {
      _have_video_caption_ = true;
      return &video_caption_;
    }


    /**
     * Sets the '<code>videoCaption</code>' attribute.
     *
     * @param[in] value The videoCaption parameter indicates whether the API
     * should filter video search results based on whether they have captions.
     */
    void set_video_caption(const string& value) {
      _have_video_caption_ = true;
      video_caption_ = value;
    }



    /**
     * Clears the '<code>publishedAfter</code>' attribute so it is no longer
     * set.
     */
    void clear_published_after() {
      _have_published_after_ = false;
      client::ClearCppValueHelper(&published_after_);
    }
    /**
     * @deprecated
     * @see clear_published_after
     */
    void clear_publishedAfter() {
      clear_published_after();
    }

    /**
     * Gets the optional '<code>publishedAfter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    client::DateTime get_published_after() const { return published_after_; }

    /**
     * Sets the '<code>publishedAfter</code>' attribute.
     *
     * @param[in] value The publishedAfter parameter indicates that the API
     * response should only contain resources created after the specified time.
     * The value is an RFC 3339 formatted date-time value
     * (1970-01-01T00:00:00Z).
     */
    void set_published_after(client::DateTime value) {
      _have_published_after_ = true;
      published_after_ = value;
    }

    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }
    /**
     * @deprecated
     * @see clear_page_token
     */
    void clear_pageToken() {
      clear_page_token();
    }

    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value The pageToken parameter identifies a specific page in
     * the result set that should be returned. In an API response, the
     * nextPageToken and prevPageToken properties identify other pages that
     * could be retrieved.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>forContentOwner</code>' attribute so it is no longer
     * set.
     */
    void clear_for_content_owner() {
      _have_for_content_owner_ = false;
      client::ClearCppValueHelper(&for_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_for_content_owner
     */
    void clear_forContentOwner() {
      clear_for_content_owner();
    }

    /**
     * Gets the optional '<code>forContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_for_content_owner() const { return for_content_owner_; }

    /**
     * Sets the '<code>forContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The forContentOwner parameter restricts the search to only retrieve
     * resources owned by the content owner specified by the
     * onBehalfOfContentOwner parameter. The user must be authenticated using a
     * CMS account linked to the specified content owner and
     * onBehalfOfContentOwner must be provided.
     */
    void set_for_content_owner(bool value) {
      _have_for_content_owner_ = true;
      for_content_owner_ = value;
    }

    /**
     * Clears the '<code>regionCode</code>' attribute so it is no longer set.
     */
    void clear_region_code() {
      _have_region_code_ = false;
      client::ClearCppValueHelper(&region_code_);
    }
    /**
     * @deprecated
     * @see clear_region_code
     */
    void clear_regionCode() {
      clear_region_code();
    }

    /**
     * Gets the optional '<code>regionCode</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_region_code() const { return region_code_; }

    /**
     * Gets a modifiable pointer to the optional <code>regionCode</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_regionCode() {
      _have_region_code_ = true;
      return &region_code_;
    }


    /**
     * Sets the '<code>regionCode</code>' attribute.
     *
     * @param[in] value The regionCode parameter instructs the API to return
     * search results for the specified country. The parameter value is an ISO
     * 3166-1 alpha-2 country code.
     */
    void set_region_code(const string& value) {
      _have_region_code_ = true;
      region_code_ = value;
    }



    /**
     * Clears the '<code>location</code>' attribute so it is no longer set.
     */
    void clear_location() {
      _have_location_ = false;
      client::ClearCppValueHelper(&location_);
    }


    /**
     * Gets the optional '<code>location</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_location() const { return location_; }

    /**
     * Gets a modifiable pointer to the optional <code>location</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_location() {
      _have_location_ = true;
      return &location_;
    }


    /**
     * Sets the '<code>location</code>' attribute.
     *
     * @param[in] value The location parameter restricts a search to videos that
     * have a geographical location specified in their metadata. The value is a
     * string that specifies geographic latitude/longitude coordinates e.g.
     * (37.42307,-122.08427).
     */
    void set_location(const string& value) {
      _have_location_ = true;
      location_ = value;
    }



    /**
     * Clears the '<code>locationRadius</code>' attribute so it is no longer
     * set.
     */
    void clear_location_radius() {
      _have_location_radius_ = false;
      client::ClearCppValueHelper(&location_radius_);
    }
    /**
     * @deprecated
     * @see clear_location_radius
     */
    void clear_locationRadius() {
      clear_location_radius();
    }

    /**
     * Gets the optional '<code>locationRadius</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_location_radius() const { return location_radius_; }

    /**
     * Gets a modifiable pointer to the optional <code>locationRadius</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_locationRadius() {
      _have_location_radius_ = true;
      return &location_radius_;
    }


    /**
     * Sets the '<code>locationRadius</code>' attribute.
     *
     * @param[in] value The locationRadius, in conjunction with the location
     * parameter, defines a geographic area. If the geographic coordinates
     * associated with a video fall within that area, then the video may be
     * included in search results. This parameter value must be a floating point
     * number followed by a measurement unit. Valid measurement units are m, km,
     * ft, and mi. For example, valid parameter values include 1500m, 5km,
     * 10000ft, and 0.75mi. The API does not support locationRadius parameter
     * values larger than 1000 kilometers.
     */
    void set_location_radius(const string& value) {
      _have_location_radius_ = true;
      location_radius_ = value;
    }



    /**
     * Clears the '<code>videoType</code>' attribute so it is no longer set.
     */
    void clear_video_type() {
      _have_video_type_ = false;
      client::ClearCppValueHelper(&video_type_);
    }
    /**
     * @deprecated
     * @see clear_video_type
     */
    void clear_videoType() {
      clear_video_type();
    }

    /**
     * Gets the optional '<code>videoType</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_video_type() const { return video_type_; }

    /**
     * Gets a modifiable pointer to the optional <code>videoType</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_videoType() {
      _have_video_type_ = true;
      return &video_type_;
    }


    /**
     * Sets the '<code>videoType</code>' attribute.
     *
     * @param[in] value The videoType parameter lets you restrict a search to a
     * particular type of videos.
     */
    void set_video_type(const string& value) {
      _have_video_type_ = true;
      video_type_ = value;
    }



    /**
     * Clears the '<code>type</code>' attribute so it is no longer set.
     */
    void clear_type() {
      _have_type_ = false;
      client::ClearCppValueHelper(&type_);
    }


    /**
     * Gets the optional '<code>type</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_type() const { return type_; }

    /**
     * Gets a modifiable pointer to the optional <code>type</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_type() {
      _have_type_ = true;
      return &type_;
    }


    /**
     * Sets the '<code>type</code>' attribute.
     *
     * @param[in] value The type parameter restricts a search query to only
     * retrieve a particular type of resource. The value is a comma-separated
     * list of resource types.
     */
    void set_type(const string& value) {
      _have_type_ = true;
      type_ = value;
    }



    /**
     * Clears the '<code>topicId</code>' attribute so it is no longer set.
     */
    void clear_topic_id() {
      _have_topic_id_ = false;
      client::ClearCppValueHelper(&topic_id_);
    }
    /**
     * @deprecated
     * @see clear_topic_id
     */
    void clear_topicId() {
      clear_topic_id();
    }

    /**
     * Gets the optional '<code>topicId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_topic_id() const { return topic_id_; }

    /**
     * Gets a modifiable pointer to the optional <code>topicId</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_topicId() {
      _have_topic_id_ = true;
      return &topic_id_;
    }


    /**
     * Sets the '<code>topicId</code>' attribute.
     *
     * @param[in] value The topicId parameter indicates that the API response
     * should only contain resources associated with the specified topic. The
     * value identifies a Freebase topic ID.
     */
    void set_topic_id(const string& value) {
      _have_topic_id_ = true;
      topic_id_ = value;
    }



    /**
     * Clears the '<code>publishedBefore</code>' attribute so it is no longer
     * set.
     */
    void clear_published_before() {
      _have_published_before_ = false;
      client::ClearCppValueHelper(&published_before_);
    }
    /**
     * @deprecated
     * @see clear_published_before
     */
    void clear_publishedBefore() {
      clear_published_before();
    }

    /**
     * Gets the optional '<code>publishedBefore</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    client::DateTime get_published_before() const { return published_before_; }

    /**
     * Sets the '<code>publishedBefore</code>' attribute.
     *
     * @param[in] value The publishedBefore parameter indicates that the API
     * response should only contain resources created before the specified time.
     * The value is an RFC 3339 formatted date-time value
     * (1970-01-01T00:00:00Z).
     */
    void set_published_before(client::DateTime value) {
      _have_published_before_ = true;
      published_before_ = value;
    }

    /**
     * Clears the '<code>videoDimension</code>' attribute so it is no longer
     * set.
     */
    void clear_video_dimension() {
      _have_video_dimension_ = false;
      client::ClearCppValueHelper(&video_dimension_);
    }
    /**
     * @deprecated
     * @see clear_video_dimension
     */
    void clear_videoDimension() {
      clear_video_dimension();
    }

    /**
     * Gets the optional '<code>videoDimension</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_video_dimension() const { return video_dimension_; }

    /**
     * Gets a modifiable pointer to the optional <code>videoDimension</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_videoDimension() {
      _have_video_dimension_ = true;
      return &video_dimension_;
    }


    /**
     * Sets the '<code>videoDimension</code>' attribute.
     *
     * @param[in] value The videoDimension parameter lets you restrict a search
     * to only retrieve 2D or 3D videos.
     */
    void set_video_dimension(const string& value) {
      _have_video_dimension_ = true;
      video_dimension_ = value;
    }



    /**
     * Clears the '<code>videoLicense</code>' attribute so it is no longer set.
     */
    void clear_video_license() {
      _have_video_license_ = false;
      client::ClearCppValueHelper(&video_license_);
    }
    /**
     * @deprecated
     * @see clear_video_license
     */
    void clear_videoLicense() {
      clear_video_license();
    }

    /**
     * Gets the optional '<code>videoLicense</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_video_license() const { return video_license_; }

    /**
     * Gets a modifiable pointer to the optional <code>videoLicense</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_videoLicense() {
      _have_video_license_ = true;
      return &video_license_;
    }


    /**
     * Sets the '<code>videoLicense</code>' attribute.
     *
     * @param[in] value The videoLicense parameter filters search results to
     * only include videos with a particular license. YouTube lets video
     * uploaders choose to attach either the Creative Commons license or the
     * standard YouTube license to each of their videos.
     */
    void set_video_license(const string& value) {
      _have_video_license_ = true;
      video_license_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }
    /**
     * @deprecated
     * @see clear_max_results
     */
    void clear_maxResults() {
      clear_max_results();
    }

    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maxResults parameter specifies the maximum number of
     * items that should be returned in the result set.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>relatedToVideoId</code>' attribute so it is no longer
     * set.
     */
    void clear_related_to_video_id() {
      _have_related_to_video_id_ = false;
      client::ClearCppValueHelper(&related_to_video_id_);
    }
    /**
     * @deprecated
     * @see clear_related_to_video_id
     */
    void clear_relatedToVideoId() {
      clear_related_to_video_id();
    }

    /**
     * Gets the optional '<code>relatedToVideoId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_related_to_video_id() const { return related_to_video_id_; }

    /**
     * Gets a modifiable pointer to the optional <code>relatedToVideoId</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_relatedToVideoId() {
      _have_related_to_video_id_ = true;
      return &related_to_video_id_;
    }


    /**
     * Sets the '<code>relatedToVideoId</code>' attribute.
     *
     * @param[in] value The relatedToVideoId parameter retrieves a list of
     * videos that are related to the video that the parameter value identifies.
     * The parameter value must be set to a YouTube video ID and, if you are
     * using this parameter, the type parameter must be set to video.
     */
    void set_related_to_video_id(const string& value) {
      _have_related_to_video_id_ = true;
      related_to_video_id_ = value;
    }



    /**
     * Clears the '<code>videoDefinition</code>' attribute so it is no longer
     * set.
     */
    void clear_video_definition() {
      _have_video_definition_ = false;
      client::ClearCppValueHelper(&video_definition_);
    }
    /**
     * @deprecated
     * @see clear_video_definition
     */
    void clear_videoDefinition() {
      clear_video_definition();
    }

    /**
     * Gets the optional '<code>videoDefinition</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_video_definition() const { return video_definition_; }

    /**
     * Gets a modifiable pointer to the optional <code>videoDefinition</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_videoDefinition() {
      _have_video_definition_ = true;
      return &video_definition_;
    }


    /**
     * Sets the '<code>videoDefinition</code>' attribute.
     *
     * @param[in] value The videoDefinition parameter lets you restrict a search
     * to only include either high definition (HD) or standard definition (SD)
     * videos. HD videos are available for playback in at least 720p, though
     * higher resolutions, like 1080p, might also be available.
     */
    void set_video_definition(const string& value) {
      _have_video_definition_ = true;
      video_definition_ = value;
    }



    /**
     * Clears the '<code>videoDuration</code>' attribute so it is no longer set.
     */
    void clear_video_duration() {
      _have_video_duration_ = false;
      client::ClearCppValueHelper(&video_duration_);
    }
    /**
     * @deprecated
     * @see clear_video_duration
     */
    void clear_videoDuration() {
      clear_video_duration();
    }

    /**
     * Gets the optional '<code>videoDuration</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_video_duration() const { return video_duration_; }

    /**
     * Gets a modifiable pointer to the optional <code>videoDuration</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_videoDuration() {
      _have_video_duration_ = true;
      return &video_duration_;
    }


    /**
     * Sets the '<code>videoDuration</code>' attribute.
     *
     * @param[in] value The videoDuration parameter filters video search results
     * based on their duration.
     */
    void set_video_duration(const string& value) {
      _have_video_duration_ = true;
      video_duration_ = value;
    }



    /**
     * Clears the '<code>forMine</code>' attribute so it is no longer set.
     */
    void clear_for_mine() {
      _have_for_mine_ = false;
      client::ClearCppValueHelper(&for_mine_);
    }
    /**
     * @deprecated
     * @see clear_for_mine
     */
    void clear_forMine() {
      clear_for_mine();
    }

    /**
     * Gets the optional '<code>forMine</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_for_mine() const { return for_mine_; }

    /**
     * Sets the '<code>forMine</code>' attribute.
     *
     * @param[in] value The forMine parameter restricts the search to only
     * retrieve videos owned by the authenticated user. If you set this
     * parameter to true, then the type parameter's value must also be set to
     * video.
     */
    void set_for_mine(bool value) {
      _have_for_mine_ = true;
      for_mine_ = value;
    }

    /**
     * Clears the '<code>q</code>' attribute so it is no longer set.
     */
    void clear_q() {
      _have_q_ = false;
      client::ClearCppValueHelper(&q_);
    }


    /**
     * Gets the optional '<code>q</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_q() const { return q_; }

    /**
     * Gets a modifiable pointer to the optional <code>q</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_q() {
      _have_q_ = true;
      return &q_;
    }


    /**
     * Sets the '<code>q</code>' attribute.
     *
     * @param[in] value The q parameter specifies the query term to search for.
     */
    void set_q(const string& value) {
      _have_q_ = true;
      q_ = value;
    }



    /**
     * Clears the '<code>safeSearch</code>' attribute so it is no longer set.
     */
    void clear_safe_search() {
      _have_safe_search_ = false;
      client::ClearCppValueHelper(&safe_search_);
    }
    /**
     * @deprecated
     * @see clear_safe_search
     */
    void clear_safeSearch() {
      clear_safe_search();
    }

    /**
     * Gets the optional '<code>safeSearch</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_safe_search() const { return safe_search_; }

    /**
     * Gets a modifiable pointer to the optional <code>safeSearch</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_safeSearch() {
      _have_safe_search_ = true;
      return &safe_search_;
    }


    /**
     * Sets the '<code>safeSearch</code>' attribute.
     *
     * @param[in] value The safeSearch parameter indicates whether the search
     * results should include restricted content as well as standard content.
     */
    void set_safe_search(const string& value) {
      _have_safe_search_ = true;
      safe_search_ = value;
    }



    /**
     * Clears the '<code>videoEmbeddable</code>' attribute so it is no longer
     * set.
     */
    void clear_video_embeddable() {
      _have_video_embeddable_ = false;
      client::ClearCppValueHelper(&video_embeddable_);
    }
    /**
     * @deprecated
     * @see clear_video_embeddable
     */
    void clear_videoEmbeddable() {
      clear_video_embeddable();
    }

    /**
     * Gets the optional '<code>videoEmbeddable</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_video_embeddable() const { return video_embeddable_; }

    /**
     * Gets a modifiable pointer to the optional <code>videoEmbeddable</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_videoEmbeddable() {
      _have_video_embeddable_ = true;
      return &video_embeddable_;
    }


    /**
     * Sets the '<code>videoEmbeddable</code>' attribute.
     *
     * @param[in] value The videoEmbeddable parameter lets you to restrict a
     * search to only videos that can be embedded into a webpage.
     */
    void set_video_embeddable(const string& value) {
      _have_video_embeddable_ = true;
      video_embeddable_ = value;
    }



    /**
     * Clears the '<code>videoCategoryId</code>' attribute so it is no longer
     * set.
     */
    void clear_video_category_id() {
      _have_video_category_id_ = false;
      client::ClearCppValueHelper(&video_category_id_);
    }
    /**
     * @deprecated
     * @see clear_video_category_id
     */
    void clear_videoCategoryId() {
      clear_video_category_id();
    }

    /**
     * Gets the optional '<code>videoCategoryId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_video_category_id() const { return video_category_id_; }

    /**
     * Gets a modifiable pointer to the optional <code>videoCategoryId</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_videoCategoryId() {
      _have_video_category_id_ = true;
      return &video_category_id_;
    }


    /**
     * Sets the '<code>videoCategoryId</code>' attribute.
     *
     * @param[in] value The videoCategoryId parameter filters video search
     * results based on their category.
     */
    void set_video_category_id(const string& value) {
      _have_video_category_id_ = true;
      video_category_id_ = value;
    }



    /**
     * Clears the '<code>order</code>' attribute so it is no longer set.
     */
    void clear_order() {
      _have_order_ = false;
      client::ClearCppValueHelper(&order_);
    }


    /**
     * Gets the optional '<code>order</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order() const { return order_; }

    /**
     * Gets a modifiable pointer to the optional <code>order</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_order() {
      _have_order_ = true;
      return &order_;
    }


    /**
     * Sets the '<code>order</code>' attribute.
     *
     * @param[in] value The order parameter specifies the method that will be
     * used to order resources in the API response.
     */
    void set_order(const string& value) {
      _have_order_ = true;
      order_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      SearchListResponse* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string event_type_;
  string channel_id_;
  string video_syndicated_;
  string channel_type_;
  string video_caption_;
  client::DateTime published_after_;
  string on_behalf_of_content_owner_;
  string page_token_;
  bool for_content_owner_;
  string region_code_;
  string location_;
  string location_radius_;
  string video_type_;
  string type_;
  string topic_id_;
  client::DateTime published_before_;
  string video_dimension_;
  string video_license_;
  uint32 max_results_;
  string related_to_video_id_;
  string video_definition_;
  string video_duration_;
  bool for_mine_;
  string q_;
  string safe_search_;
  string video_embeddable_;
  string video_category_id_;
  string order_;
  bool _have_event_type_ : 1;
  bool _have_channel_id_ : 1;
  bool _have_video_syndicated_ : 1;
  bool _have_channel_type_ : 1;
  bool _have_video_caption_ : 1;
  bool _have_published_after_ : 1;
  bool _have_on_behalf_of_content_owner_ : 1;
  bool _have_page_token_ : 1;
  bool _have_for_content_owner_ : 1;
  bool _have_region_code_ : 1;
  bool _have_location_ : 1;
  bool _have_location_radius_ : 1;
  bool _have_video_type_ : 1;
  bool _have_type_ : 1;
  bool _have_topic_id_ : 1;
  bool _have_published_before_ : 1;
  bool _have_video_dimension_ : 1;
  bool _have_video_license_ : 1;
  bool _have_max_results_ : 1;
  bool _have_related_to_video_id_ : 1;
  bool _have_video_definition_ : 1;
  bool _have_video_duration_ : 1;
  bool _have_for_mine_ : 1;
  bool _have_q_ : 1;
  bool _have_safe_search_ : 1;
  bool _have_video_embeddable_ : 1;
  bool _have_video_category_id_ : 1;
  bool _have_order_ : 1;
  DISALLOW_COPY_AND_ASSIGN(SearchResource_ListMethod);
};

typedef client::ServiceRequestPager<
            SearchResource_ListMethod,
            SearchListResponse>
        SearchResource_ListMethodPager;



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtubepartner
 */
class SubscriptionsResource_DeleteMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] id The id parameter specifies the YouTube subscription ID for
   * the resource that is being deleted. In a subscription resource, the id
   * property specifies the YouTube subscription ID.
   *
   */
  SubscriptionsResource_DeleteMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~SubscriptionsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


 private:
  string id_;
  DISALLOW_COPY_AND_ASSIGN(SubscriptionsResource_DeleteMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtubepartner
 */
class SubscriptionsResource_InsertMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter serves two purposes in this operation.
   * It identifies the properties that the write operation will set as well as
   * the properties that the API response will include.
   *
   * The part names that you can include in the parameter value are snippet and
   * contentDetails.
   *
   * @param[in] _content_ The data object to insert.
   *
   */
  SubscriptionsResource_InsertMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part,
        const Subscription& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~SubscriptionsResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Subscription* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(SubscriptionsResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtube.readonly
 * https://www.googleapis.com/auth/youtubepartner
 */
class SubscriptionsResource_ListMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter specifies a comma-separated list of one
   * or more subscription resource properties that the API response will
   * include. The part names that you can include in the parameter value are id,
   * snippet, and contentDetails.
   *
   * If the parameter identifies a property that contains child properties, the
   * child properties will be included in the response. For example, in a
   * subscription resource, the snippet property contains other properties, such
   * as a display title for the subscription. If you set part=snippet, the API
   * response will also contain all of those nested properties.
   *
   */
  SubscriptionsResource_ListMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part);

  /**
   * Standard destructor.
   */
  virtual ~SubscriptionsResource_ListMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }



    /**
     * Clears the '<code>onBehalfOfContentOwnerChannel</code>' attribute so it
     * is no longer set.
     */
    void clear_on_behalf_of_content_owner_channel() {
      _have_on_behalf_of_content_owner_channel_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_channel_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner_channel
     */
    void clear_onBehalfOfContentOwnerChannel() {
      clear_on_behalf_of_content_owner_channel();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner_channel() const { return on_behalf_of_content_owner_channel_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwnerChannel() {
      _have_on_behalf_of_content_owner_channel_ = true;
      return &on_behalf_of_content_owner_channel_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @param[in] value This parameter can only be used in a properly authorized
     * request. Note: This parameter is intended exclusively for YouTube content
     * partners.
     *
     * The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel
     * ID of the channel to which a video is being added. This parameter is
     * required when a request specifies a value for the onBehalfOfContentOwner
     * parameter, and it can only be used in conjunction with that parameter. In
     * addition, the request must be authorized using a CMS account that is
     * linked to the content owner that the onBehalfOfContentOwner parameter
     * specifies. Finally, the channel that the onBehalfOfContentOwnerChannel
     * parameter value specifies must be linked to the content owner that the
     * onBehalfOfContentOwner parameter specifies.
     *
     * This parameter is intended for YouTube content partners that own and
     * manage many different YouTube channels. It allows content owners to
     * authenticate once and perform actions on behalf of the channel specified
     * in the parameter value, without having to provide authentication
     * credentials for each separate channel.
     */
    void set_on_behalf_of_content_owner_channel(const string& value) {
      _have_on_behalf_of_content_owner_channel_ = true;
      on_behalf_of_content_owner_channel_ = value;
    }



    /**
     * Clears the '<code>channelId</code>' attribute so it is no longer set.
     */
    void clear_channel_id() {
      _have_channel_id_ = false;
      client::ClearCppValueHelper(&channel_id_);
    }
    /**
     * @deprecated
     * @see clear_channel_id
     */
    void clear_channelId() {
      clear_channel_id();
    }

    /**
     * Gets the optional '<code>channelId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_channel_id() const { return channel_id_; }

    /**
     * Gets a modifiable pointer to the optional <code>channelId</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_channelId() {
      _have_channel_id_ = true;
      return &channel_id_;
    }


    /**
     * Sets the '<code>channelId</code>' attribute.
     *
     * @param[in] value The channelId parameter specifies a YouTube channel ID.
     * The API will only return that channel's subscriptions.
     */
    void set_channel_id(const string& value) {
      _have_channel_id_ = true;
      channel_id_ = value;
    }



    /**
     * Clears the '<code>mine</code>' attribute so it is no longer set.
     */
    void clear_mine() {
      _have_mine_ = false;
      client::ClearCppValueHelper(&mine_);
    }


    /**
     * Gets the optional '<code>mine</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_mine() const { return mine_; }

    /**
     * Sets the '<code>mine</code>' attribute.
     *
     * @param[in] value Set this parameter's value to true to retrieve a feed of
     * the authenticated user's subscriptions.
     */
    void set_mine(bool value) {
      _have_mine_ = true;
      mine_ = value;
    }

    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }
    /**
     * @deprecated
     * @see clear_max_results
     */
    void clear_maxResults() {
      clear_max_results();
    }

    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maxResults parameter specifies the maximum number of
     * items that should be returned in the result set.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>forChannelId</code>' attribute so it is no longer set.
     */
    void clear_for_channel_id() {
      _have_for_channel_id_ = false;
      client::ClearCppValueHelper(&for_channel_id_);
    }
    /**
     * @deprecated
     * @see clear_for_channel_id
     */
    void clear_forChannelId() {
      clear_for_channel_id();
    }

    /**
     * Gets the optional '<code>forChannelId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_for_channel_id() const { return for_channel_id_; }

    /**
     * Gets a modifiable pointer to the optional <code>forChannelId</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_forChannelId() {
      _have_for_channel_id_ = true;
      return &for_channel_id_;
    }


    /**
     * Sets the '<code>forChannelId</code>' attribute.
     *
     * @param[in] value The forChannelId parameter specifies a comma-separated
     * list of channel IDs. The API response will then only contain
     * subscriptions matching those channels.
     */
    void set_for_channel_id(const string& value) {
      _have_for_channel_id_ = true;
      for_channel_id_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }
    /**
     * @deprecated
     * @see clear_page_token
     */
    void clear_pageToken() {
      clear_page_token();
    }

    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value The pageToken parameter identifies a specific page in
     * the result set that should be returned. In an API response, the
     * nextPageToken and prevPageToken properties identify other pages that
     * could be retrieved.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>mySubscribers</code>' attribute so it is no longer set.
     */
    void clear_my_subscribers() {
      _have_my_subscribers_ = false;
      client::ClearCppValueHelper(&my_subscribers_);
    }
    /**
     * @deprecated
     * @see clear_my_subscribers
     */
    void clear_mySubscribers() {
      clear_my_subscribers();
    }

    /**
     * Gets the optional '<code>mySubscribers</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_my_subscribers() const { return my_subscribers_; }

    /**
     * Sets the '<code>mySubscribers</code>' attribute.
     *
     * @param[in] value Set this parameter's value to true to retrieve a feed of
     * the subscribers of the authenticated user.
     */
    void set_my_subscribers(bool value) {
      _have_my_subscribers_ = true;
      my_subscribers_ = value;
    }

    /**
     * Clears the '<code>order</code>' attribute so it is no longer set.
     */
    void clear_order() {
      _have_order_ = false;
      client::ClearCppValueHelper(&order_);
    }


    /**
     * Gets the optional '<code>order</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order() const { return order_; }

    /**
     * Gets a modifiable pointer to the optional <code>order</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_order() {
      _have_order_ = true;
      return &order_;
    }


    /**
     * Sets the '<code>order</code>' attribute.
     *
     * @param[in] value The order parameter specifies the method that will be
     * used to sort resources in the API response.
     */
    void set_order(const string& value) {
      _have_order_ = true;
      order_ = value;
    }



    /**
     * Clears the '<code>id</code>' attribute so it is no longer set.
     */
    void clear_id() {
      _have_id_ = false;
      client::ClearCppValueHelper(&id_);
    }


    /**
     * Gets the optional '<code>id</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_id() const { return id_; }

    /**
     * Gets a modifiable pointer to the optional <code>id</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_id() {
      _have_id_ = true;
      return &id_;
    }


    /**
     * Sets the '<code>id</code>' attribute.
     *
     * @param[in] value The id parameter specifies a comma-separated list of the
     * YouTube subscription ID(s) for the resource(s) that are being retrieved.
     * In a subscription resource, the id property specifies the YouTube
     * subscription ID.
     */
    void set_id(const string& value) {
      _have_id_ = true;
      id_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      SubscriptionListResponse* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string on_behalf_of_content_owner_;
  string on_behalf_of_content_owner_channel_;
  string channel_id_;
  bool mine_;
  uint32 max_results_;
  string for_channel_id_;
  string page_token_;
  bool my_subscribers_;
  string order_;
  string id_;
  bool _have_on_behalf_of_content_owner_ : 1;
  bool _have_on_behalf_of_content_owner_channel_ : 1;
  bool _have_channel_id_ : 1;
  bool _have_mine_ : 1;
  bool _have_max_results_ : 1;
  bool _have_for_channel_id_ : 1;
  bool _have_page_token_ : 1;
  bool _have_my_subscribers_ : 1;
  bool _have_order_ : 1;
  bool _have_id_ : 1;
  DISALLOW_COPY_AND_ASSIGN(SubscriptionsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            SubscriptionsResource_ListMethod,
            SubscriptionListResponse>
        SubscriptionsResource_ListMethodPager;



/**
 * Implements the set method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtube.upload
 * https://www.googleapis.com/auth/youtubepartner
 */
class ThumbnailsResource_SetMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] video_id The videoId parameter specifies a YouTube video ID for
   * which the custom video thumbnail is being provided.
   *
   * @param[in] _media_content_type_ The content type of the data in the
   * _media_content_reader_.
   * @param[in] _media_content_reader_ The media content to set. If
   * this is NULL then do not upload any media and ignore _media_content_type_.
   */
  ThumbnailsResource_SetMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& video_id,
        const StringPiece& _media_content_type_,
        client::DataReader* _media_content_reader_);

  /**
   * Standard destructor.
   */
  virtual ~ThumbnailsResource_SetMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value The onBehalfOfContentOwner parameter indicates that the
     * authenticated user is acting on behalf of the content owner specified in
     * the parameter value. This parameter is intended for YouTube content
     * partners that own and manage many different YouTube channels. It allows
     * content owners to authenticate once and get access to all their video and
     * channel data, without having to provide authentication credentials for
     * each individual channel. The actual CMS account that the user
     * authenticates with needs to be linked to the specified YouTube content
     * owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ThumbnailSetResponse* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

  /**
   * Invokes the server with the method.
   *
   * Response detail is available from the underlying http_request.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  virtual util::Status Execute();

  /**
   * Returns MediaUploader for uploading the content.
   */
  client::MediaUploader* media_uploader() {
    return _uploader_.get();
  }

  /**
   * Returns the specification for media upload using the simple protocol.
   */
  static const client::MediaUploadSpec
    SIMPLE_MEDIA_UPLOAD;
  /**
   * Returns the specification for media upload using the resumable protocol.
   */
  static const client::MediaUploadSpec
    RESUMABLE_MEDIA_UPLOAD;

 private:
  string video_id_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_ : 1;
  std::unique_ptr<client::MediaUploader> _uploader_;

  DISALLOW_COPY_AND_ASSIGN(ThumbnailsResource_SetMethod);
};



/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtube.readonly
 * https://www.googleapis.com/auth/youtubepartner
 */
class VideoCategoriesResource_ListMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter specifies the videoCategory resource
   * parts that the API response will include. Supported values are id and
   * snippet.
   *
   */
  VideoCategoriesResource_ListMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part);

  /**
   * Standard destructor.
   */
  virtual ~VideoCategoriesResource_ListMethod();


    /**
     * Clears the '<code>regionCode</code>' attribute so it is no longer set.
     */
    void clear_region_code() {
      _have_region_code_ = false;
      client::ClearCppValueHelper(&region_code_);
    }
    /**
     * @deprecated
     * @see clear_region_code
     */
    void clear_regionCode() {
      clear_region_code();
    }

    /**
     * Gets the optional '<code>regionCode</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_region_code() const { return region_code_; }

    /**
     * Gets a modifiable pointer to the optional <code>regionCode</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_regionCode() {
      _have_region_code_ = true;
      return &region_code_;
    }


    /**
     * Sets the '<code>regionCode</code>' attribute.
     *
     * @param[in] value The regionCode parameter instructs the API to return the
     * list of video categories available in the specified country. The
     * parameter value is an ISO 3166-1 alpha-2 country code.
     */
    void set_region_code(const string& value) {
      _have_region_code_ = true;
      region_code_ = value;
    }



    /**
     * Clears the '<code>id</code>' attribute so it is no longer set.
     */
    void clear_id() {
      _have_id_ = false;
      client::ClearCppValueHelper(&id_);
    }


    /**
     * Gets the optional '<code>id</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_id() const { return id_; }

    /**
     * Gets a modifiable pointer to the optional <code>id</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_id() {
      _have_id_ = true;
      return &id_;
    }


    /**
     * Sets the '<code>id</code>' attribute.
     *
     * @param[in] value The id parameter specifies a comma-separated list of
     * video category IDs for the resources that you are retrieving.
     */
    void set_id(const string& value) {
      _have_id_ = true;
      id_ = value;
    }



    /**
     * Clears the '<code>hl</code>' attribute so it is no longer set.
     */
    void clear_hl() {
      _have_hl_ = false;
      client::ClearCppValueHelper(&hl_);
    }


    /**
     * Gets the optional '<code>hl</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_hl() const { return hl_; }

    /**
     * Gets a modifiable pointer to the optional <code>hl</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_hl() {
      _have_hl_ = true;
      return &hl_;
    }


    /**
     * Sets the '<code>hl</code>' attribute.
     *
     * @param[in] value The hl parameter specifies the language that should be
     * used for text values in the API response.
     */
    void set_hl(const string& value) {
      _have_hl_ = true;
      hl_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      VideoCategoryListResponse* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string region_code_;
  string id_;
  string hl_;
  bool _have_region_code_ : 1;
  bool _have_id_ : 1;
  bool _have_hl_ : 1;
  DISALLOW_COPY_AND_ASSIGN(VideoCategoriesResource_ListMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtubepartner
 */
class VideosResource_DeleteMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] id The id parameter specifies the YouTube video ID for the
   * resource that is being deleted. In a video resource, the id property
   * specifies the video's ID.
   *
   */
  VideosResource_DeleteMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~VideosResource_DeleteMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * actual CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


 private:
  string id_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_ : 1;
  DISALLOW_COPY_AND_ASSIGN(VideosResource_DeleteMethod);
};

/**
 * Implements the getRating method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtubepartner
 */
class VideosResource_GetRatingMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] id The id parameter specifies a comma-separated list of the
   * YouTube video ID(s) for the resource(s) for which you are retrieving rating
   * data. In a video resource, the id property specifies the video's ID.
   *
   */
  VideosResource_GetRatingMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~VideosResource_GetRatingMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      VideoGetRatingResponse* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string id_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_ : 1;
  DISALLOW_COPY_AND_ASSIGN(VideosResource_GetRatingMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtube.upload
 * https://www.googleapis.com/auth/youtubepartner
 */
class VideosResource_InsertMethod : public YouTubeServiceBaseRequest {
 public:

  /**
   * The standard constructor takes all the required method parameters.
   *
   * @deprecated in favor constructor that includes the media upload parameters.
   *
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter serves two purposes in this operation.
   * It identifies the properties that the write operation will set as well as
   * the properties that the API response will include.
   *
   * The part names that you can include in the parameter value are snippet,
   * contentDetails, fileDetails, liveStreamingDetails, player,
   * processingDetails, recordingDetails, statistics, status, suggestions, and
   * topicDetails. However, not all of those parts contain properties that can
   * be set when setting or updating a video's metadata. For example, the
   * statistics object encapsulates statistics that YouTube calculates for a
   * video and does not contain values that you can set or modify. If the
   * parameter value specifies a part that does not contain mutable values, that
   * part will still be included in the API response.
   *
   * @param[in] _content_ The data object to insert.
   */
  VideosResource_InsertMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part);

  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter serves two purposes in this operation.
   * It identifies the properties that the write operation will set as well as
   * the properties that the API response will include.
   *
   * The part names that you can include in the parameter value are snippet,
   * contentDetails, fileDetails, liveStreamingDetails, player,
   * processingDetails, recordingDetails, statistics, status, suggestions, and
   * topicDetails. However, not all of those parts contain properties that can
   * be set when setting or updating a video's metadata. For example, the
   * statistics object encapsulates statistics that YouTube calculates for a
   * video and does not contain values that you can set or modify. If the
   * parameter value specifies a part that does not contain mutable values, that
   * part will still be included in the API response.
   *
   * @param[in] _metadata_ The metadata object to insert. If this is NULL then
   * do not upload any metadata.
   * @param[in] _media_content_type_ The content type of the data in the
   * _media_content_reader_.
   * @param[in] _media_content_reader_ The media content to insert. If
   * this is NULL then do not upload any media and ignore _media_content_type_.
   */
  VideosResource_InsertMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part,
        const Video* _metadata_,
        const StringPiece& _media_content_type_,
        client::DataReader* _media_content_reader_);

  /**
   * Standard destructor.
   */
  virtual ~VideosResource_InsertMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }



    /**
     * Clears the '<code>stabilize</code>' attribute so it is no longer set.
     */
    void clear_stabilize() {
      _have_stabilize_ = false;
      client::ClearCppValueHelper(&stabilize_);
    }


    /**
     * Gets the optional '<code>stabilize</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_stabilize() const { return stabilize_; }

    /**
     * Sets the '<code>stabilize</code>' attribute.
     *
     * @param[in] value The stabilize parameter indicates whether YouTube should
     * adjust the video to remove shaky camera motions.
     */
    void set_stabilize(bool value) {
      _have_stabilize_ = true;
      stabilize_ = value;
    }

    /**
     * Clears the '<code>onBehalfOfContentOwnerChannel</code>' attribute so it
     * is no longer set.
     */
    void clear_on_behalf_of_content_owner_channel() {
      _have_on_behalf_of_content_owner_channel_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_channel_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner_channel
     */
    void clear_onBehalfOfContentOwnerChannel() {
      clear_on_behalf_of_content_owner_channel();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner_channel() const { return on_behalf_of_content_owner_channel_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwnerChannel() {
      _have_on_behalf_of_content_owner_channel_ = true;
      return &on_behalf_of_content_owner_channel_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwnerChannel</code>' attribute.
     *
     * @param[in] value This parameter can only be used in a properly authorized
     * request. Note: This parameter is intended exclusively for YouTube content
     * partners.
     *
     * The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel
     * ID of the channel to which a video is being added. This parameter is
     * required when a request specifies a value for the onBehalfOfContentOwner
     * parameter, and it can only be used in conjunction with that parameter. In
     * addition, the request must be authorized using a CMS account that is
     * linked to the content owner that the onBehalfOfContentOwner parameter
     * specifies. Finally, the channel that the onBehalfOfContentOwnerChannel
     * parameter value specifies must be linked to the content owner that the
     * onBehalfOfContentOwner parameter specifies.
     *
     * This parameter is intended for YouTube content partners that own and
     * manage many different YouTube channels. It allows content owners to
     * authenticate once and perform actions on behalf of the channel specified
     * in the parameter value, without having to provide authentication
     * credentials for each separate channel.
     */
    void set_on_behalf_of_content_owner_channel(const string& value) {
      _have_on_behalf_of_content_owner_channel_ = true;
      on_behalf_of_content_owner_channel_ = value;
    }



    /**
     * Clears the '<code>notifySubscribers</code>' attribute so it is no longer
     * set.
     */
    void clear_notify_subscribers() {
      _have_notify_subscribers_ = false;
      client::ClearCppValueHelper(&notify_subscribers_);
    }
    /**
     * @deprecated
     * @see clear_notify_subscribers
     */
    void clear_notifySubscribers() {
      clear_notify_subscribers();
    }

    /**
     * Gets the optional '<code>notifySubscribers</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_notify_subscribers() const { return notify_subscribers_; }

    /**
     * Sets the '<code>notifySubscribers</code>' attribute.
     *
     * @param[in] value The notifySubscribers parameter indicates whether
     * YouTube should send notification to subscribers about the inserted video.
     */
    void set_notify_subscribers(bool value) {
      _have_notify_subscribers_ = true;
      notify_subscribers_ = value;
    }

    /**
     * Clears the '<code>autoLevels</code>' attribute so it is no longer set.
     */
    void clear_auto_levels() {
      _have_auto_levels_ = false;
      client::ClearCppValueHelper(&auto_levels_);
    }
    /**
     * @deprecated
     * @see clear_auto_levels
     */
    void clear_autoLevels() {
      clear_auto_levels();
    }

    /**
     * Gets the optional '<code>autoLevels</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_auto_levels() const { return auto_levels_; }

    /**
     * Sets the '<code>autoLevels</code>' attribute.
     *
     * @param[in] value The autoLevels parameter indicates whether YouTube
     * should automatically enhance the video's lighting and color.
     */
    void set_auto_levels(bool value) {
      _have_auto_levels_ = true;
      auto_levels_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Video* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

  /**
   * Invokes the server with the method.
   *
   * Response detail is available from the underlying http_request.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  virtual util::Status Execute();

  /**
   * Returns MediaUploader for uploading the content.
   */
  client::MediaUploader* media_uploader() {
    return _uploader_.get();
  }

  /**
   * Returns the specification for media upload using the simple protocol.
   */
  static const client::MediaUploadSpec
    SIMPLE_MEDIA_UPLOAD;
  /**
   * Returns the specification for media upload using the resumable protocol.
   */
  static const client::MediaUploadSpec
    RESUMABLE_MEDIA_UPLOAD;

 private:
  string part_;
  string on_behalf_of_content_owner_;
  bool stabilize_;
  string on_behalf_of_content_owner_channel_;
  bool notify_subscribers_;
  bool auto_levels_;
  bool _have_on_behalf_of_content_owner_ : 1;
  bool _have_stabilize_ : 1;
  bool _have_on_behalf_of_content_owner_channel_ : 1;
  bool _have_notify_subscribers_ : 1;
  bool _have_auto_levels_ : 1;
  std::unique_ptr<client::MediaUploader> _uploader_;

  DISALLOW_COPY_AND_ASSIGN(VideosResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtube.readonly
 * https://www.googleapis.com/auth/youtubepartner
 */
class VideosResource_ListMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter specifies a comma-separated list of one
   * or more video resource properties that the API response will include. The
   * part names that you can include in the parameter value are id, snippet,
   * contentDetails, fileDetails, liveStreamingDetails, player,
   * processingDetails, recordingDetails, statistics, status, suggestions, and
   * topicDetails.
   *
   * If the parameter identifies a property that contains child properties, the
   * child properties will be included in the response. For example, in a video
   * resource, the snippet property contains the channelId, title, description,
   * tags, and categoryId properties. As such, if you set part=snippet, the API
   * response will contain all of those properties.
   *
   */
  VideosResource_ListMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part);

  /**
   * Standard destructor.
   */
  virtual ~VideosResource_ListMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }



    /**
     * Clears the '<code>regionCode</code>' attribute so it is no longer set.
     */
    void clear_region_code() {
      _have_region_code_ = false;
      client::ClearCppValueHelper(&region_code_);
    }
    /**
     * @deprecated
     * @see clear_region_code
     */
    void clear_regionCode() {
      clear_region_code();
    }

    /**
     * Gets the optional '<code>regionCode</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_region_code() const { return region_code_; }

    /**
     * Gets a modifiable pointer to the optional <code>regionCode</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_regionCode() {
      _have_region_code_ = true;
      return &region_code_;
    }


    /**
     * Sets the '<code>regionCode</code>' attribute.
     *
     * @param[in] value The regionCode parameter instructs the API to select a
     * video chart available in the specified region. This parameter can only be
     * used in conjunction with the chart parameter. The parameter value is an
     * ISO 3166-1 alpha-2 country code.
     */
    void set_region_code(const string& value) {
      _have_region_code_ = true;
      region_code_ = value;
    }



    /**
     * Clears the '<code>locale</code>' attribute so it is no longer set.
     */
    void clear_locale() {
      _have_locale_ = false;
      client::ClearCppValueHelper(&locale_);
    }


    /**
     * Gets the optional '<code>locale</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_locale() const { return locale_; }

    /**
     * Gets a modifiable pointer to the optional <code>locale</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_locale() {
      _have_locale_ = true;
      return &locale_;
    }


    /**
     * Sets the '<code>locale</code>' attribute.
     * @deprecated
     *
     * @param[in] value DEPRECATED.
     */
    void set_locale(const string& value) {
      _have_locale_ = true;
      locale_ = value;
    }



    /**
     * Clears the '<code>videoCategoryId</code>' attribute so it is no longer
     * set.
     */
    void clear_video_category_id() {
      _have_video_category_id_ = false;
      client::ClearCppValueHelper(&video_category_id_);
    }
    /**
     * @deprecated
     * @see clear_video_category_id
     */
    void clear_videoCategoryId() {
      clear_video_category_id();
    }

    /**
     * Gets the optional '<code>videoCategoryId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_video_category_id() const { return video_category_id_; }

    /**
     * Gets a modifiable pointer to the optional <code>videoCategoryId</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_videoCategoryId() {
      _have_video_category_id_ = true;
      return &video_category_id_;
    }


    /**
     * Sets the '<code>videoCategoryId</code>' attribute.
     *
     * @param[in] value The videoCategoryId parameter identifies the video
     * category for which the chart should be retrieved. This parameter can only
     * be used in conjunction with the chart parameter. By default, charts are
     * not restricted to a particular category.
     */
    void set_video_category_id(const string& value) {
      _have_video_category_id_ = true;
      video_category_id_ = value;
    }



    /**
     * Clears the '<code>chart</code>' attribute so it is no longer set.
     */
    void clear_chart() {
      _have_chart_ = false;
      client::ClearCppValueHelper(&chart_);
    }


    /**
     * Gets the optional '<code>chart</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_chart() const { return chart_; }

    /**
     * Gets a modifiable pointer to the optional <code>chart</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_chart() {
      _have_chart_ = true;
      return &chart_;
    }


    /**
     * Sets the '<code>chart</code>' attribute.
     *
     * @param[in] value The chart parameter identifies the chart that you want
     * to retrieve.
     */
    void set_chart(const string& value) {
      _have_chart_ = true;
      chart_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }
    /**
     * @deprecated
     * @see clear_max_results
     */
    void clear_maxResults() {
      clear_max_results();
    }

    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maxResults parameter specifies the maximum number of
     * items that should be returned in the result set.
     *
     * Note: This parameter is supported for use in conjunction with the
     * myRating parameter, but it is not supported for use in conjunction with
     * the id parameter.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }
    /**
     * @deprecated
     * @see clear_page_token
     */
    void clear_pageToken() {
      clear_page_token();
    }

    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value The pageToken parameter identifies a specific page in
     * the result set that should be returned. In an API response, the
     * nextPageToken and prevPageToken properties identify other pages that
     * could be retrieved.
     *
     * Note: This parameter is supported for use in conjunction with the
     * myRating parameter, but it is not supported for use in conjunction with
     * the id parameter.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>myRating</code>' attribute so it is no longer set.
     */
    void clear_my_rating() {
      _have_my_rating_ = false;
      client::ClearCppValueHelper(&my_rating_);
    }
    /**
     * @deprecated
     * @see clear_my_rating
     */
    void clear_myRating() {
      clear_my_rating();
    }

    /**
     * Gets the optional '<code>myRating</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_my_rating() const { return my_rating_; }

    /**
     * Gets a modifiable pointer to the optional <code>myRating</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_myRating() {
      _have_my_rating_ = true;
      return &my_rating_;
    }


    /**
     * Sets the '<code>myRating</code>' attribute.
     *
     * @param[in] value Set this parameter's value to like or dislike to
     * instruct the API to only return videos liked or disliked by the
     * authenticated user.
     */
    void set_my_rating(const string& value) {
      _have_my_rating_ = true;
      my_rating_ = value;
    }



    /**
     * Clears the '<code>id</code>' attribute so it is no longer set.
     */
    void clear_id() {
      _have_id_ = false;
      client::ClearCppValueHelper(&id_);
    }


    /**
     * Gets the optional '<code>id</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_id() const { return id_; }

    /**
     * Gets a modifiable pointer to the optional <code>id</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_id() {
      _have_id_ = true;
      return &id_;
    }


    /**
     * Sets the '<code>id</code>' attribute.
     *
     * @param[in] value The id parameter specifies a comma-separated list of the
     * YouTube video ID(s) for the resource(s) that are being retrieved. In a
     * video resource, the id property specifies the video's ID.
     */
    void set_id(const string& value) {
      _have_id_ = true;
      id_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      VideoListResponse* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string on_behalf_of_content_owner_;
  string region_code_;
  string locale_;
  string video_category_id_;
  string chart_;
  uint32 max_results_;
  string page_token_;
  string my_rating_;
  string id_;
  bool _have_on_behalf_of_content_owner_ : 1;
  bool _have_region_code_ : 1;
  bool _have_locale_ : 1;
  bool _have_video_category_id_ : 1;
  bool _have_chart_ : 1;
  bool _have_max_results_ : 1;
  bool _have_page_token_ : 1;
  bool _have_my_rating_ : 1;
  bool _have_id_ : 1;
  DISALLOW_COPY_AND_ASSIGN(VideosResource_ListMethod);
};

typedef client::ServiceRequestPager<
            VideosResource_ListMethod,
            VideoListResponse>
        VideosResource_ListMethodPager;

/**
 * Implements the rate method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtubepartner
 */
class VideosResource_RateMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] id The id parameter specifies the YouTube video ID of the video
   * that is being rated or having its rating removed.
   *
   * @param[in] rating Specifies the rating to record.
   *
   */
  VideosResource_RateMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& id,
        const StringPiece& rating);

  /**
   * Standard destructor.
   */
  virtual ~VideosResource_RateMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


 private:
  string id_;
  string rating_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_ : 1;
  DISALLOW_COPY_AND_ASSIGN(VideosResource_RateMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtubepartner
 */
class VideosResource_UpdateMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] part The part parameter serves two purposes in this operation.
   * It identifies the properties that the write operation will set as well as
   * the properties that the API response will include.
   *
   * The part names that you can include in the parameter value are snippet,
   * contentDetails, fileDetails, liveStreamingDetails, player,
   * processingDetails, recordingDetails, statistics, status, suggestions, and
   * topicDetails.
   *
   * Note that this method will override the existing values for all of the
   * mutable properties that are contained in any parts that the parameter value
   * specifies. For example, a video's privacy setting is contained in the
   * status part. As such, if your request is updating a private video, and the
   * request's part parameter value includes the status part, the video's
   * privacy setting will be updated to whatever value the request body
   * specifies. If the request body does not specify a value, the existing
   * privacy setting will be removed and the video will revert to the default
   * privacy setting.
   *
   * In addition, not all of those parts contain properties that can be set when
   * setting or updating a video's metadata. For example, the statistics object
   * encapsulates statistics that YouTube calculates for a video and does not
   * contain values that you can set or modify. If the parameter value specifies
   * a part that does not contain mutable values, that part will still be
   * included in the API response.
   *
   * @param[in] _content_ The data object to update.
   *
   */
  VideosResource_UpdateMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& part,
        const Video& _content_
    );

  /**
   * Standard destructor.
   */
  virtual ~VideosResource_UpdateMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value Note: This parameter is intended exclusively for YouTube
     * content partners.
     *
     * The onBehalfOfContentOwner parameter indicates that the request's
     * authorization credentials identify a YouTube CMS user who is acting on
     * behalf of the content owner specified in the parameter value. This
     * parameter is intended for YouTube content partners that own and manage
     * many different YouTube channels. It allows content owners to authenticate
     * once and get access to all their video and channel data, without having
     * to provide authentication credentials for each individual channel. The
     * actual CMS account that the user authenticates with must be linked to the
     * specified YouTube content owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Video* data) {
    return YouTubeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string part_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(VideosResource_UpdateMethod);
};



/**
 * Implements the set method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtube.upload
 * https://www.googleapis.com/auth/youtubepartner
 */
class WatermarksResource_SetMethod : public YouTubeServiceBaseRequest {
 public:

  /**
   * The standard constructor takes all the required method parameters.
   *
   * @deprecated in favor constructor that includes the media upload parameters.
   *
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] channel_id The channelId parameter specifies a YouTube channel
   * ID for which the watermark is being provided.
   *
   * @param[in] _content_ The data object to set.
   */
  WatermarksResource_SetMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& channel_id);

  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] channel_id The channelId parameter specifies a YouTube channel
   * ID for which the watermark is being provided.
   *
   * @param[in] _metadata_ The metadata object to set. If this is NULL then do
   * not upload any metadata.
   * @param[in] _media_content_type_ The content type of the data in the
   * _media_content_reader_.
   * @param[in] _media_content_reader_ The media content to set. If
   * this is NULL then do not upload any media and ignore _media_content_type_.
   */
  WatermarksResource_SetMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& channel_id,
        const InvideoBranding* _metadata_,
        const StringPiece& _media_content_type_,
        client::DataReader* _media_content_reader_);

  /**
   * Standard destructor.
   */
  virtual ~WatermarksResource_SetMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value The onBehalfOfContentOwner parameter indicates that the
     * authenticated user is acting on behalf of the content owner specified in
     * the parameter value. This parameter is intended for YouTube content
     * partners that own and manage many different YouTube channels. It allows
     * content owners to authenticate once and get access to all their video and
     * channel data, without having to provide authentication credentials for
     * each individual channel. The actual CMS account that the user
     * authenticates with needs to be linked to the specified YouTube content
     * owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Invokes the server with the method.
   *
   * Response detail is available from the underlying http_request.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  virtual util::Status Execute();

  /**
   * Returns MediaUploader for uploading the content.
   */
  client::MediaUploader* media_uploader() {
    return _uploader_.get();
  }

  /**
   * Returns the specification for media upload using the simple protocol.
   */
  static const client::MediaUploadSpec
    SIMPLE_MEDIA_UPLOAD;
  /**
   * Returns the specification for media upload using the resumable protocol.
   */
  static const client::MediaUploadSpec
    RESUMABLE_MEDIA_UPLOAD;

 private:
  string channel_id_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_ : 1;
  std::unique_ptr<client::MediaUploader> _uploader_;

  DISALLOW_COPY_AND_ASSIGN(WatermarksResource_SetMethod);
};

/**
 * Implements the unset method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/youtube
 * https://www.googleapis.com/auth/youtubepartner
 */
class WatermarksResource_UnsetMethod : public YouTubeServiceBaseRequest {
 public:


  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] channel_id The channelId parameter specifies a YouTube channel
   * ID for which the watermark is being unset.
   *
   */
  WatermarksResource_UnsetMethod(
        const YouTubeService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& channel_id);

  /**
   * Standard destructor.
   */
  virtual ~WatermarksResource_UnsetMethod();


    /**
     * Clears the '<code>onBehalfOfContentOwner</code>' attribute so it is no
     * longer set.
     */
    void clear_on_behalf_of_content_owner() {
      _have_on_behalf_of_content_owner_ = false;
      client::ClearCppValueHelper(&on_behalf_of_content_owner_);
    }
    /**
     * @deprecated
     * @see clear_on_behalf_of_content_owner
     */
    void clear_onBehalfOfContentOwner() {
      clear_on_behalf_of_content_owner();
    }

    /**
     * Gets the optional '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_on_behalf_of_content_owner() const { return on_behalf_of_content_owner_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>onBehalfOfContentOwner</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_onBehalfOfContentOwner() {
      _have_on_behalf_of_content_owner_ = true;
      return &on_behalf_of_content_owner_;
    }


    /**
     * Sets the '<code>onBehalfOfContentOwner</code>' attribute.
     *
     * @param[in] value The onBehalfOfContentOwner parameter indicates that the
     * authenticated user is acting on behalf of the content owner specified in
     * the parameter value. This parameter is intended for YouTube content
     * partners that own and manage many different YouTube channels. It allows
     * content owners to authenticate once and get access to all their video and
     * channel data, without having to provide authentication credentials for
     * each individual channel. The actual CMS account that the user
     * authenticates with needs to be linked to the specified YouTube content
     * owner.
     */
    void set_on_behalf_of_content_owner(const string& value) {
      _have_on_behalf_of_content_owner_ = true;
      on_behalf_of_content_owner_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


 private:
  string channel_id_;
  string on_behalf_of_content_owner_;
  bool _have_on_behalf_of_content_owner_ : 1;
  DISALLOW_COPY_AND_ASSIGN(WatermarksResource_UnsetMethod);
};



/**
 * Service definition for YouTubeService (v3).
 *
 * @ingroup ServiceClass
 *
 * For more information about this service, see the API Documentation at
 * <a href='https://developers.google.com/youtube/v3'>'https://developers.google.com/youtube/v3</a>
 */
class YouTubeService : public client::ClientService {
 public:
   /**
    * The name of the API that this was generated from.
    */
   static const StringPiece googleapis_API_NAME;

   /**
    * The version of the API that this interface was generated from.
    */
   static const StringPiece googleapis_API_VERSION;

   /**
    * The code generator used to generate this API.
    */
   static const StringPiece googleapis_API_GENERATOR;


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class ActivitiesResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      ActivitiesResource(YouTubeService* service);

      /**
       * Standard destructor.
       */
      ~ActivitiesResource() {}


      /**
       * Creates a new ActivitiesResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter serves two purposes in this
       * operation. It identifies the properties that the write operation will
       * set as well as the properties that the API response will include.
       *
       * The part names that you can include in the parameter value are snippet
       * and contentDetails.
       * @param[in] _content_ The data object to insert.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ActivitiesResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part,
          const Activity& _content_) const;

      /**
       * Creates a new ActivitiesResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more activity resource properties that the API response will
       * include. The part names that you can include in the parameter value are
       * id, snippet, and contentDetails.
       *
       * If the parameter identifies a property that contains child properties,
       * the child properties will be included in the response. For example, in
       * a activity resource, the snippet property contains other properties
       * that identify the type of activity, a display title for the activity,
       * and so forth. If you set part=snippet, the API response will also
       * contain all of those nested properties.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ActivitiesResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more activity resource properties that the API response will
       * include. The part names that you can include in the parameter value are
       * id, snippet, and contentDetails.
       *
       * If the parameter identifies a property that contains child properties,
       * the child properties will be included in the response. For example, in
       * a activity resource, the snippet property contains other properties
       * that identify the type of activity, a display title for the activity,
       * and so forth. If you set part=snippet, the API response will also
       * contain all of those nested properties.
       *
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      ActivitiesResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

     private:
      YouTubeService* service_;

      DISALLOW_COPY_AND_ASSIGN(ActivitiesResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class ChannelBannersResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      ChannelBannersResource(YouTubeService* service);

      /**
       * Standard destructor.
       */
      ~ChannelBannersResource() {}



      /**
       * Creates a new ChannelBannersResource_InsertMethod instance.
       * @deprecated
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ChannelBannersResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_) const;

      /**
       * Creates a new ChannelBannersResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] _metadata_ The metadata object to insert. If this is NULL
       * then do not upload any metadata.
       * @param[in] _media_content_type_ The content type of the data in the
       * _media_content_reader_.
       * @param[in] _media_content_reader_ The media content to insert. If
       * this is NULL then do not upload any media and ignore
       * _media_content_type_.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ChannelBannersResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const ChannelBannerResource* _metadata_,
          const StringPiece& _media_content_type_,
          client::DataReader* _media_content_reader_
      ) const;

     private:
      YouTubeService* service_;

      DISALLOW_COPY_AND_ASSIGN(ChannelBannersResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class ChannelSectionsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      ChannelSectionsResource(YouTubeService* service);

      /**
       * Standard destructor.
       */
      ~ChannelSectionsResource() {}


      /**
       * Creates a new ChannelSectionsResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] id The id parameter specifies the YouTube channelSection ID
       * for the resource that is being deleted. In a channelSection resource,
       * the id property specifies the YouTube channelSection ID.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ChannelSectionsResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& id) const;

      /**
       * Creates a new ChannelSectionsResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter serves two purposes in this
       * operation. It identifies the properties that the write operation will
       * set as well as the properties that the API response will include.
       *
       * The part names that you can include in the parameter value are snippet
       * and contentDetails.
       * @param[in] _content_ The data object to insert.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ChannelSectionsResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part,
          const ChannelSection& _content_) const;

      /**
       * Creates a new ChannelSectionsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more channelSection resource properties that the API response
       * will include. The part names that you can include in the parameter
       * value are id, snippet, and contentDetails.
       *
       * If the parameter identifies a property that contains child properties,
       * the child properties will be included in the response. For example, in
       * a channelSection resource, the snippet property contains other
       * properties, such as a display title for the channelSection. If you set
       * part=snippet, the API response will also contain all of those nested
       * properties.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ChannelSectionsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

      /**
       * Creates a new ChannelSectionsResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter serves two purposes in this
       * operation. It identifies the properties that the write operation will
       * set as well as the properties that the API response will include.
       *
       * The part names that you can include in the parameter value are snippet
       * and contentDetails.
       * @param[in] _content_ The data object to update.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ChannelSectionsResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part,
          const ChannelSection& _content_) const;

     private:
      YouTubeService* service_;

      DISALLOW_COPY_AND_ASSIGN(ChannelSectionsResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class ChannelsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      ChannelsResource(YouTubeService* service);

      /**
       * Standard destructor.
       */
      ~ChannelsResource() {}


      /**
       * Creates a new ChannelsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more channel resource properties that the API response will
       * include. The part names that you can include in the parameter value are
       * id, snippet, contentDetails, statistics, topicDetails, and
       * invideoPromotion.
       *
       * If the parameter identifies a property that contains child properties,
       * the child properties will be included in the response. For example, in
       * a channel resource, the contentDetails property contains other
       * properties, such as the uploads properties. As such, if you set
       * part=contentDetails, the API response will also contain all of those
       * nested properties.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ChannelsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more channel resource properties that the API response will
       * include. The part names that you can include in the parameter value are
       * id, snippet, contentDetails, statistics, topicDetails, and
       * invideoPromotion.
       *
       * If the parameter identifies a property that contains child properties,
       * the child properties will be included in the response. For example, in
       * a channel resource, the contentDetails property contains other
       * properties, such as the uploads properties. As such, if you set
       * part=contentDetails, the API response will also contain all of those
       * nested properties.
       *
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      ChannelsResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

      /**
       * Creates a new ChannelsResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter serves two purposes in this
       * operation. It identifies the properties that the write operation will
       * set as well as the properties that the API response will include.
       *
       * The part names that you can include in the parameter value are id and
       * invideoPromotion.
       *
       * Note that this method will override the existing values for all of the
       * mutable properties that are contained in any parts that the parameter
       * value specifies.
       * @param[in] _content_ The data object to update.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ChannelsResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part,
          const Channel& _content_) const;

     private:
      YouTubeService* service_;

      DISALLOW_COPY_AND_ASSIGN(ChannelsResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class GuideCategoriesResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      GuideCategoriesResource(YouTubeService* service);

      /**
       * Standard destructor.
       */
      ~GuideCategoriesResource() {}


      /**
       * Creates a new GuideCategoriesResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more guideCategory resource properties that the API response
       * will include. The part names that you can include in the parameter
       * value are id and snippet.
       *
       * If the parameter identifies a property that contains child properties,
       * the child properties will be included in the response. For example, in
       * a guideCategory resource, the snippet property contains other
       * properties, such as the category's title. If you set part=snippet, the
       * API response will also contain all of those nested properties.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      GuideCategoriesResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

     private:
      YouTubeService* service_;

      DISALLOW_COPY_AND_ASSIGN(GuideCategoriesResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class I18nLanguagesResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      I18nLanguagesResource(YouTubeService* service);

      /**
       * Standard destructor.
       */
      ~I18nLanguagesResource() {}


      /**
       * Creates a new I18nLanguagesResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more i18nLanguage resource properties that the API response will
       * include. The part names that you can include in the parameter value are
       * id and snippet.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      I18nLanguagesResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

     private:
      YouTubeService* service_;

      DISALLOW_COPY_AND_ASSIGN(I18nLanguagesResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class I18nRegionsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      I18nRegionsResource(YouTubeService* service);

      /**
       * Standard destructor.
       */
      ~I18nRegionsResource() {}


      /**
       * Creates a new I18nRegionsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more i18nRegion resource properties that the API response will
       * include. The part names that you can include in the parameter value are
       * id and snippet.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      I18nRegionsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

     private:
      YouTubeService* service_;

      DISALLOW_COPY_AND_ASSIGN(I18nRegionsResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class LiveBroadcastsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      LiveBroadcastsResource(YouTubeService* service);

      /**
       * Standard destructor.
       */
      ~LiveBroadcastsResource() {}


      /**
       * Creates a new LiveBroadcastsResource_BindMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] id The id parameter specifies the unique ID of the broadcast
       * that is being bound to a video stream.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more liveBroadcast resource properties that the API response
       * will include. The part names that you can include in the parameter
       * value are id, snippet, contentDetails, and status.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      LiveBroadcastsResource_BindMethod* NewBindMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& id,
          const StringPiece& part) const;

      /**
       * Creates a new LiveBroadcastsResource_ControlMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] id The id parameter specifies the YouTube live broadcast ID
       * that uniquely identifies the broadcast in which the slate is being
       * updated.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more liveBroadcast resource properties that the API response
       * will include. The part names that you can include in the parameter
       * value are id, snippet, contentDetails, and status.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      LiveBroadcastsResource_ControlMethod* NewControlMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& id,
          const StringPiece& part) const;

      /**
       * Creates a new LiveBroadcastsResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] id The id parameter specifies the YouTube live broadcast ID
       * for the resource that is being deleted.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      LiveBroadcastsResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& id) const;

      /**
       * Creates a new LiveBroadcastsResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter serves two purposes in this
       * operation. It identifies the properties that the write operation will
       * set as well as the properties that the API response will include.
       *
       * The part properties that you can include in the parameter value are id,
       * snippet, contentDetails, and status.
       * @param[in] _content_ The data object to insert.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      LiveBroadcastsResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part,
          const LiveBroadcast& _content_) const;

      /**
       * Creates a new LiveBroadcastsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more liveBroadcast resource properties that the API response
       * will include. The part names that you can include in the parameter
       * value are id, snippet, contentDetails, and status.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      LiveBroadcastsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more liveBroadcast resource properties that the API response
       * will include. The part names that you can include in the parameter
       * value are id, snippet, contentDetails, and status.
       *
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      LiveBroadcastsResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

      /**
       * Creates a new LiveBroadcastsResource_TransitionMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] broadcast_status The broadcastStatus parameter identifies
       * the state to which the broadcast is changing. Note that to transition a
       * broadcast to either the testing or live state, the status.streamStatus
       * must be active for the stream that the broadcast is bound to.
       * @param[in] id The id parameter specifies the unique ID of the broadcast
       * that is transitioning to another status.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more liveBroadcast resource properties that the API response
       * will include. The part names that you can include in the parameter
       * value are id, snippet, contentDetails, and status.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      LiveBroadcastsResource_TransitionMethod* NewTransitionMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& broadcast_status,
          const StringPiece& id,
          const StringPiece& part) const;

      /**
       * Creates a new LiveBroadcastsResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter serves two purposes in this
       * operation. It identifies the properties that the write operation will
       * set as well as the properties that the API response will include.
       *
       * The part properties that you can include in the parameter value are id,
       * snippet, contentDetails, and status.
       *
       * Note that this method will override the existing values for all of the
       * mutable properties that are contained in any parts that the parameter
       * value specifies. For example, a broadcast's privacy status is defined
       * in the status part. As such, if your request is updating a private or
       * unlisted broadcast, and the request's part parameter value includes the
       * status part, the broadcast's privacy setting will be updated to
       * whatever value the request body specifies. If the request body does not
       * specify a value, the existing privacy setting will be removed and the
       * broadcast will revert to the default privacy setting.
       * @param[in] _content_ The data object to update.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      LiveBroadcastsResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part,
          const LiveBroadcast& _content_) const;

     private:
      YouTubeService* service_;

      DISALLOW_COPY_AND_ASSIGN(LiveBroadcastsResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class LiveStreamsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      LiveStreamsResource(YouTubeService* service);

      /**
       * Standard destructor.
       */
      ~LiveStreamsResource() {}


      /**
       * Creates a new LiveStreamsResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] id The id parameter specifies the YouTube live stream ID for
       * the resource that is being deleted.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      LiveStreamsResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& id) const;

      /**
       * Creates a new LiveStreamsResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter serves two purposes in this
       * operation. It identifies the properties that the write operation will
       * set as well as the properties that the API response will include.
       *
       * The part properties that you can include in the parameter value are id,
       * snippet, cdn, and status.
       * @param[in] _content_ The data object to insert.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      LiveStreamsResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part,
          const LiveStream& _content_) const;

      /**
       * Creates a new LiveStreamsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more liveStream resource properties that the API response will
       * include. The part names that you can include in the parameter value are
       * id, snippet, cdn, and status.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      LiveStreamsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more liveStream resource properties that the API response will
       * include. The part names that you can include in the parameter value are
       * id, snippet, cdn, and status.
       *
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      LiveStreamsResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

      /**
       * Creates a new LiveStreamsResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter serves two purposes in this
       * operation. It identifies the properties that the write operation will
       * set as well as the properties that the API response will include.
       *
       * The part properties that you can include in the parameter value are id,
       * snippet, cdn, and status.
       *
       * Note that this method will override the existing values for all of the
       * mutable properties that are contained in any parts that the parameter
       * value specifies. If the request body does not specify a value for a
       * mutable property, the existing value for that property will be removed.
       * @param[in] _content_ The data object to update.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      LiveStreamsResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part,
          const LiveStream& _content_) const;

     private:
      YouTubeService* service_;

      DISALLOW_COPY_AND_ASSIGN(LiveStreamsResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class PlaylistItemsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      PlaylistItemsResource(YouTubeService* service);

      /**
       * Standard destructor.
       */
      ~PlaylistItemsResource() {}


      /**
       * Creates a new PlaylistItemsResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] id The id parameter specifies the YouTube playlist item ID
       * for the playlist item that is being deleted. In a playlistItem
       * resource, the id property specifies the playlist item's ID.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      PlaylistItemsResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& id) const;

      /**
       * Creates a new PlaylistItemsResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter serves two purposes in this
       * operation. It identifies the properties that the write operation will
       * set as well as the properties that the API response will include.
       *
       * The part names that you can include in the parameter value are snippet,
       * contentDetails, and status.
       * @param[in] _content_ The data object to insert.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      PlaylistItemsResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part,
          const PlaylistItem& _content_) const;

      /**
       * Creates a new PlaylistItemsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more playlistItem resource properties that the API response will
       * include. The part names that you can include in the parameter value are
       * id, snippet, contentDetails, and status.
       *
       * If the parameter identifies a property that contains child properties,
       * the child properties will be included in the response. For example, in
       * a playlistItem resource, the snippet property contains numerous fields,
       * including the title, description, position, and resourceId properties.
       * As such, if you set part=snippet, the API response will contain all of
       * those properties.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      PlaylistItemsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more playlistItem resource properties that the API response will
       * include. The part names that you can include in the parameter value are
       * id, snippet, contentDetails, and status.
       *
       * If the parameter identifies a property that contains child properties,
       * the child properties will be included in the response. For example, in
       * a playlistItem resource, the snippet property contains numerous fields,
       * including the title, description, position, and resourceId properties.
       * As such, if you set part=snippet, the API response will contain all of
       * those properties.
       *
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      PlaylistItemsResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

      /**
       * Creates a new PlaylistItemsResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter serves two purposes in this
       * operation. It identifies the properties that the write operation will
       * set as well as the properties that the API response will include.
       *
       * The part names that you can include in the parameter value are snippet,
       * contentDetails, and status.
       *
       * Note that this method will override the existing values for all of the
       * mutable properties that are contained in any parts that the parameter
       * value specifies. For example, a playlist item can specify a start time
       * and end time, which identify the times portion of the video that should
       * play when users watch the video in the playlist. If your request is
       * updating a playlist item that sets these values, and the request's part
       * parameter value includes the contentDetails part, the playlist item's
       * start and end times will be updated to whatever value the request body
       * specifies. If the request body does not specify values, the existing
       * start and end times will be removed and replaced with the default
       * settings.
       * @param[in] _content_ The data object to update.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      PlaylistItemsResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part,
          const PlaylistItem& _content_) const;

     private:
      YouTubeService* service_;

      DISALLOW_COPY_AND_ASSIGN(PlaylistItemsResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class PlaylistsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      PlaylistsResource(YouTubeService* service);

      /**
       * Standard destructor.
       */
      ~PlaylistsResource() {}


      /**
       * Creates a new PlaylistsResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] id The id parameter specifies the YouTube playlist ID for
       * the playlist that is being deleted. In a playlist resource, the id
       * property specifies the playlist's ID.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      PlaylistsResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& id) const;

      /**
       * Creates a new PlaylistsResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter serves two purposes in this
       * operation. It identifies the properties that the write operation will
       * set as well as the properties that the API response will include.
       *
       * The part names that you can include in the parameter value are snippet
       * and status.
       * @param[in] _content_ The data object to insert.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      PlaylistsResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part,
          const Playlist& _content_) const;

      /**
       * Creates a new PlaylistsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more playlist resource properties that the API response will
       * include. The part names that you can include in the parameter value are
       * id, snippet, status, and contentDetails.
       *
       * If the parameter identifies a property that contains child properties,
       * the child properties will be included in the response. For example, in
       * a playlist resource, the snippet property contains properties like
       * author, title, description, tags, and timeCreated. As such, if you set
       * part=snippet, the API response will contain all of those properties.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      PlaylistsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more playlist resource properties that the API response will
       * include. The part names that you can include in the parameter value are
       * id, snippet, status, and contentDetails.
       *
       * If the parameter identifies a property that contains child properties,
       * the child properties will be included in the response. For example, in
       * a playlist resource, the snippet property contains properties like
       * author, title, description, tags, and timeCreated. As such, if you set
       * part=snippet, the API response will contain all of those properties.
       *
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      PlaylistsResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

      /**
       * Creates a new PlaylistsResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter serves two purposes in this
       * operation. It identifies the properties that the write operation will
       * set as well as the properties that the API response will include.
       *
       * The part names that you can include in the parameter value are snippet
       * and status.
       *
       * Note that this method will override the existing values for all of the
       * mutable properties that are contained in any parts that the parameter
       * value specifies. For example, a playlist's privacy setting is contained
       * in the status part. As such, if your request is updating a private
       * playlist, and the request's part parameter value includes the status
       * part, the playlist's privacy setting will be updated to whatever value
       * the request body specifies. If the request body does not specify a
       * value, the existing privacy setting will be removed and the playlist
       * will revert to the default privacy setting.
       * @param[in] _content_ The data object to update.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      PlaylistsResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part,
          const Playlist& _content_) const;

     private:
      YouTubeService* service_;

      DISALLOW_COPY_AND_ASSIGN(PlaylistsResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class SearchResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      SearchResource(YouTubeService* service);

      /**
       * Standard destructor.
       */
      ~SearchResource() {}


      /**
       * Creates a new SearchResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more search resource properties that the API response will
       * include. The part names that you can include in the parameter value are
       * id and snippet.
       *
       * If the parameter identifies a property that contains child properties,
       * the child properties will be included in the response. For example, in
       * a search result, the snippet property contains other properties that
       * identify the result's title, description, and so forth. If you set
       * part=snippet, the API response will also contain all of those nested
       * properties.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      SearchResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more search resource properties that the API response will
       * include. The part names that you can include in the parameter value are
       * id and snippet.
       *
       * If the parameter identifies a property that contains child properties,
       * the child properties will be included in the response. For example, in
       * a search result, the snippet property contains other properties that
       * identify the result's title, description, and so forth. If you set
       * part=snippet, the API response will also contain all of those nested
       * properties.
       *
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      SearchResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

     private:
      YouTubeService* service_;

      DISALLOW_COPY_AND_ASSIGN(SearchResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class SubscriptionsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      SubscriptionsResource(YouTubeService* service);

      /**
       * Standard destructor.
       */
      ~SubscriptionsResource() {}


      /**
       * Creates a new SubscriptionsResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] id The id parameter specifies the YouTube subscription ID
       * for the resource that is being deleted. In a subscription resource, the
       * id property specifies the YouTube subscription ID.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      SubscriptionsResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& id) const;

      /**
       * Creates a new SubscriptionsResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter serves two purposes in this
       * operation. It identifies the properties that the write operation will
       * set as well as the properties that the API response will include.
       *
       * The part names that you can include in the parameter value are snippet
       * and contentDetails.
       * @param[in] _content_ The data object to insert.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      SubscriptionsResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part,
          const Subscription& _content_) const;

      /**
       * Creates a new SubscriptionsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more subscription resource properties that the API response will
       * include. The part names that you can include in the parameter value are
       * id, snippet, and contentDetails.
       *
       * If the parameter identifies a property that contains child properties,
       * the child properties will be included in the response. For example, in
       * a subscription resource, the snippet property contains other
       * properties, such as a display title for the subscription. If you set
       * part=snippet, the API response will also contain all of those nested
       * properties.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      SubscriptionsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more subscription resource properties that the API response will
       * include. The part names that you can include in the parameter value are
       * id, snippet, and contentDetails.
       *
       * If the parameter identifies a property that contains child properties,
       * the child properties will be included in the response. For example, in
       * a subscription resource, the snippet property contains other
       * properties, such as a display title for the subscription. If you set
       * part=snippet, the API response will also contain all of those nested
       * properties.
       *
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      SubscriptionsResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

     private:
      YouTubeService* service_;

      DISALLOW_COPY_AND_ASSIGN(SubscriptionsResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class ThumbnailsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      ThumbnailsResource(YouTubeService* service);

      /**
       * Standard destructor.
       */
      ~ThumbnailsResource() {}


      /**
       * Creates a new ThumbnailsResource_SetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] video_id The videoId parameter specifies a YouTube video ID
       * for which the custom video thumbnail is being provided.
       * @param[in] _media_content_type_ The content type of the data in the
       * _media_content_reader_.
       * @param[in] _media_content_reader_ The media content to set. If
       * this is NULL then do not upload any media and ignore
       * _media_content_type_.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ThumbnailsResource_SetMethod* NewSetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& video_id,
          const StringPiece& _media_content_type_,
          client::DataReader* _media_content_reader_) const;

     private:
      YouTubeService* service_;

      DISALLOW_COPY_AND_ASSIGN(ThumbnailsResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class VideoCategoriesResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      VideoCategoriesResource(YouTubeService* service);

      /**
       * Standard destructor.
       */
      ~VideoCategoriesResource() {}


      /**
       * Creates a new VideoCategoriesResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter specifies the videoCategory resource
       * parts that the API response will include. Supported values are id and
       * snippet.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      VideoCategoriesResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

     private:
      YouTubeService* service_;

      DISALLOW_COPY_AND_ASSIGN(VideoCategoriesResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class VideosResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      VideosResource(YouTubeService* service);

      /**
       * Standard destructor.
       */
      ~VideosResource() {}


      /**
       * Creates a new VideosResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] id The id parameter specifies the YouTube video ID for the
       * resource that is being deleted. In a video resource, the id property
       * specifies the video's ID.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      VideosResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& id) const;

      /**
       * Creates a new VideosResource_GetRatingMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] id The id parameter specifies a comma-separated list of the
       * YouTube video ID(s) for the resource(s) for which you are retrieving
       * rating data. In a video resource, the id property specifies the video's
       * ID.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      VideosResource_GetRatingMethod* NewGetRatingMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& id) const;


      /**
       * Creates a new VideosResource_InsertMethod instance.
       * @deprecated
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter serves two purposes in this
       * operation. It identifies the properties that the write operation will
       * set as well as the properties that the API response will include.
       *
       * The part names that you can include in the parameter value are snippet,
       * contentDetails, fileDetails, liveStreamingDetails, player,
       * processingDetails, recordingDetails, statistics, status, suggestions,
       * and topicDetails. However, not all of those parts contain properties
       * that can be set when setting or updating a video's metadata. For
       * example, the statistics object encapsulates statistics that YouTube
       * calculates for a video and does not contain values that you can set or
       * modify. If the parameter value specifies a part that does not contain
       * mutable values, that part will still be included in the API response.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      VideosResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

      /**
       * Creates a new VideosResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter serves two purposes in this
       * operation. It identifies the properties that the write operation will
       * set as well as the properties that the API response will include.
       *
       * The part names that you can include in the parameter value are snippet,
       * contentDetails, fileDetails, liveStreamingDetails, player,
       * processingDetails, recordingDetails, statistics, status, suggestions,
       * and topicDetails. However, not all of those parts contain properties
       * that can be set when setting or updating a video's metadata. For
       * example, the statistics object encapsulates statistics that YouTube
       * calculates for a video and does not contain values that you can set or
       * modify. If the parameter value specifies a part that does not contain
       * mutable values, that part will still be included in the API response.
       * @param[in] _metadata_ The metadata object to insert. If this is NULL
       * then do not upload any metadata.
       * @param[in] _media_content_type_ The content type of the data in the
       * _media_content_reader_.
       * @param[in] _media_content_reader_ The media content to insert. If
       * this is NULL then do not upload any media and ignore
       * _media_content_type_.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      VideosResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part,
          const Video* _metadata_,
          const StringPiece& _media_content_type_,
          client::DataReader* _media_content_reader_
      ) const;

      /**
       * Creates a new VideosResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more video resource properties that the API response will
       * include. The part names that you can include in the parameter value are
       * id, snippet, contentDetails, fileDetails, liveStreamingDetails, player,
       * processingDetails, recordingDetails, statistics, status, suggestions,
       * and topicDetails.
       *
       * If the parameter identifies a property that contains child properties,
       * the child properties will be included in the response. For example, in
       * a video resource, the snippet property contains the channelId, title,
       * description, tags, and categoryId properties. As such, if you set
       * part=snippet, the API response will contain all of those properties.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      VideosResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       * @param[in] part The part parameter specifies a comma-separated list of
       * one or more video resource properties that the API response will
       * include. The part names that you can include in the parameter value are
       * id, snippet, contentDetails, fileDetails, liveStreamingDetails, player,
       * processingDetails, recordingDetails, statistics, status, suggestions,
       * and topicDetails.
       *
       * If the parameter identifies a property that contains child properties,
       * the child properties will be included in the response. For example, in
       * a video resource, the snippet property contains the channelId, title,
       * description, tags, and categoryId properties. As such, if you set
       * part=snippet, the API response will contain all of those properties.
       *
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      VideosResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part) const;

      /**
       * Creates a new VideosResource_RateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] id The id parameter specifies the YouTube video ID of the
       * video that is being rated or having its rating removed.
       * @param[in] rating Specifies the rating to record.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      VideosResource_RateMethod* NewRateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& id,
          const StringPiece& rating) const;

      /**
       * Creates a new VideosResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] part The part parameter serves two purposes in this
       * operation. It identifies the properties that the write operation will
       * set as well as the properties that the API response will include.
       *
       * The part names that you can include in the parameter value are snippet,
       * contentDetails, fileDetails, liveStreamingDetails, player,
       * processingDetails, recordingDetails, statistics, status, suggestions,
       * and topicDetails.
       *
       * Note that this method will override the existing values for all of the
       * mutable properties that are contained in any parts that the parameter
       * value specifies. For example, a video's privacy setting is contained in
       * the status part. As such, if your request is updating a private video,
       * and the request's part parameter value includes the status part, the
       * video's privacy setting will be updated to whatever value the request
       * body specifies. If the request body does not specify a value, the
       * existing privacy setting will be removed and the video will revert to
       * the default privacy setting.
       *
       * In addition, not all of those parts contain properties that can be set
       * when setting or updating a video's metadata. For example, the
       * statistics object encapsulates statistics that YouTube calculates for a
       * video and does not contain values that you can set or modify. If the
       * parameter value specifies a part that does not contain mutable values,
       * that part will still be included in the API response.
       * @param[in] _content_ The data object to update.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      VideosResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& part,
          const Video& _content_) const;

     private:
      YouTubeService* service_;

      DISALLOW_COPY_AND_ASSIGN(VideosResource);
    };

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class WatermarksResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      WatermarksResource(YouTubeService* service);

      /**
       * Standard destructor.
       */
      ~WatermarksResource() {}



      /**
       * Creates a new WatermarksResource_SetMethod instance.
       * @deprecated
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] channel_id The channelId parameter specifies a YouTube
       * channel ID for which the watermark is being provided.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      WatermarksResource_SetMethod* NewSetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& channel_id) const;

      /**
       * Creates a new WatermarksResource_SetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] channel_id The channelId parameter specifies a YouTube
       * channel ID for which the watermark is being provided.
       * @param[in] _metadata_ The metadata object to set. If this is NULL then
       * do not upload any metadata.
       * @param[in] _media_content_type_ The content type of the data in the
       * _media_content_reader_.
       * @param[in] _media_content_reader_ The media content to set. If
       * this is NULL then do not upload any media and ignore
       * _media_content_type_.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      WatermarksResource_SetMethod* NewSetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& channel_id,
          const InvideoBranding* _metadata_,
          const StringPiece& _media_content_type_,
          client::DataReader* _media_content_reader_
      ) const;

      /**
       * Creates a new WatermarksResource_UnsetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] channel_id The channelId parameter specifies a YouTube
       * channel ID for which the watermark is being unset.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      WatermarksResource_UnsetMethod* NewUnsetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& channel_id) const;

     private:
      YouTubeService* service_;

      DISALLOW_COPY_AND_ASSIGN(WatermarksResource);
    };




  /**
   * Standard constructor.
   *
   * @param[in] transport  The transport to use when creating methods to invoke
   *                       on this service instance.
   */
  explicit YouTubeService(client::HttpTransport* transport);

  /**
   * Standard destructor.
   */
  virtual ~YouTubeService();

  /**
   * Gets the  resource method factory.
   *
   * @return ActivitiesResource for creating methods.
   */
  const ActivitiesResource& get_activities() const {
    return activities_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ChannelBannersResource for creating methods.
   */
  const ChannelBannersResource& get_channel_banners() const {
    return channel_banners_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ChannelSectionsResource for creating methods.
   */
  const ChannelSectionsResource& get_channel_sections() const {
    return channel_sections_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ChannelsResource for creating methods.
   */
  const ChannelsResource& get_channels() const {
    return channels_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return GuideCategoriesResource for creating methods.
   */
  const GuideCategoriesResource& get_guide_categories() const {
    return guide_categories_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return I18nLanguagesResource for creating methods.
   */
  const I18nLanguagesResource& get_i18n_languages() const {
    return i18n_languages_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return I18nRegionsResource for creating methods.
   */
  const I18nRegionsResource& get_i18n_regions() const {
    return i18n_regions_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return LiveBroadcastsResource for creating methods.
   */
  const LiveBroadcastsResource& get_live_broadcasts() const {
    return live_broadcasts_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return LiveStreamsResource for creating methods.
   */
  const LiveStreamsResource& get_live_streams() const {
    return live_streams_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return PlaylistItemsResource for creating methods.
   */
  const PlaylistItemsResource& get_playlist_items() const {
    return playlist_items_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return PlaylistsResource for creating methods.
   */
  const PlaylistsResource& get_playlists() const {
    return playlists_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return SearchResource for creating methods.
   */
  const SearchResource& get_search() const {
    return search_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return SubscriptionsResource for creating methods.
   */
  const SubscriptionsResource& get_subscriptions() const {
    return subscriptions_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ThumbnailsResource for creating methods.
   */
  const ThumbnailsResource& get_thumbnails() const {
    return thumbnails_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return VideoCategoriesResource for creating methods.
   */
  const VideoCategoriesResource& get_video_categories() const {
    return video_categories_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return VideosResource for creating methods.
   */
  const VideosResource& get_videos() const {
    return videos_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return WatermarksResource for creating methods.
   */
  const WatermarksResource& get_watermarks() const {
    return watermarks_;
  }

  /**
   * Declares the OAuth2.0 scopes used within YouTube Data API
   *
   * These scopes shoudl be used when asking for credentials to invoke methods
   * in the YouTubeService.
   */
  class SCOPES {
   public:
    /**
     * Manage your YouTube account.
     */
    static const StringPiece YOUTUBE;

    /**
     * View your YouTube account.
     */
    static const StringPiece YOUTUBE_READONLY;

    /**
     * Manage your YouTube videos.
     */
    static const StringPiece YOUTUBE_UPLOAD;

    /**
     * View and manage your assets and associated content on YouTube.
     */
    static const StringPiece YOUTUBEPARTNER;

    /**
     * View private information of your YouTube channel relevant during the
     * audit process with a YouTube partner.
     */
    static const StringPiece YOUTUBEPARTNER_CHANNEL_AUDIT;

   private:
    SCOPES();   // Never instantiated.
    ~SCOPES();  // Never instantiated.
  };

 private:
  ActivitiesResource activities_;
  ChannelBannersResource channel_banners_;
  ChannelSectionsResource channel_sections_;
  ChannelsResource channels_;
  GuideCategoriesResource guide_categories_;
  I18nLanguagesResource i18n_languages_;
  I18nRegionsResource i18n_regions_;
  LiveBroadcastsResource live_broadcasts_;
  LiveStreamsResource live_streams_;
  PlaylistItemsResource playlist_items_;
  PlaylistsResource playlists_;
  SearchResource search_;
  SubscriptionsResource subscriptions_;
  ThumbnailsResource thumbnails_;
  VideoCategoriesResource video_categories_;
  VideosResource videos_;
  WatermarksResource watermarks_;

  DISALLOW_COPY_AND_ASSIGN(YouTubeService);
};


/**
 * @defgroup DataObject YouTube Data API Data Objects
 *
 * The data objects are used as parameters and responses from service requests.
 * For more information about using data objects, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */

/**
 * @defgroup ServiceClass YouTube Data API Service
 *
 * The service classes contain information about accessing and using the
 * YouTube Data API cloud service.
 *
 * For more information about using services, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */

/**
 * @defgroup ServiceMethod YouTube Data API Service Methods
 *
 * The service method classes are used to create and invoke methods in the
 * YouTubeService to access the YouTube Data API.
 *
 * For more information about using services, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */
}  // namespace google_youtube_api
#endif  // GOOGLE_YOUTUBE_API_YOU_TUBE_SERVICE_H_
