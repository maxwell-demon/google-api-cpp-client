// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
//------------------------------------------------------------------------------
// This code was generated by google-apis-code-generator 1.5.0
//   Build date: 2014-11-17 18:43:33 UTC
//   on: 2014-12-11, 22:05:47 UTC
//   C++ generator version:
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//------------------------------------------------------------------------------
#include "google/youtube_api/you_tube_service.h"

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/client/service/client_service.h"
#include "googleapis/client/service/media_uploader.h"
#include "googleapis/client/service/service_request_pager.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/client/util/status.h"

#include "google/youtube_api/activity.h"
#include "google/youtube_api/activity_list_response.h"
#include "google/youtube_api/channel.h"
#include "google/youtube_api/channel_banner_resource.h"
#include "google/youtube_api/channel_list_response.h"
#include "google/youtube_api/channel_section.h"
#include "google/youtube_api/channel_section_list_response.h"
#include "google/youtube_api/guide_category_list_response.h"
#include "google/youtube_api/i18n_language_list_response.h"
#include "google/youtube_api/i18n_region_list_response.h"
#include "google/youtube_api/invideo_branding.h"
#include "google/youtube_api/live_broadcast.h"
#include "google/youtube_api/live_broadcast_list_response.h"
#include "google/youtube_api/live_stream.h"
#include "google/youtube_api/live_stream_list_response.h"
#include "google/youtube_api/playlist.h"
#include "google/youtube_api/playlist_item.h"
#include "google/youtube_api/playlist_item_list_response.h"
#include "google/youtube_api/playlist_list_response.h"
#include "google/youtube_api/search_list_response.h"
#include "google/youtube_api/subscription.h"
#include "google/youtube_api/subscription_list_response.h"
#include "google/youtube_api/thumbnail_set_response.h"
#include "google/youtube_api/video.h"
#include "google/youtube_api/video_category_list_response.h"
#include "google/youtube_api/video_get_rating_response.h"
#include "google/youtube_api/video_list_response.h"


#include "googleapis/client/data/data_reader.h"
#include "googleapis/client/transport/http_request.h"
#include "googleapis/client/transport/http_transport.h"
#include "googleapis/client/util/uri_utils.h"
#include "googleapis/strings/strcat.h"

namespace google_youtube_api {
using namespace googleapis;
const StringPiece YouTubeService::googleapis_API_NAME("youtube");

const StringPiece YouTubeService::googleapis_API_VERSION("v3");

const StringPiece YouTubeService::googleapis_API_GENERATOR(
  "google-apis-code-generator 1.5.0 / 0.1.2");


const StringPiece YouTubeService::SCOPES::YOUTUBE("https://www.googleapis.com/auth/youtube");

const StringPiece YouTubeService::SCOPES::YOUTUBE_READONLY("https://www.googleapis.com/auth/youtube.readonly");

const StringPiece YouTubeService::SCOPES::YOUTUBE_UPLOAD("https://www.googleapis.com/auth/youtube.upload");

const StringPiece YouTubeService::SCOPES::YOUTUBEPARTNER("https://www.googleapis.com/auth/youtubepartner");

const StringPiece YouTubeService::SCOPES::YOUTUBEPARTNER_CHANNEL_AUDIT("https://www.googleapis.com/auth/youtubepartner-channel-audit");
YouTubeServiceBaseRequest::YouTubeServiceBaseRequest(
      const client::ClientService* service,
      client::AuthorizationCredential* credential,
      client::HttpRequest::HttpMethod method,
      const StringPiece& uri_template)
    : client::ClientServiceRequest(
          service, credential, method, uri_template),
      alt_("json"),
      pretty_print_(true),
      _have_alt_(false),
      _have_fields_(false),
      _have_key_(false),
      _have_oauth_token_(false),
      _have_pretty_print_(false),
      _have_quota_user_(false),
      _have_user_ip_(false) {
}

YouTubeServiceBaseRequest::~YouTubeServiceBaseRequest() {
}

util::Status YouTubeServiceBaseRequest::AppendVariable(
      const StringPiece& variable_name,
      const client::UriTemplateConfig& config,
      string* target) {
  if (variable_name == "alt") {
    target->append(client::CppValueToEscapedUrlValue(
        alt_));
    return client::StatusOk();
  }
  if (variable_name == "fields") {
    target->append(client::CppValueToEscapedUrlValue(
        fields_));
    return client::StatusOk();
  }
  if (variable_name == "key") {
    target->append(client::CppValueToEscapedUrlValue(
        key_));
    return client::StatusOk();
  }
  if (variable_name == "oauth_token") {
    target->append(client::CppValueToEscapedUrlValue(
        oauth_token_));
    return client::StatusOk();
  }
  if (variable_name == "prettyPrint") {
    target->append(client::CppValueToEscapedUrlValue(
        pretty_print_));
    return client::StatusOk();
  }
  if (variable_name == "quotaUser") {
    target->append(client::CppValueToEscapedUrlValue(
        quota_user_));
    return client::StatusOk();
  }
  if (variable_name == "userIp") {
    target->append(client::CppValueToEscapedUrlValue(
        user_ip_));
    return client::StatusOk();
  }
  return client::StatusInvalidArgument(
      StrCat("Unknown url variable='", variable_name, "'"));
}

util::Status YouTubeServiceBaseRequest::AppendOptionalQueryParameters(
    string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_alt_) {
    StrAppend(target, sep, "alt=",
              client::CppValueToEscapedUrlValue(
                alt_));
    sep = "&";
  }
  if (_have_fields_) {
    StrAppend(target, sep, "fields=",
              client::CppValueToEscapedUrlValue(
                fields_));
    sep = "&";
  }
  if (_have_key_) {
    StrAppend(target, sep, "key=",
              client::CppValueToEscapedUrlValue(
                key_));
    sep = "&";
  }
  if (_have_oauth_token_) {
    StrAppend(target, sep, "oauthToken=",
              client::CppValueToEscapedUrlValue(
                oauth_token_));
    sep = "&";
  }
  if (_have_pretty_print_) {
    StrAppend(target, sep, "prettyPrint=",
              client::CppValueToEscapedUrlValue(
                pretty_print_));
    sep = "&";
  }
  if (_have_quota_user_) {
    StrAppend(target, sep, "quotaUser=",
              client::CppValueToEscapedUrlValue(
                quota_user_));
    sep = "&";
  }
  if (_have_user_ip_) {
    StrAppend(target, sep, "userIp=",
              client::CppValueToEscapedUrlValue(
                user_ip_));
    sep = "&";
  }
  return client::ClientServiceRequest
         ::AppendOptionalQueryParameters(target);
}



// Standard constructor.
ActivitiesResource_InsertMethod::ActivitiesResource_InsertMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part, const Activity& __request_content__)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        StrCat(_service_->service_url(), "activities")),
      part_(part.as_string()) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(__request_content__.MakeJsonReader());
}

// Standard destructor.
ActivitiesResource_InsertMethod::~ActivitiesResource_InsertMethod() {
}

util::Status ActivitiesResource_InsertMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ActivitiesResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ActivitiesResource_ListMethod::ActivitiesResource_ListMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        StrCat(_service_->service_url(), "activities")),
      part_(part.as_string()),
      max_results_(5),
      _have_region_code_(false),
      _have_published_before_(false),
      _have_channel_id_(false),
      _have_mine_(false),
      _have_max_results_(false),
      _have_page_token_(false),
      _have_home_(false),
      _have_published_after_(false) {
}

// Standard destructor.
ActivitiesResource_ListMethod::~ActivitiesResource_ListMethod() {
}

util::Status ActivitiesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_region_code_) {
    StrAppend(target, sep, "regionCode=",
              client::CppValueToEscapedUrlValue(
                region_code_));
    sep = "&";
  }
  if (_have_published_before_) {
    StrAppend(target, sep, "publishedBefore=",
              client::CppValueToEscapedUrlValue(
                published_before_));
    sep = "&";
  }
  if (_have_channel_id_) {
    StrAppend(target, sep, "channelId=",
              client::CppValueToEscapedUrlValue(
                channel_id_));
    sep = "&";
  }
  if (_have_mine_) {
    StrAppend(target, sep, "mine=",
              client::CppValueToEscapedUrlValue(
                mine_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  if (_have_home_) {
    StrAppend(target, sep, "home=",
              client::CppValueToEscapedUrlValue(
                home_));
    sep = "&";
  }
  if (_have_published_after_) {
    StrAppend(target, sep, "publishedAfter=",
              client::CppValueToEscapedUrlValue(
                published_after_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ActivitiesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// static
const client::MediaUploadSpec
ChannelBannersResource_InsertMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/youtube/v3/channelBanners/insert", true);


// static
const client::MediaUploadSpec
ChannelBannersResource_InsertMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/youtube/v3/channelBanners/insert", true);


util::Status ChannelBannersResource_InsertMethod::Execute() {
  client::HttpRequest* request = mutable_http_request();
  util::Status status =
    _uploader_->BuildRequest(
        request,
        NewCallback(this, &ChannelBannersResource_InsertMethod::PrepareUrl));
  if (!status.ok()) {
    return status;
  }

  return _uploader_->Upload(request);
}

// Deprecated constructor did not take media upload arguments.
ChannelBannersResource_InsertMethod::ChannelBannersResource_InsertMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_)
    : YouTubeServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "channelBanners/insert")),
      _have_on_behalf_of_content_owner_(false) {
  _uploader_.reset(new client::MediaUploader(
      &SIMPLE_MEDIA_UPLOAD,
      _service_->url_root(),
      client::JoinPath(
          _service_->url_path(), "channelBanners/insert")));
}
// Standard constructor.
ChannelBannersResource_InsertMethod::ChannelBannersResource_InsertMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const ChannelBannerResource* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        StrCat(_service_->service_url(), "channelBanners/insert")),
      _have_on_behalf_of_content_owner_(false) {
  _uploader_.reset(new client::MediaUploader(
      &SIMPLE_MEDIA_UPLOAD,
      _service_->url_root(),
      client::JoinPath(
          _service_->url_path(), "channelBanners/insert")));
  if (_metadata_) {
    _uploader_->set_metadata(*_metadata_);
  }
  if (_media_content_reader_) {
    _uploader_->set_media_content_reader(
        _media_content_type_.as_string(), _media_content_reader_);
  }
}

// Standard destructor.
ChannelBannersResource_InsertMethod::~ChannelBannersResource_InsertMethod() {
}

util::Status ChannelBannersResource_InsertMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ChannelBannersResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ChannelSectionsResource_DeleteMethod::ChannelSectionsResource_DeleteMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& id)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        StrCat(_service_->service_url(), "channelSections")),
      id_(id.as_string()),
      _have_on_behalf_of_content_owner_(false) {
}

// Standard destructor.
ChannelSectionsResource_DeleteMethod::~ChannelSectionsResource_DeleteMethod() {
}

util::Status ChannelSectionsResource_DeleteMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ChannelSectionsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "id") {
    target->append(client::CppValueToEscapedUrlValue(
        id_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ChannelSectionsResource_InsertMethod::ChannelSectionsResource_InsertMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part, const ChannelSection& __request_content__)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        StrCat(_service_->service_url(), "channelSections")),
      part_(part.as_string()),
      _have_on_behalf_of_content_owner_channel_(false),
      _have_on_behalf_of_content_owner_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(__request_content__.MakeJsonReader());
}

// Standard destructor.
ChannelSectionsResource_InsertMethod::~ChannelSectionsResource_InsertMethod() {
}

util::Status ChannelSectionsResource_InsertMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_channel_) {
    StrAppend(target, sep, "onBehalfOfContentOwnerChannel=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_channel_));
    sep = "&";
  }
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ChannelSectionsResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ChannelSectionsResource_ListMethod::ChannelSectionsResource_ListMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        StrCat(_service_->service_url(), "channelSections")),
      part_(part.as_string()),
      _have_on_behalf_of_content_owner_(false),
      _have_channel_id_(false),
      _have_id_(false),
      _have_mine_(false) {
}

// Standard destructor.
ChannelSectionsResource_ListMethod::~ChannelSectionsResource_ListMethod() {
}

util::Status ChannelSectionsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  if (_have_channel_id_) {
    StrAppend(target, sep, "channelId=",
              client::CppValueToEscapedUrlValue(
                channel_id_));
    sep = "&";
  }
  if (_have_id_) {
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
  }
  if (_have_mine_) {
    StrAppend(target, sep, "mine=",
              client::CppValueToEscapedUrlValue(
                mine_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ChannelSectionsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ChannelSectionsResource_UpdateMethod::ChannelSectionsResource_UpdateMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part, const ChannelSection& __request_content__)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        StrCat(_service_->service_url(), "channelSections")),
      part_(part.as_string()),
      _have_on_behalf_of_content_owner_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(__request_content__.MakeJsonReader());
}

// Standard destructor.
ChannelSectionsResource_UpdateMethod::~ChannelSectionsResource_UpdateMethod() {
}

util::Status ChannelSectionsResource_UpdateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ChannelSectionsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ChannelsResource_ListMethod::ChannelsResource_ListMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        StrCat(_service_->service_url(), "channels")),
      part_(part.as_string()),
      max_results_(5),
      _have_managed_by_me_(false),
      _have_on_behalf_of_content_owner_(false),
      _have_for_username_(false),
      _have_mine_(false),
      _have_max_results_(false),
      _have_id_(false),
      _have_page_token_(false),
      _have_my_subscribers_(false),
      _have_category_id_(false) {
}

// Standard destructor.
ChannelsResource_ListMethod::~ChannelsResource_ListMethod() {
}

util::Status ChannelsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_managed_by_me_) {
    StrAppend(target, sep, "managedByMe=",
              client::CppValueToEscapedUrlValue(
                managed_by_me_));
    sep = "&";
  }
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  if (_have_for_username_) {
    StrAppend(target, sep, "forUsername=",
              client::CppValueToEscapedUrlValue(
                for_username_));
    sep = "&";
  }
  if (_have_mine_) {
    StrAppend(target, sep, "mine=",
              client::CppValueToEscapedUrlValue(
                mine_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_id_) {
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  if (_have_my_subscribers_) {
    StrAppend(target, sep, "mySubscribers=",
              client::CppValueToEscapedUrlValue(
                my_subscribers_));
    sep = "&";
  }
  if (_have_category_id_) {
    StrAppend(target, sep, "categoryId=",
              client::CppValueToEscapedUrlValue(
                category_id_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ChannelsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ChannelsResource_UpdateMethod::ChannelsResource_UpdateMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part, const Channel& __request_content__)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        StrCat(_service_->service_url(), "channels")),
      part_(part.as_string()),
      _have_on_behalf_of_content_owner_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(__request_content__.MakeJsonReader());
}

// Standard destructor.
ChannelsResource_UpdateMethod::~ChannelsResource_UpdateMethod() {
}

util::Status ChannelsResource_UpdateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ChannelsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
GuideCategoriesResource_ListMethod::GuideCategoriesResource_ListMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        StrCat(_service_->service_url(), "guideCategories")),
      part_(part.as_string()),
      hl_("en-US"),
      _have_region_code_(false),
      _have_id_(false),
      _have_hl_(false) {
}

// Standard destructor.
GuideCategoriesResource_ListMethod::~GuideCategoriesResource_ListMethod() {
}

util::Status GuideCategoriesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_region_code_) {
    StrAppend(target, sep, "regionCode=",
              client::CppValueToEscapedUrlValue(
                region_code_));
    sep = "&";
  }
  if (_have_id_) {
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
  }
  if (_have_hl_) {
    StrAppend(target, sep, "hl=",
              client::CppValueToEscapedUrlValue(
                hl_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status GuideCategoriesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
I18nLanguagesResource_ListMethod::I18nLanguagesResource_ListMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        StrCat(_service_->service_url(), "i18nLanguages")),
      part_(part.as_string()),
      hl_("en_US"),
      _have_hl_(false) {
}

// Standard destructor.
I18nLanguagesResource_ListMethod::~I18nLanguagesResource_ListMethod() {
}

util::Status I18nLanguagesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_hl_) {
    StrAppend(target, sep, "hl=",
              client::CppValueToEscapedUrlValue(
                hl_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status I18nLanguagesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
I18nRegionsResource_ListMethod::I18nRegionsResource_ListMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        StrCat(_service_->service_url(), "i18nRegions")),
      part_(part.as_string()),
      hl_("en_US"),
      _have_hl_(false) {
}

// Standard destructor.
I18nRegionsResource_ListMethod::~I18nRegionsResource_ListMethod() {
}

util::Status I18nRegionsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_hl_) {
    StrAppend(target, sep, "hl=",
              client::CppValueToEscapedUrlValue(
                hl_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status I18nRegionsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
LiveBroadcastsResource_BindMethod::LiveBroadcastsResource_BindMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& id, const StringPiece& part)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        StrCat(_service_->service_url(), "liveBroadcasts/bind")),
      id_(id.as_string()),
      part_(part.as_string()),
      _have_on_behalf_of_content_owner_channel_(false),
      _have_on_behalf_of_content_owner_(false),
      _have_stream_id_(false) {
}

// Standard destructor.
LiveBroadcastsResource_BindMethod::~LiveBroadcastsResource_BindMethod() {
}

util::Status LiveBroadcastsResource_BindMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_channel_) {
    StrAppend(target, sep, "onBehalfOfContentOwnerChannel=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_channel_));
    sep = "&";
  }
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  if (_have_stream_id_) {
    StrAppend(target, sep, "streamId=",
              client::CppValueToEscapedUrlValue(
                stream_id_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status LiveBroadcastsResource_BindMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "id") {
    target->append(client::CppValueToEscapedUrlValue(
        id_));
    return client::StatusOk();
  }
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
LiveBroadcastsResource_ControlMethod::LiveBroadcastsResource_ControlMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& id, const StringPiece& part)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        StrCat(_service_->service_url(), "liveBroadcasts/control")),
      id_(id.as_string()),
      part_(part.as_string()),
      _have_on_behalf_of_content_owner_(false),
      _have_display_slate_(false),
      _have_on_behalf_of_content_owner_channel_(false),
      _have_offset_time_ms_(false),
      _have_walltime_(false) {
}

// Standard destructor.
LiveBroadcastsResource_ControlMethod::~LiveBroadcastsResource_ControlMethod() {
}

util::Status LiveBroadcastsResource_ControlMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  if (_have_display_slate_) {
    StrAppend(target, sep, "displaySlate=",
              client::CppValueToEscapedUrlValue(
                display_slate_));
    sep = "&";
  }
  if (_have_on_behalf_of_content_owner_channel_) {
    StrAppend(target, sep, "onBehalfOfContentOwnerChannel=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_channel_));
    sep = "&";
  }
  if (_have_offset_time_ms_) {
    StrAppend(target, sep, "offsetTimeMs=",
              client::CppValueToEscapedUrlValue(
                offset_time_ms_));
    sep = "&";
  }
  if (_have_walltime_) {
    StrAppend(target, sep, "walltime=",
              client::CppValueToEscapedUrlValue(
                walltime_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status LiveBroadcastsResource_ControlMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "id") {
    target->append(client::CppValueToEscapedUrlValue(
        id_));
    return client::StatusOk();
  }
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
LiveBroadcastsResource_DeleteMethod::LiveBroadcastsResource_DeleteMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& id)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        StrCat(_service_->service_url(), "liveBroadcasts")),
      id_(id.as_string()),
      _have_on_behalf_of_content_owner_channel_(false),
      _have_on_behalf_of_content_owner_(false) {
}

// Standard destructor.
LiveBroadcastsResource_DeleteMethod::~LiveBroadcastsResource_DeleteMethod() {
}

util::Status LiveBroadcastsResource_DeleteMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_channel_) {
    StrAppend(target, sep, "onBehalfOfContentOwnerChannel=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_channel_));
    sep = "&";
  }
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status LiveBroadcastsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "id") {
    target->append(client::CppValueToEscapedUrlValue(
        id_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
LiveBroadcastsResource_InsertMethod::LiveBroadcastsResource_InsertMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part, const LiveBroadcast& __request_content__)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        StrCat(_service_->service_url(), "liveBroadcasts")),
      part_(part.as_string()),
      _have_on_behalf_of_content_owner_channel_(false),
      _have_on_behalf_of_content_owner_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(__request_content__.MakeJsonReader());
}

// Standard destructor.
LiveBroadcastsResource_InsertMethod::~LiveBroadcastsResource_InsertMethod() {
}

util::Status LiveBroadcastsResource_InsertMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_channel_) {
    StrAppend(target, sep, "onBehalfOfContentOwnerChannel=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_channel_));
    sep = "&";
  }
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status LiveBroadcastsResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
LiveBroadcastsResource_ListMethod::LiveBroadcastsResource_ListMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        StrCat(_service_->service_url(), "liveBroadcasts")),
      part_(part.as_string()),
      max_results_(5),
      _have_broadcast_status_(false),
      _have_on_behalf_of_content_owner_(false),
      _have_on_behalf_of_content_owner_channel_(false),
      _have_mine_(false),
      _have_max_results_(false),
      _have_page_token_(false),
      _have_id_(false) {
}

// Standard destructor.
LiveBroadcastsResource_ListMethod::~LiveBroadcastsResource_ListMethod() {
}

util::Status LiveBroadcastsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_broadcast_status_) {
    StrAppend(target, sep, "broadcastStatus=",
              client::CppValueToEscapedUrlValue(
                broadcast_status_));
    sep = "&";
  }
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  if (_have_on_behalf_of_content_owner_channel_) {
    StrAppend(target, sep, "onBehalfOfContentOwnerChannel=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_channel_));
    sep = "&";
  }
  if (_have_mine_) {
    StrAppend(target, sep, "mine=",
              client::CppValueToEscapedUrlValue(
                mine_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  if (_have_id_) {
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status LiveBroadcastsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
LiveBroadcastsResource_TransitionMethod::LiveBroadcastsResource_TransitionMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& broadcast_status, const StringPiece& id, const StringPiece& part)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        StrCat(_service_->service_url(), "liveBroadcasts/transition")),
      broadcast_status_(broadcast_status.as_string()),
      id_(id.as_string()),
      part_(part.as_string()),
      _have_on_behalf_of_content_owner_channel_(false),
      _have_on_behalf_of_content_owner_(false) {
}

// Standard destructor.
LiveBroadcastsResource_TransitionMethod::~LiveBroadcastsResource_TransitionMethod() {
}

util::Status LiveBroadcastsResource_TransitionMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "broadcastStatus=",
              client::CppValueToEscapedUrlValue(
                broadcast_status_));
    sep = "&";
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_channel_) {
    StrAppend(target, sep, "onBehalfOfContentOwnerChannel=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_channel_));
    sep = "&";
  }
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status LiveBroadcastsResource_TransitionMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "broadcastStatus") {
    target->append(client::CppValueToEscapedUrlValue(
        broadcast_status_));
    return client::StatusOk();
  }
  if (variable_name == "id") {
    target->append(client::CppValueToEscapedUrlValue(
        id_));
    return client::StatusOk();
  }
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
LiveBroadcastsResource_UpdateMethod::LiveBroadcastsResource_UpdateMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part, const LiveBroadcast& __request_content__)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        StrCat(_service_->service_url(), "liveBroadcasts")),
      part_(part.as_string()),
      _have_on_behalf_of_content_owner_channel_(false),
      _have_on_behalf_of_content_owner_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(__request_content__.MakeJsonReader());
}

// Standard destructor.
LiveBroadcastsResource_UpdateMethod::~LiveBroadcastsResource_UpdateMethod() {
}

util::Status LiveBroadcastsResource_UpdateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_channel_) {
    StrAppend(target, sep, "onBehalfOfContentOwnerChannel=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_channel_));
    sep = "&";
  }
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status LiveBroadcastsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
LiveStreamsResource_DeleteMethod::LiveStreamsResource_DeleteMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& id)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        StrCat(_service_->service_url(), "liveStreams")),
      id_(id.as_string()),
      _have_on_behalf_of_content_owner_channel_(false),
      _have_on_behalf_of_content_owner_(false) {
}

// Standard destructor.
LiveStreamsResource_DeleteMethod::~LiveStreamsResource_DeleteMethod() {
}

util::Status LiveStreamsResource_DeleteMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_channel_) {
    StrAppend(target, sep, "onBehalfOfContentOwnerChannel=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_channel_));
    sep = "&";
  }
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status LiveStreamsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "id") {
    target->append(client::CppValueToEscapedUrlValue(
        id_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
LiveStreamsResource_InsertMethod::LiveStreamsResource_InsertMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part, const LiveStream& __request_content__)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        StrCat(_service_->service_url(), "liveStreams")),
      part_(part.as_string()),
      _have_on_behalf_of_content_owner_channel_(false),
      _have_on_behalf_of_content_owner_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(__request_content__.MakeJsonReader());
}

// Standard destructor.
LiveStreamsResource_InsertMethod::~LiveStreamsResource_InsertMethod() {
}

util::Status LiveStreamsResource_InsertMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_channel_) {
    StrAppend(target, sep, "onBehalfOfContentOwnerChannel=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_channel_));
    sep = "&";
  }
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status LiveStreamsResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
LiveStreamsResource_ListMethod::LiveStreamsResource_ListMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        StrCat(_service_->service_url(), "liveStreams")),
      part_(part.as_string()),
      max_results_(5),
      _have_on_behalf_of_content_owner_(false),
      _have_on_behalf_of_content_owner_channel_(false),
      _have_mine_(false),
      _have_max_results_(false),
      _have_page_token_(false),
      _have_id_(false) {
}

// Standard destructor.
LiveStreamsResource_ListMethod::~LiveStreamsResource_ListMethod() {
}

util::Status LiveStreamsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  if (_have_on_behalf_of_content_owner_channel_) {
    StrAppend(target, sep, "onBehalfOfContentOwnerChannel=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_channel_));
    sep = "&";
  }
  if (_have_mine_) {
    StrAppend(target, sep, "mine=",
              client::CppValueToEscapedUrlValue(
                mine_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  if (_have_id_) {
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status LiveStreamsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
LiveStreamsResource_UpdateMethod::LiveStreamsResource_UpdateMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part, const LiveStream& __request_content__)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        StrCat(_service_->service_url(), "liveStreams")),
      part_(part.as_string()),
      _have_on_behalf_of_content_owner_channel_(false),
      _have_on_behalf_of_content_owner_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(__request_content__.MakeJsonReader());
}

// Standard destructor.
LiveStreamsResource_UpdateMethod::~LiveStreamsResource_UpdateMethod() {
}

util::Status LiveStreamsResource_UpdateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_channel_) {
    StrAppend(target, sep, "onBehalfOfContentOwnerChannel=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_channel_));
    sep = "&";
  }
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status LiveStreamsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PlaylistItemsResource_DeleteMethod::PlaylistItemsResource_DeleteMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& id)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        StrCat(_service_->service_url(), "playlistItems")),
      id_(id.as_string()) {
}

// Standard destructor.
PlaylistItemsResource_DeleteMethod::~PlaylistItemsResource_DeleteMethod() {
}

util::Status PlaylistItemsResource_DeleteMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status PlaylistItemsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "id") {
    target->append(client::CppValueToEscapedUrlValue(
        id_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PlaylistItemsResource_InsertMethod::PlaylistItemsResource_InsertMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part, const PlaylistItem& __request_content__)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        StrCat(_service_->service_url(), "playlistItems")),
      part_(part.as_string()),
      _have_on_behalf_of_content_owner_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(__request_content__.MakeJsonReader());
}

// Standard destructor.
PlaylistItemsResource_InsertMethod::~PlaylistItemsResource_InsertMethod() {
}

util::Status PlaylistItemsResource_InsertMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status PlaylistItemsResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PlaylistItemsResource_ListMethod::PlaylistItemsResource_ListMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        StrCat(_service_->service_url(), "playlistItems")),
      part_(part.as_string()),
      max_results_(5),
      _have_on_behalf_of_content_owner_(false),
      _have_playlist_id_(false),
      _have_video_id_(false),
      _have_max_results_(false),
      _have_page_token_(false),
      _have_id_(false) {
}

// Standard destructor.
PlaylistItemsResource_ListMethod::~PlaylistItemsResource_ListMethod() {
}

util::Status PlaylistItemsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  if (_have_playlist_id_) {
    StrAppend(target, sep, "playlistId=",
              client::CppValueToEscapedUrlValue(
                playlist_id_));
    sep = "&";
  }
  if (_have_video_id_) {
    StrAppend(target, sep, "videoId=",
              client::CppValueToEscapedUrlValue(
                video_id_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  if (_have_id_) {
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status PlaylistItemsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PlaylistItemsResource_UpdateMethod::PlaylistItemsResource_UpdateMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part, const PlaylistItem& __request_content__)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        StrCat(_service_->service_url(), "playlistItems")),
      part_(part.as_string()) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(__request_content__.MakeJsonReader());
}

// Standard destructor.
PlaylistItemsResource_UpdateMethod::~PlaylistItemsResource_UpdateMethod() {
}

util::Status PlaylistItemsResource_UpdateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status PlaylistItemsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PlaylistsResource_DeleteMethod::PlaylistsResource_DeleteMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& id)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        StrCat(_service_->service_url(), "playlists")),
      id_(id.as_string()),
      _have_on_behalf_of_content_owner_(false) {
}

// Standard destructor.
PlaylistsResource_DeleteMethod::~PlaylistsResource_DeleteMethod() {
}

util::Status PlaylistsResource_DeleteMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status PlaylistsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "id") {
    target->append(client::CppValueToEscapedUrlValue(
        id_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PlaylistsResource_InsertMethod::PlaylistsResource_InsertMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part, const Playlist& __request_content__)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        StrCat(_service_->service_url(), "playlists")),
      part_(part.as_string()),
      _have_on_behalf_of_content_owner_channel_(false),
      _have_on_behalf_of_content_owner_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(__request_content__.MakeJsonReader());
}

// Standard destructor.
PlaylistsResource_InsertMethod::~PlaylistsResource_InsertMethod() {
}

util::Status PlaylistsResource_InsertMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_channel_) {
    StrAppend(target, sep, "onBehalfOfContentOwnerChannel=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_channel_));
    sep = "&";
  }
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status PlaylistsResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PlaylistsResource_ListMethod::PlaylistsResource_ListMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        StrCat(_service_->service_url(), "playlists")),
      part_(part.as_string()),
      max_results_(5),
      _have_on_behalf_of_content_owner_(false),
      _have_on_behalf_of_content_owner_channel_(false),
      _have_channel_id_(false),
      _have_mine_(false),
      _have_max_results_(false),
      _have_page_token_(false),
      _have_id_(false) {
}

// Standard destructor.
PlaylistsResource_ListMethod::~PlaylistsResource_ListMethod() {
}

util::Status PlaylistsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  if (_have_on_behalf_of_content_owner_channel_) {
    StrAppend(target, sep, "onBehalfOfContentOwnerChannel=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_channel_));
    sep = "&";
  }
  if (_have_channel_id_) {
    StrAppend(target, sep, "channelId=",
              client::CppValueToEscapedUrlValue(
                channel_id_));
    sep = "&";
  }
  if (_have_mine_) {
    StrAppend(target, sep, "mine=",
              client::CppValueToEscapedUrlValue(
                mine_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  if (_have_id_) {
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status PlaylistsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PlaylistsResource_UpdateMethod::PlaylistsResource_UpdateMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part, const Playlist& __request_content__)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        StrCat(_service_->service_url(), "playlists")),
      part_(part.as_string()),
      _have_on_behalf_of_content_owner_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(__request_content__.MakeJsonReader());
}

// Standard destructor.
PlaylistsResource_UpdateMethod::~PlaylistsResource_UpdateMethod() {
}

util::Status PlaylistsResource_UpdateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status PlaylistsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SearchResource_ListMethod::SearchResource_ListMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        StrCat(_service_->service_url(), "search")),
      part_(part.as_string()),
      type_("video,channel,playlist"),
      max_results_(5),
      order_("SEARCH_SORT_RELEVANCE"),
      _have_event_type_(false),
      _have_channel_id_(false),
      _have_video_syndicated_(false),
      _have_channel_type_(false),
      _have_video_caption_(false),
      _have_published_after_(false),
      _have_on_behalf_of_content_owner_(false),
      _have_page_token_(false),
      _have_for_content_owner_(false),
      _have_region_code_(false),
      _have_location_(false),
      _have_location_radius_(false),
      _have_video_type_(false),
      _have_type_(false),
      _have_topic_id_(false),
      _have_published_before_(false),
      _have_video_dimension_(false),
      _have_video_license_(false),
      _have_max_results_(false),
      _have_related_to_video_id_(false),
      _have_video_definition_(false),
      _have_video_duration_(false),
      _have_for_mine_(false),
      _have_q_(false),
      _have_safe_search_(false),
      _have_video_embeddable_(false),
      _have_video_category_id_(false),
      _have_order_(false) {
}

// Standard destructor.
SearchResource_ListMethod::~SearchResource_ListMethod() {
}

util::Status SearchResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_event_type_) {
    StrAppend(target, sep, "eventType=",
              client::CppValueToEscapedUrlValue(
                event_type_));
    sep = "&";
  }
  if (_have_channel_id_) {
    StrAppend(target, sep, "channelId=",
              client::CppValueToEscapedUrlValue(
                channel_id_));
    sep = "&";
  }
  if (_have_video_syndicated_) {
    StrAppend(target, sep, "videoSyndicated=",
              client::CppValueToEscapedUrlValue(
                video_syndicated_));
    sep = "&";
  }
  if (_have_channel_type_) {
    StrAppend(target, sep, "channelType=",
              client::CppValueToEscapedUrlValue(
                channel_type_));
    sep = "&";
  }
  if (_have_video_caption_) {
    StrAppend(target, sep, "videoCaption=",
              client::CppValueToEscapedUrlValue(
                video_caption_));
    sep = "&";
  }
  if (_have_published_after_) {
    StrAppend(target, sep, "publishedAfter=",
              client::CppValueToEscapedUrlValue(
                published_after_));
    sep = "&";
  }
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  if (_have_for_content_owner_) {
    StrAppend(target, sep, "forContentOwner=",
              client::CppValueToEscapedUrlValue(
                for_content_owner_));
    sep = "&";
  }
  if (_have_region_code_) {
    StrAppend(target, sep, "regionCode=",
              client::CppValueToEscapedUrlValue(
                region_code_));
    sep = "&";
  }
  if (_have_location_) {
    StrAppend(target, sep, "location=",
              client::CppValueToEscapedUrlValue(
                location_));
    sep = "&";
  }
  if (_have_location_radius_) {
    StrAppend(target, sep, "locationRadius=",
              client::CppValueToEscapedUrlValue(
                location_radius_));
    sep = "&";
  }
  if (_have_video_type_) {
    StrAppend(target, sep, "videoType=",
              client::CppValueToEscapedUrlValue(
                video_type_));
    sep = "&";
  }
  if (_have_type_) {
    StrAppend(target, sep, "type=",
              client::CppValueToEscapedUrlValue(
                type_));
    sep = "&";
  }
  if (_have_topic_id_) {
    StrAppend(target, sep, "topicId=",
              client::CppValueToEscapedUrlValue(
                topic_id_));
    sep = "&";
  }
  if (_have_published_before_) {
    StrAppend(target, sep, "publishedBefore=",
              client::CppValueToEscapedUrlValue(
                published_before_));
    sep = "&";
  }
  if (_have_video_dimension_) {
    StrAppend(target, sep, "videoDimension=",
              client::CppValueToEscapedUrlValue(
                video_dimension_));
    sep = "&";
  }
  if (_have_video_license_) {
    StrAppend(target, sep, "videoLicense=",
              client::CppValueToEscapedUrlValue(
                video_license_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_related_to_video_id_) {
    StrAppend(target, sep, "relatedToVideoId=",
              client::CppValueToEscapedUrlValue(
                related_to_video_id_));
    sep = "&";
  }
  if (_have_video_definition_) {
    StrAppend(target, sep, "videoDefinition=",
              client::CppValueToEscapedUrlValue(
                video_definition_));
    sep = "&";
  }
  if (_have_video_duration_) {
    StrAppend(target, sep, "videoDuration=",
              client::CppValueToEscapedUrlValue(
                video_duration_));
    sep = "&";
  }
  if (_have_for_mine_) {
    StrAppend(target, sep, "forMine=",
              client::CppValueToEscapedUrlValue(
                for_mine_));
    sep = "&";
  }
  if (_have_q_) {
    StrAppend(target, sep, "q=",
              client::CppValueToEscapedUrlValue(
                q_));
    sep = "&";
  }
  if (_have_safe_search_) {
    StrAppend(target, sep, "safeSearch=",
              client::CppValueToEscapedUrlValue(
                safe_search_));
    sep = "&";
  }
  if (_have_video_embeddable_) {
    StrAppend(target, sep, "videoEmbeddable=",
              client::CppValueToEscapedUrlValue(
                video_embeddable_));
    sep = "&";
  }
  if (_have_video_category_id_) {
    StrAppend(target, sep, "videoCategoryId=",
              client::CppValueToEscapedUrlValue(
                video_category_id_));
    sep = "&";
  }
  if (_have_order_) {
    StrAppend(target, sep, "order=",
              client::CppValueToEscapedUrlValue(
                order_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status SearchResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SubscriptionsResource_DeleteMethod::SubscriptionsResource_DeleteMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& id)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        StrCat(_service_->service_url(), "subscriptions")),
      id_(id.as_string()) {
}

// Standard destructor.
SubscriptionsResource_DeleteMethod::~SubscriptionsResource_DeleteMethod() {
}

util::Status SubscriptionsResource_DeleteMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status SubscriptionsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "id") {
    target->append(client::CppValueToEscapedUrlValue(
        id_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SubscriptionsResource_InsertMethod::SubscriptionsResource_InsertMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part, const Subscription& __request_content__)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        StrCat(_service_->service_url(), "subscriptions")),
      part_(part.as_string()) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(__request_content__.MakeJsonReader());
}

// Standard destructor.
SubscriptionsResource_InsertMethod::~SubscriptionsResource_InsertMethod() {
}

util::Status SubscriptionsResource_InsertMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status SubscriptionsResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SubscriptionsResource_ListMethod::SubscriptionsResource_ListMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        StrCat(_service_->service_url(), "subscriptions")),
      part_(part.as_string()),
      max_results_(5),
      order_("SUBSCRIPTION_ORDER_RELEVANCE"),
      _have_on_behalf_of_content_owner_(false),
      _have_on_behalf_of_content_owner_channel_(false),
      _have_channel_id_(false),
      _have_mine_(false),
      _have_max_results_(false),
      _have_for_channel_id_(false),
      _have_page_token_(false),
      _have_my_subscribers_(false),
      _have_order_(false),
      _have_id_(false) {
}

// Standard destructor.
SubscriptionsResource_ListMethod::~SubscriptionsResource_ListMethod() {
}

util::Status SubscriptionsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  if (_have_on_behalf_of_content_owner_channel_) {
    StrAppend(target, sep, "onBehalfOfContentOwnerChannel=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_channel_));
    sep = "&";
  }
  if (_have_channel_id_) {
    StrAppend(target, sep, "channelId=",
              client::CppValueToEscapedUrlValue(
                channel_id_));
    sep = "&";
  }
  if (_have_mine_) {
    StrAppend(target, sep, "mine=",
              client::CppValueToEscapedUrlValue(
                mine_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_for_channel_id_) {
    StrAppend(target, sep, "forChannelId=",
              client::CppValueToEscapedUrlValue(
                for_channel_id_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  if (_have_my_subscribers_) {
    StrAppend(target, sep, "mySubscribers=",
              client::CppValueToEscapedUrlValue(
                my_subscribers_));
    sep = "&";
  }
  if (_have_order_) {
    StrAppend(target, sep, "order=",
              client::CppValueToEscapedUrlValue(
                order_));
    sep = "&";
  }
  if (_have_id_) {
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status SubscriptionsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// static
const client::MediaUploadSpec
ThumbnailsResource_SetMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/youtube/v3/thumbnails/set", true);


// static
const client::MediaUploadSpec
ThumbnailsResource_SetMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/youtube/v3/thumbnails/set", true);


util::Status ThumbnailsResource_SetMethod::Execute() {
  client::HttpRequest* request = mutable_http_request();
  util::Status status =
    _uploader_->BuildRequest(
        request,
        NewCallback(this, &ThumbnailsResource_SetMethod::PrepareUrl));
  if (!status.ok()) {
    return status;
  }

  return _uploader_->Upload(request);
}

// Standard constructor.
ThumbnailsResource_SetMethod::ThumbnailsResource_SetMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& video_id, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        StrCat(_service_->service_url(), "thumbnails/set")),
      video_id_(video_id.as_string()),
      _have_on_behalf_of_content_owner_(false) {
  _uploader_.reset(new client::MediaUploader(
      &SIMPLE_MEDIA_UPLOAD,
      _service_->url_root(),
      client::JoinPath(
          _service_->url_path(), "thumbnails/set")));
  if (_media_content_reader_) {
    _uploader_->set_media_content_reader(
        _media_content_type_.as_string(), _media_content_reader_);
  }
}

// Standard destructor.
ThumbnailsResource_SetMethod::~ThumbnailsResource_SetMethod() {
}

util::Status ThumbnailsResource_SetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "videoId=",
              client::CppValueToEscapedUrlValue(
                video_id_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ThumbnailsResource_SetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "videoId") {
    target->append(client::CppValueToEscapedUrlValue(
        video_id_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
VideoCategoriesResource_ListMethod::VideoCategoriesResource_ListMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        StrCat(_service_->service_url(), "videoCategories")),
      part_(part.as_string()),
      hl_("en_US"),
      _have_region_code_(false),
      _have_id_(false),
      _have_hl_(false) {
}

// Standard destructor.
VideoCategoriesResource_ListMethod::~VideoCategoriesResource_ListMethod() {
}

util::Status VideoCategoriesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_region_code_) {
    StrAppend(target, sep, "regionCode=",
              client::CppValueToEscapedUrlValue(
                region_code_));
    sep = "&";
  }
  if (_have_id_) {
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
  }
  if (_have_hl_) {
    StrAppend(target, sep, "hl=",
              client::CppValueToEscapedUrlValue(
                hl_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status VideoCategoriesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
VideosResource_DeleteMethod::VideosResource_DeleteMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& id)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        StrCat(_service_->service_url(), "videos")),
      id_(id.as_string()),
      _have_on_behalf_of_content_owner_(false) {
}

// Standard destructor.
VideosResource_DeleteMethod::~VideosResource_DeleteMethod() {
}

util::Status VideosResource_DeleteMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status VideosResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "id") {
    target->append(client::CppValueToEscapedUrlValue(
        id_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
VideosResource_GetRatingMethod::VideosResource_GetRatingMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& id)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        StrCat(_service_->service_url(), "videos/getRating")),
      id_(id.as_string()),
      _have_on_behalf_of_content_owner_(false) {
}

// Standard destructor.
VideosResource_GetRatingMethod::~VideosResource_GetRatingMethod() {
}

util::Status VideosResource_GetRatingMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status VideosResource_GetRatingMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "id") {
    target->append(client::CppValueToEscapedUrlValue(
        id_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// static
const client::MediaUploadSpec
VideosResource_InsertMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/youtube/v3/videos", true);


// static
const client::MediaUploadSpec
VideosResource_InsertMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/youtube/v3/videos", true);


util::Status VideosResource_InsertMethod::Execute() {
  client::HttpRequest* request = mutable_http_request();
  util::Status status =
    _uploader_->BuildRequest(
        request,
        NewCallback(this, &VideosResource_InsertMethod::PrepareUrl));
  if (!status.ok()) {
    return status;
  }

  return _uploader_->Upload(request);
}

// Deprecated constructor did not take media upload arguments.
VideosResource_InsertMethod::VideosResource_InsertMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part)
    : YouTubeServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "videos")),
      part_(part.as_string()),
      notify_subscribers_(true),
      _have_on_behalf_of_content_owner_(false),
      _have_stabilize_(false),
      _have_on_behalf_of_content_owner_channel_(false),
      _have_notify_subscribers_(false),
      _have_auto_levels_(false) {
  _uploader_.reset(new client::MediaUploader(
      &SIMPLE_MEDIA_UPLOAD,
      _service_->url_root(),
      client::JoinPath(
          _service_->url_path(), "videos")));
}
// Standard constructor.
VideosResource_InsertMethod::VideosResource_InsertMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part, const Video* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        StrCat(_service_->service_url(), "videos")),
      part_(part.as_string()),
      notify_subscribers_(true),
      _have_on_behalf_of_content_owner_(false),
      _have_stabilize_(false),
      _have_on_behalf_of_content_owner_channel_(false),
      _have_notify_subscribers_(false),
      _have_auto_levels_(false) {
  _uploader_.reset(new client::MediaUploader(
      &SIMPLE_MEDIA_UPLOAD,
      _service_->url_root(),
      client::JoinPath(
          _service_->url_path(), "videos")));
  if (_metadata_) {
    _uploader_->set_metadata(*_metadata_);
  }
  if (_media_content_reader_) {
    _uploader_->set_media_content_reader(
        _media_content_type_.as_string(), _media_content_reader_);
  }
}

// Standard destructor.
VideosResource_InsertMethod::~VideosResource_InsertMethod() {
}

util::Status VideosResource_InsertMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  if (_have_stabilize_) {
    StrAppend(target, sep, "stabilize=",
              client::CppValueToEscapedUrlValue(
                stabilize_));
    sep = "&";
  }
  if (_have_on_behalf_of_content_owner_channel_) {
    StrAppend(target, sep, "onBehalfOfContentOwnerChannel=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_channel_));
    sep = "&";
  }
  if (_have_notify_subscribers_) {
    StrAppend(target, sep, "notifySubscribers=",
              client::CppValueToEscapedUrlValue(
                notify_subscribers_));
    sep = "&";
  }
  if (_have_auto_levels_) {
    StrAppend(target, sep, "autoLevels=",
              client::CppValueToEscapedUrlValue(
                auto_levels_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status VideosResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
VideosResource_ListMethod::VideosResource_ListMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        StrCat(_service_->service_url(), "videos")),
      part_(part.as_string()),
      video_category_id_("0"),
      max_results_(5),
      _have_on_behalf_of_content_owner_(false),
      _have_region_code_(false),
      _have_locale_(false),
      _have_video_category_id_(false),
      _have_chart_(false),
      _have_max_results_(false),
      _have_page_token_(false),
      _have_my_rating_(false),
      _have_id_(false) {
}

// Standard destructor.
VideosResource_ListMethod::~VideosResource_ListMethod() {
}

util::Status VideosResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  if (_have_region_code_) {
    StrAppend(target, sep, "regionCode=",
              client::CppValueToEscapedUrlValue(
                region_code_));
    sep = "&";
  }
  if (_have_locale_) {
    StrAppend(target, sep, "locale=",
              client::CppValueToEscapedUrlValue(
                locale_));
    sep = "&";
  }
  if (_have_video_category_id_) {
    StrAppend(target, sep, "videoCategoryId=",
              client::CppValueToEscapedUrlValue(
                video_category_id_));
    sep = "&";
  }
  if (_have_chart_) {
    StrAppend(target, sep, "chart=",
              client::CppValueToEscapedUrlValue(
                chart_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  if (_have_my_rating_) {
    StrAppend(target, sep, "myRating=",
              client::CppValueToEscapedUrlValue(
                my_rating_));
    sep = "&";
  }
  if (_have_id_) {
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status VideosResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
VideosResource_RateMethod::VideosResource_RateMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& id, const StringPiece& rating)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        StrCat(_service_->service_url(), "videos/rate")),
      id_(id.as_string()),
      rating_(rating.as_string()),
      _have_on_behalf_of_content_owner_(false) {
}

// Standard destructor.
VideosResource_RateMethod::~VideosResource_RateMethod() {
}

util::Status VideosResource_RateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "id=",
              client::CppValueToEscapedUrlValue(
                id_));
    sep = "&";
    StrAppend(target, sep, "rating=",
              client::CppValueToEscapedUrlValue(
                rating_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status VideosResource_RateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "id") {
    target->append(client::CppValueToEscapedUrlValue(
        id_));
    return client::StatusOk();
  }
  if (variable_name == "rating") {
    target->append(client::CppValueToEscapedUrlValue(
        rating_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
VideosResource_UpdateMethod::VideosResource_UpdateMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& part, const Video& __request_content__)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        StrCat(_service_->service_url(), "videos")),
      part_(part.as_string()),
      _have_on_behalf_of_content_owner_(false) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
      client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(__request_content__.MakeJsonReader());
}

// Standard destructor.
VideosResource_UpdateMethod::~VideosResource_UpdateMethod() {
}

util::Status VideosResource_UpdateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "part=",
              client::CppValueToEscapedUrlValue(
                part_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status VideosResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "part") {
    target->append(client::CppValueToEscapedUrlValue(
        part_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// static
const client::MediaUploadSpec
WatermarksResource_SetMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/youtube/v3/watermarks/set", true);


// static
const client::MediaUploadSpec
WatermarksResource_SetMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/youtube/v3/watermarks/set", true);


util::Status WatermarksResource_SetMethod::Execute() {
  client::HttpRequest* request = mutable_http_request();
  util::Status status =
    _uploader_->BuildRequest(
        request,
        NewCallback(this, &WatermarksResource_SetMethod::PrepareUrl));
  if (!status.ok()) {
    return status;
  }

  return _uploader_->Upload(request);
}

// Deprecated constructor did not take media upload arguments.
WatermarksResource_SetMethod::WatermarksResource_SetMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& channel_id)
    : YouTubeServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      StrCat(_service_->service_url(), "watermarks/set")),
      channel_id_(channel_id.as_string()),
      _have_on_behalf_of_content_owner_(false) {
  _uploader_.reset(new client::MediaUploader(
      &SIMPLE_MEDIA_UPLOAD,
      _service_->url_root(),
      client::JoinPath(
          _service_->url_path(), "watermarks/set")));
}
// Standard constructor.
WatermarksResource_SetMethod::WatermarksResource_SetMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& channel_id, const InvideoBranding* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        StrCat(_service_->service_url(), "watermarks/set")),
      channel_id_(channel_id.as_string()),
      _have_on_behalf_of_content_owner_(false) {
  _uploader_.reset(new client::MediaUploader(
      &SIMPLE_MEDIA_UPLOAD,
      _service_->url_root(),
      client::JoinPath(
          _service_->url_path(), "watermarks/set")));
  if (_metadata_) {
    _uploader_->set_metadata(*_metadata_);
  }
  if (_media_content_reader_) {
    _uploader_->set_media_content_reader(
        _media_content_type_.as_string(), _media_content_reader_);
  }
}

// Standard destructor.
WatermarksResource_SetMethod::~WatermarksResource_SetMethod() {
}

util::Status WatermarksResource_SetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "channelId=",
              client::CppValueToEscapedUrlValue(
                channel_id_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status WatermarksResource_SetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "channelId") {
    target->append(client::CppValueToEscapedUrlValue(
        channel_id_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
WatermarksResource_UnsetMethod::WatermarksResource_UnsetMethod(
    const YouTubeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& channel_id)
    : YouTubeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        StrCat(_service_->service_url(), "watermarks/unset")),
      channel_id_(channel_id.as_string()),
      _have_on_behalf_of_content_owner_(false) {
}

// Standard destructor.
WatermarksResource_UnsetMethod::~WatermarksResource_UnsetMethod() {
}

util::Status WatermarksResource_UnsetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "channelId=",
              client::CppValueToEscapedUrlValue(
                channel_id_));
    sep = "&";
  if (_have_on_behalf_of_content_owner_) {
    StrAppend(target, sep, "onBehalfOfContentOwner=",
              client::CppValueToEscapedUrlValue(
                on_behalf_of_content_owner_));
    sep = "&";
  }
  return YouTubeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status WatermarksResource_UnsetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "channelId") {
    target->append(client::CppValueToEscapedUrlValue(
        channel_id_));
    return client::StatusOk();
  }
  return YouTubeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



YouTubeService::YouTubeService(client::HttpTransport* transport)
  : ClientService("https://www.googleapis.com/", "youtube/v3/", transport), activities_(this), channel_banners_(this), channel_sections_(this), channels_(this), guide_categories_(this), i18n_languages_(this), i18n_regions_(this), live_broadcasts_(this), live_streams_(this), playlist_items_(this), playlists_(this), search_(this), subscriptions_(this), thumbnails_(this), video_categories_(this), videos_(this), watermarks_(this) {
}

YouTubeService::~YouTubeService() {
}


YouTubeService::ActivitiesResource::ActivitiesResource(YouTubeService* service)
  : service_(service) {
}



ActivitiesResource_InsertMethod* YouTubeService::ActivitiesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& part, const Activity& __request_content__) const {
  return new ActivitiesResource_InsertMethod(service_, _credential_, part, __request_content__);
}


ActivitiesResource_ListMethod* YouTubeService::ActivitiesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new ActivitiesResource_ListMethod(service_, _credential_, part);
}


ActivitiesResource_ListMethodPager* YouTubeService::ActivitiesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new client::EncapsulatedServiceRequestPager<ActivitiesResource_ListMethod, ActivityListResponse>(new ActivitiesResource_ListMethod(service_, _credential_, part));
}

YouTubeService::ChannelBannersResource::ChannelBannersResource(YouTubeService* service)
  : service_(service) {
}




// This factory method is deprecated in favor of the newer variation that
// also takes the media upload parameters.
ChannelBannersResource_InsertMethod* YouTubeService::ChannelBannersResource::NewInsertMethod(client::AuthorizationCredential* _credential_) const {
  return new ChannelBannersResource_InsertMethod(service_, _credential_);
}

ChannelBannersResource_InsertMethod* YouTubeService::ChannelBannersResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const ChannelBannerResource* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_) const {
  return new ChannelBannersResource_InsertMethod(service_, _credential_, _metadata_, _media_content_type_, _media_content_reader_);
}

YouTubeService::ChannelSectionsResource::ChannelSectionsResource(YouTubeService* service)
  : service_(service) {
}



ChannelSectionsResource_DeleteMethod* YouTubeService::ChannelSectionsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& id) const {
  return new ChannelSectionsResource_DeleteMethod(service_, _credential_, id);
}


ChannelSectionsResource_InsertMethod* YouTubeService::ChannelSectionsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& part, const ChannelSection& __request_content__) const {
  return new ChannelSectionsResource_InsertMethod(service_, _credential_, part, __request_content__);
}


ChannelSectionsResource_ListMethod* YouTubeService::ChannelSectionsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new ChannelSectionsResource_ListMethod(service_, _credential_, part);
}


ChannelSectionsResource_UpdateMethod* YouTubeService::ChannelSectionsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& part, const ChannelSection& __request_content__) const {
  return new ChannelSectionsResource_UpdateMethod(service_, _credential_, part, __request_content__);
}

YouTubeService::ChannelsResource::ChannelsResource(YouTubeService* service)
  : service_(service) {
}



ChannelsResource_ListMethod* YouTubeService::ChannelsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new ChannelsResource_ListMethod(service_, _credential_, part);
}


ChannelsResource_ListMethodPager* YouTubeService::ChannelsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new client::EncapsulatedServiceRequestPager<ChannelsResource_ListMethod, ChannelListResponse>(new ChannelsResource_ListMethod(service_, _credential_, part));
}


ChannelsResource_UpdateMethod* YouTubeService::ChannelsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& part, const Channel& __request_content__) const {
  return new ChannelsResource_UpdateMethod(service_, _credential_, part, __request_content__);
}

YouTubeService::GuideCategoriesResource::GuideCategoriesResource(YouTubeService* service)
  : service_(service) {
}



GuideCategoriesResource_ListMethod* YouTubeService::GuideCategoriesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new GuideCategoriesResource_ListMethod(service_, _credential_, part);
}

YouTubeService::I18nLanguagesResource::I18nLanguagesResource(YouTubeService* service)
  : service_(service) {
}



I18nLanguagesResource_ListMethod* YouTubeService::I18nLanguagesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new I18nLanguagesResource_ListMethod(service_, _credential_, part);
}

YouTubeService::I18nRegionsResource::I18nRegionsResource(YouTubeService* service)
  : service_(service) {
}



I18nRegionsResource_ListMethod* YouTubeService::I18nRegionsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new I18nRegionsResource_ListMethod(service_, _credential_, part);
}

YouTubeService::LiveBroadcastsResource::LiveBroadcastsResource(YouTubeService* service)
  : service_(service) {
}



LiveBroadcastsResource_BindMethod* YouTubeService::LiveBroadcastsResource::NewBindMethod(client::AuthorizationCredential* _credential_, const StringPiece& id, const StringPiece& part) const {
  return new LiveBroadcastsResource_BindMethod(service_, _credential_, id, part);
}


LiveBroadcastsResource_ControlMethod* YouTubeService::LiveBroadcastsResource::NewControlMethod(client::AuthorizationCredential* _credential_, const StringPiece& id, const StringPiece& part) const {
  return new LiveBroadcastsResource_ControlMethod(service_, _credential_, id, part);
}


LiveBroadcastsResource_DeleteMethod* YouTubeService::LiveBroadcastsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& id) const {
  return new LiveBroadcastsResource_DeleteMethod(service_, _credential_, id);
}


LiveBroadcastsResource_InsertMethod* YouTubeService::LiveBroadcastsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& part, const LiveBroadcast& __request_content__) const {
  return new LiveBroadcastsResource_InsertMethod(service_, _credential_, part, __request_content__);
}


LiveBroadcastsResource_ListMethod* YouTubeService::LiveBroadcastsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new LiveBroadcastsResource_ListMethod(service_, _credential_, part);
}


LiveBroadcastsResource_ListMethodPager* YouTubeService::LiveBroadcastsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new client::EncapsulatedServiceRequestPager<LiveBroadcastsResource_ListMethod, LiveBroadcastListResponse>(new LiveBroadcastsResource_ListMethod(service_, _credential_, part));
}


LiveBroadcastsResource_TransitionMethod* YouTubeService::LiveBroadcastsResource::NewTransitionMethod(client::AuthorizationCredential* _credential_, const StringPiece& broadcast_status, const StringPiece& id, const StringPiece& part) const {
  return new LiveBroadcastsResource_TransitionMethod(service_, _credential_, broadcast_status, id, part);
}


LiveBroadcastsResource_UpdateMethod* YouTubeService::LiveBroadcastsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& part, const LiveBroadcast& __request_content__) const {
  return new LiveBroadcastsResource_UpdateMethod(service_, _credential_, part, __request_content__);
}

YouTubeService::LiveStreamsResource::LiveStreamsResource(YouTubeService* service)
  : service_(service) {
}



LiveStreamsResource_DeleteMethod* YouTubeService::LiveStreamsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& id) const {
  return new LiveStreamsResource_DeleteMethod(service_, _credential_, id);
}


LiveStreamsResource_InsertMethod* YouTubeService::LiveStreamsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& part, const LiveStream& __request_content__) const {
  return new LiveStreamsResource_InsertMethod(service_, _credential_, part, __request_content__);
}


LiveStreamsResource_ListMethod* YouTubeService::LiveStreamsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new LiveStreamsResource_ListMethod(service_, _credential_, part);
}


LiveStreamsResource_ListMethodPager* YouTubeService::LiveStreamsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new client::EncapsulatedServiceRequestPager<LiveStreamsResource_ListMethod, LiveStreamListResponse>(new LiveStreamsResource_ListMethod(service_, _credential_, part));
}


LiveStreamsResource_UpdateMethod* YouTubeService::LiveStreamsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& part, const LiveStream& __request_content__) const {
  return new LiveStreamsResource_UpdateMethod(service_, _credential_, part, __request_content__);
}

YouTubeService::PlaylistItemsResource::PlaylistItemsResource(YouTubeService* service)
  : service_(service) {
}



PlaylistItemsResource_DeleteMethod* YouTubeService::PlaylistItemsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& id) const {
  return new PlaylistItemsResource_DeleteMethod(service_, _credential_, id);
}


PlaylistItemsResource_InsertMethod* YouTubeService::PlaylistItemsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& part, const PlaylistItem& __request_content__) const {
  return new PlaylistItemsResource_InsertMethod(service_, _credential_, part, __request_content__);
}


PlaylistItemsResource_ListMethod* YouTubeService::PlaylistItemsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new PlaylistItemsResource_ListMethod(service_, _credential_, part);
}


PlaylistItemsResource_ListMethodPager* YouTubeService::PlaylistItemsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new client::EncapsulatedServiceRequestPager<PlaylistItemsResource_ListMethod, PlaylistItemListResponse>(new PlaylistItemsResource_ListMethod(service_, _credential_, part));
}


PlaylistItemsResource_UpdateMethod* YouTubeService::PlaylistItemsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& part, const PlaylistItem& __request_content__) const {
  return new PlaylistItemsResource_UpdateMethod(service_, _credential_, part, __request_content__);
}

YouTubeService::PlaylistsResource::PlaylistsResource(YouTubeService* service)
  : service_(service) {
}



PlaylistsResource_DeleteMethod* YouTubeService::PlaylistsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& id) const {
  return new PlaylistsResource_DeleteMethod(service_, _credential_, id);
}


PlaylistsResource_InsertMethod* YouTubeService::PlaylistsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& part, const Playlist& __request_content__) const {
  return new PlaylistsResource_InsertMethod(service_, _credential_, part, __request_content__);
}


PlaylistsResource_ListMethod* YouTubeService::PlaylistsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new PlaylistsResource_ListMethod(service_, _credential_, part);
}


PlaylistsResource_ListMethodPager* YouTubeService::PlaylistsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new client::EncapsulatedServiceRequestPager<PlaylistsResource_ListMethod, PlaylistListResponse>(new PlaylistsResource_ListMethod(service_, _credential_, part));
}


PlaylistsResource_UpdateMethod* YouTubeService::PlaylistsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& part, const Playlist& __request_content__) const {
  return new PlaylistsResource_UpdateMethod(service_, _credential_, part, __request_content__);
}

YouTubeService::SearchResource::SearchResource(YouTubeService* service)
  : service_(service) {
}



SearchResource_ListMethod* YouTubeService::SearchResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new SearchResource_ListMethod(service_, _credential_, part);
}


SearchResource_ListMethodPager* YouTubeService::SearchResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new client::EncapsulatedServiceRequestPager<SearchResource_ListMethod, SearchListResponse>(new SearchResource_ListMethod(service_, _credential_, part));
}

YouTubeService::SubscriptionsResource::SubscriptionsResource(YouTubeService* service)
  : service_(service) {
}



SubscriptionsResource_DeleteMethod* YouTubeService::SubscriptionsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& id) const {
  return new SubscriptionsResource_DeleteMethod(service_, _credential_, id);
}


SubscriptionsResource_InsertMethod* YouTubeService::SubscriptionsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& part, const Subscription& __request_content__) const {
  return new SubscriptionsResource_InsertMethod(service_, _credential_, part, __request_content__);
}


SubscriptionsResource_ListMethod* YouTubeService::SubscriptionsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new SubscriptionsResource_ListMethod(service_, _credential_, part);
}


SubscriptionsResource_ListMethodPager* YouTubeService::SubscriptionsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new client::EncapsulatedServiceRequestPager<SubscriptionsResource_ListMethod, SubscriptionListResponse>(new SubscriptionsResource_ListMethod(service_, _credential_, part));
}

YouTubeService::ThumbnailsResource::ThumbnailsResource(YouTubeService* service)
  : service_(service) {
}



ThumbnailsResource_SetMethod* YouTubeService::ThumbnailsResource::NewSetMethod(client::AuthorizationCredential* _credential_, const StringPiece& video_id, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_) const {
  return new ThumbnailsResource_SetMethod(service_, _credential_, video_id, _media_content_type_, _media_content_reader_);
}

YouTubeService::VideoCategoriesResource::VideoCategoriesResource(YouTubeService* service)
  : service_(service) {
}



VideoCategoriesResource_ListMethod* YouTubeService::VideoCategoriesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new VideoCategoriesResource_ListMethod(service_, _credential_, part);
}

YouTubeService::VideosResource::VideosResource(YouTubeService* service)
  : service_(service) {
}



VideosResource_DeleteMethod* YouTubeService::VideosResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& id) const {
  return new VideosResource_DeleteMethod(service_, _credential_, id);
}


VideosResource_GetRatingMethod* YouTubeService::VideosResource::NewGetRatingMethod(client::AuthorizationCredential* _credential_, const StringPiece& id) const {
  return new VideosResource_GetRatingMethod(service_, _credential_, id);
}



// This factory method is deprecated in favor of the newer variation that
// also takes the media upload parameters.
VideosResource_InsertMethod* YouTubeService::VideosResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new VideosResource_InsertMethod(service_, _credential_, part);
}

VideosResource_InsertMethod* YouTubeService::VideosResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& part, const Video* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_) const {
  return new VideosResource_InsertMethod(service_, _credential_, part, _metadata_, _media_content_type_, _media_content_reader_);
}


VideosResource_ListMethod* YouTubeService::VideosResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new VideosResource_ListMethod(service_, _credential_, part);
}


VideosResource_ListMethodPager* YouTubeService::VideosResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& part) const {
  return new client::EncapsulatedServiceRequestPager<VideosResource_ListMethod, VideoListResponse>(new VideosResource_ListMethod(service_, _credential_, part));
}


VideosResource_RateMethod* YouTubeService::VideosResource::NewRateMethod(client::AuthorizationCredential* _credential_, const StringPiece& id, const StringPiece& rating) const {
  return new VideosResource_RateMethod(service_, _credential_, id, rating);
}


VideosResource_UpdateMethod* YouTubeService::VideosResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& part, const Video& __request_content__) const {
  return new VideosResource_UpdateMethod(service_, _credential_, part, __request_content__);
}

YouTubeService::WatermarksResource::WatermarksResource(YouTubeService* service)
  : service_(service) {
}




// This factory method is deprecated in favor of the newer variation that
// also takes the media upload parameters.
WatermarksResource_SetMethod* YouTubeService::WatermarksResource::NewSetMethod(client::AuthorizationCredential* _credential_, const StringPiece& channel_id) const {
  return new WatermarksResource_SetMethod(service_, _credential_, channel_id);
}

WatermarksResource_SetMethod* YouTubeService::WatermarksResource::NewSetMethod(client::AuthorizationCredential* _credential_, const StringPiece& channel_id, const InvideoBranding* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_) const {
  return new WatermarksResource_SetMethod(service_, _credential_, channel_id, _metadata_, _media_content_type_, _media_content_reader_);
}


WatermarksResource_UnsetMethod* YouTubeService::WatermarksResource::NewUnsetMethod(client::AuthorizationCredential* _credential_, const StringPiece& channel_id) const {
  return new WatermarksResource_UnsetMethod(service_, _credential_, channel_id);
}
}  // namespace google_youtube_api
